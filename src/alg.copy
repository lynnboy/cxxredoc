[section#alg.copy
    [:en] Copy
]

[%@library copy]
[codeblock:declaration]
template<class InputIterator, class OutputIterator>
  OutputIterator copy(InputIterator first, InputIterator last,
                      OutputIterator result);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Copies elements in the range [=range[first,last)] into the range
[=range[result,result + (last - first))] starting from [`first] and proceeding
to [`last].

[:en] For each non-negative integer [`n < (last - first)], performs
[`*(result + n) = *(first + n)].

[para:returns]
[:en] [`result + (last - first)].

[para:requires]
[:en] [`result] shall not be in the range [=range[first,last)].

[para:complexity]
[:en] Exactly [`last - first] assignments.
[exit:description]

[%@library copy_n]
[codeblock:declaration]
template<class InputIterator, class Size, class OutputIterator>
  OutputIterator copy_n(InputIterator first, Size n,
                        OutputIterator result);
[codeblock:end]

[enter:description]
[para:effects]
[:en] For each non-negative integer [$i < n], performs
[`*(result + i) = *(first + i)].

[para:returns]
[:en] [`result + n].

[para:complexity]
[:en] Exactly [`n] assignments.
[exit:description]

[%@library copy_n]
[codeblock:declaration]
template<class InputIterator, class OutputIterator, class Predicate>
  OutputIterator copy_if(InputIterator first, InputIterator last,
                         OutputIterator result, Predicate pred);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The ranges [=range[first,last)] and [=range[result,result + (last -
first))] shall not overlap.

[para:effects]
[:en] Copies all of the elements referred to by the iterator [`i] in the range
[=range[first,last)] for which [`pred(*i)] is [`true].

[para:returns]
[:en] The end of the resulting range.

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate.

[para:remarks]
[:en] Stable ([#algorithm.stable]).
[exit:description]

[%@library copy_backward]
[codeblock:declaration]
template<class BidirectionalIterator1, class BidirectionalIterator2>
  BidirectionalIterator2
    copy_backward(BidirectionalIterator1 first,
                  BidirectionalIterator1 last,
                  BidirectionalIterator2 result);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Copies elements in the range [=range[first,last)] into the range
[=range[result - (last-first),result)] starting from [`last - 1] and proceeding
to [`first].

[footnote]
[:en] [`copy_backward] should be used instead of copy when [`last] is in
the range [=range[result - (last - first),result)].
[footnote:end]

[:en] For each positive integer [`n <= (last - first)], performs
[`*(result - n) = *(last - n)].

[para:requires]
[:en] [`result] shall not be in the range [=brange(first,last`]].

[para:returns]
[:en] [`result - (last - first)].

[para:complexity]
[:en] Exactly [`last - first] assignments.
[exit:description]
