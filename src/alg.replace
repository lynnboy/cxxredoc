[section#alg.replace
    [:en] Replace
]

[%@library replace]
[%@library replace_if]
[codeblock:declaration]
template<class ForwardIterator, class T>
  void replace(ForwardIterator first, ForwardIterator last,
               const T& old_value, const T& new_value);

template<class ForwardIterator, class Predicate, class T>
  void replace_if(ForwardIterator first, ForwardIterator last,
                  Predicate pred, const T& new_value);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The expression [`*first = new_value] shall be valid.

[para:effects]
[:en] Substitutes elements referred by the iterator [`i] in the range
[=range[first,last)] with [`new_value], when the following corresponding
conditions hold: [`*i == old_value], [`pred(*i) != false].

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate.
[exit:description]

[%@library replace_copy]
[%@library replace_copy_if]
[codeblock:declaration]
template<class InputIterator, class OutputIterator, class T>
  OutputIterator
    replace_copy(InputIterator first, InputIterator last,
                 OutputIterator result,
                 const T& old_value, const T& new_value);

template<class InputIterator, class OutputIterator, class Predicate, class T>
  OutputIterator
    replace_copy_if(InputIterator first, InputIterator last,
                    OutputIterator result,
                    Predicate pred, const T& new_value);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The results of the expressions [`*first] and [`new_value] shall be
writable to the [`result] output iterator.

[:en] The ranges [=range[first,last)] and
[=range[result,result + (last - first))] shall not overlap.

[para:effects]
[:en] Assigns to every iterator [`i] in the range [=range[result,result + (last
- first))] either [`new_value] or [`*(first + (i - result))] depending on
whether the following corresponding conditions hold:

[codeblock:notation]
*(first + (i - result)) == old_value
pred(*(first + (i - result))) != false
[codeblock:end]

[para:returns]
[:en] [`result + (last - first)].

[para:complexity]
[:en] Exactly [`last - first] applications of the corresponding predicate.
[exit:description]
