[section#allocator.adaptor.cnstr
    [:en] Scoped allocator adaptor constructors
]

[%@library scoped_allocator_adaptor[!constructor]]
[codeblock:declaration]
scoped_allocator_adaptor();
[codeblock:end]

[enter:description]
[para:effects]
[:en] value-initializes the [`OuterAlloc] base class and the [`inner] allocator
object.
[exit:description]

[%@library scoped_allocator_adaptor[!constructor]]
[codeblock:declaration]
template <class OuterA2>
  scoped_allocator_adaptor(OuterA2&& outerAlloc,
                           const InnerAllocs&... innerAllocs) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`OuterAlloc] shall be constructible from [`OuterA2].

[para:effects]
[:en] initializes the [`OuterAlloc] base class with
[`std::forward<OuterA2>(outerAlloc)] and [`inner] with [`innerAllocs...] (hence
recursively initializing each allocator within the adaptor with the
corresponding allocator from the argument list).
[exit:description]

[%@library scoped_allocator_adaptor[!constructor]]
[codeblock:declaration]
scoped_allocator_adaptor(const scoped_allocator_adaptor& other) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] initializes each allocator within the adaptor with the corresponding
allocator from [`other].
[exit:description]

[%@library scoped_allocator_adaptor[!constructor]]
[codeblock:declaration]
scoped_allocator_adaptor(scoped_allocator_adaptor&& other) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] move constructs each allocator within the adaptor with the corresponding
allocator from [`other].
[exit:description]

[%@library scoped_allocator_adaptor[!constructor]]
[codeblock:declaration]
template <class OuterA2>
  scoped_allocator_adaptor(const scoped_allocator_adaptor<OuterA2,
                                                          InnerAllocs...>& other) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`OuterAlloc] shall be constructible from [`OuterA2].

[para:effects]
[:en] initializes each allocator within the adaptor with the corresponding
allocator from [`other].
[exit:description]

[%@library scoped_allocator_adaptor[!constructor]]
[codeblock:declaration]
template <class OuterA2>
  scoped_allocator_adaptor(scoped_allocator_adaptor<OuterA2,
                                                    InnerAllocs...>&& other) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`OuterAlloc] shall be constructible from [`OuterA2].

[para:effects]
[:en] initializes each allocator within the adaptor with the corresponding
allocator rvalue from [`other].
[exit:description]
