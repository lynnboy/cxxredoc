[section#allocator.requirements
    [:en] Allocator requirements
]

[%[:en] requirements[![`Allocator]]]
[para]
[:en]
The library describes a standard set of requirements for [+allocators], which
are class-type objects that encapsulate the information about an allocation
model.

[:en]
This information includes the knowledge of pointer types, the type of their
difference, the type of the size of objects in this allocation model, as well
as the memory allocation and deallocation primitives for it.

[:en]
All of the string types (Clause [#strings]), containers (Clause [#containers])
(except array), string buffers and string streams (Clause [#input.output]), and
[`match_results] (Clause [#re]) are parameterized in terms of allocators.

[para]
[:en]
The template struct [`allocator_traits] ([#allocator.traits]) supplies a uniform
interface to all allocator types.

[:en]
Table [#tab:desc.var.def] describes the types manipulated through allocators.

[:en]
Table [#tab:utilities.allocator.requirements] describes the requirements on
allocator types and thus on types used to instantiate [`allocator_traits].

[:en]
A requirement is optional if the last column of Table
[#tab:utilities.allocator.requirements] specifies a default for a given
expression.

[:en]
Within the standard library [`allocator_traits] template, an optional
requirement that is not supplied by an allocator is replaced by the specified
default expression.

[:en]
A user specialization of [`allocator_traits] may provide different defaults and
may provide defaults for different requirements than the primary template.

[:en]
Within Tables [#tab:desc.var.def] and [#tab:utilities.allocator.requirements],
the use of [`move] and [`forward] always refers to [`std::move]
and [`std::forward], respectively.

[table:listing@reflabel#tab:desc.var.def
    [:en] Descriptive variable definitions
    [columns
        [column@code@headercenter
            [:en] Variable
        ]
        [column@headercenter
            [:en] Definition
        ]
    ]
    [border:row@none]
]
[|] T, U, C
        [|] [:en] any non-const object type ([#basic.types])
[|] X
        [|] [:en] an Allocator class for type [`T]
[|] Y
        [|] [:en] the corresponding Allocator class for type [`U]
[|] XX
        [|] [:en] the type [`allocator_traits<X>]
[|] YY
        [|] [:en] the type [`allocator_traits<Y>]
[|] a, a1, a2
        [|] [:en] lvalues of type [`X]
[|] u
        [|] [:en] the name of a variable being declared
[|] b
        [|] [:en] a value of type [`Y]
[|] c
        [|] [:en] a pointer of type [`C*] through which indirection is valid
[|] p
        [|] [:en] a value of type [`XX::pointer], obtained by calling
            [`a1.allocate], where [`a1 == a]
[|] q
        [|] [:en] a value of type [`XX::const_pointer] obtained by conversion
            from a value [`p].
[|] w
        [|] [:en] a value of type [`XX::void_pointer] obtained by conversion
            from a value [`p]
[|] x
        [|] [:en] a value of type [`XX::const_void_pointer] obtained by
            conversion from a value [`q] or a value [`w]
[|] y
        [|] [:en] a value of type [`XX:const_void_pointer] obtained by
            conversion from a result value of [`YY::allocate], or else a value
            of type (possibly [`const]) [`std::nullptr_t].
[|] n
        [|] [:en] a value of type [`XX::size_type].
[|] Args
        [|] [:en] a template parameter pack
[|] args
        [|] [:en] a function parameter pack with the pattern [`Args&&]
[table:end]

[table:listing@reflabel#tab:utilities.allocator.requirements
    [:en] Allocator requirements
    [columns
        [column@code@headercenter
            [:en] Expression
        ]
        [column@headercenter
            [:en] Return type
        ]
        [column@headercenter
            [:en] Assertion/note [br] pre-/post-condition
        ]
        [column@headercenter
            [:en] Default
        ]
    ]
    [border:row@none]
]
[|] X::pointer
[|]
[|]
[|] [`T*]

[|] X::const_pointer
[|]
[|] [:en] [`X::pointer] is convertible to [`X::const_pointer]
[|] [`pointer_traits<X::pointer>::rebind<const T>]

[|] X::void_pointer [br] Y::void_pointer
[|]
[|] [:en] [`X::pointer] is convertible to [`X::void_pointer].
    [:en] [`X::void_pointer] and [`Y::void_pointer] are the same type.
[|] [`pointer_traits<X::pointer>::rebind<void>]

[|] X::const_void_pointer [br] Y::const_void_pointer
[|]
[|] [:en] [`X::pointer], [`X::const_pointer], and [`X::void_pointer] are convertible
    to [`X::const_void_pointer].
    [:en] [`X::const_void_pointer] and [`Y::const_void_pointer] are the same
    type.
[|] [`pointer_traits<X::pointer>::rebind<const void>]

[|] X::value_type
[|] [:en] Identical to [`T]
[|]
[|]

[|] X::size_type
[|] [:en] unsigned integer type
[|] [:en] a type that can represent the size of the largest object in the
    allocation model.
[|] [`make_unsigned_t<X::difference_type>]

[|] X::difference_type
[|] [:en] signed integer type
[|] [:en] a type that can represent the difference between any two pointers in
    the allocation model.
[|] [`pointer_traits<X::pointer>::difference_type]

[|] typename X::template rebind<U>::other
[|] [`Y]
[|] [:en] For all [`U] (including [`T]), [`Y::template rebind<T>::other] is
    [`X].
[|] [:en] See Note A, below.

[|] *p
[|] [`T&]
[|]
[|]

[|] *q
[|] [`const T&]
[|] [:en] [`*q] refers to the same object as [`*p]
[|]

[|] p->m
[|] [:en] type of [`T::m]
[|] [:en] [=Pre] [`(*p).m] is well-defined. equivalent to [`(*p).m]
[|]

[|] q->m
[|] [:en] type of [`T::m]
[|] [:en] [=Pre] [`(*q).m] is well-defined. equivalent to [`(*q).m]
[|]

[|] static_cast<X::pointer>(w)]
[|] [`X::pointer]
[|] [`static_cast<X::pointer>(w) == p]
[|]

[|] static_cast<X ::const_pointer>(x)]
[|] [`X::const_pointer]
[|] [`static_cast<X::const_pointer>(x) == q]
[|]

[|] a.allocate(n)
[|] [`X::pointer]
[|] [:en] Memory is allocated for [`n] objects of type [`T] but objects are not
    constructed.
    [:en] [`allocate] may raise an appropriate exception.
    [footnote]
    [:en] It is intended that [`a.allocate] be an efficient means of allocating
    a single object of type [`T], even when [`sizeof(T)] is small.
    [:en] That is, there is no need for a container to maintain its own free
    list.
    [footnote:end]
    [enter:note]
    [:en] If [`n == 0], the return value is unspecified.
    [exit:note]
[|]

[|] a.allocate(n, y)
[|] [`X::pointer]
[|] [:en] Same as [`a.allocate(n)].
    [:en] The use of [`y] is unspecified, but it is intended as an aid to
    locality.
[|] [`a.allocate(n)]

[|] a.deallocate(p,n)
[|] [:en] (not used)
[|] [:en] All [`n T] objects in the area pointed to by [`p] shall be destroyed
    prior to this call.
    [:en] [`n] shall match the value passed to [`allocate] to obtain this
    memory.
    [:en] Does not throw exceptions.
    [enter:note]
    [:en] [`p] shall not be singular.
    [exit:note]
[|]

[|] a.max_size()
[|] [`X::size_type]
[|] [:en] the largest value that can meaningfully be passed to [`X::allocate()]
[|] [`numeric_limits<size_type>::max()]

[|] a1 == a2
[|] [`bool]
[|] [:en] returns [`true] only if storage allocated from each can be deallocated
    via the other.
    [:en] [`operator==] shall be reflexive, symmetric, and transitive, and shall
    not exit via an exception.
[|]

[|] a1 != a2
[|] [`bool]
[|] [:en] same as [`!(a1 == a2)]
[|]

[|] a == b
[|] [`bool]
[|] [:en] same as [`a == Y::rebind<T>::other(b)]
[|]

[|] a != b
[|] [`bool]
[|] [:en] same as [`!(a == b)]
[|]

[|] X u(a); [br] X u = a;
[|]
[|] [:en] Shall not exit via an exception. [br]
    [:en] [=Post] [`a1 == a]
[|]

[|] X u(b);
[|]
[|] [:en] Shall not exit via an exception. [br]
    [:en] [=Post] [`Y(a) == b], [`a == X(b)]
[|]

[|] X u(move(a)); [br] X u = move(a);
[|]
[|] [:en] Shall not exit via an exception. [br]
    [:en] [=Post] [`a1] equals the prior value of [`a].
[|]

[|] X u(move(b));
[|]
[|] [:en] Shall not exit via an exception. [br]
    [:en] [=Post] [`a] equals the prior value of [`X(b)].
[|]

[|] a.construct(c, args)
[|] [:en] (not used)
[|] [:en] [=Effect] Constructs an object of type [`C] at [`c]
[|] [`::new ((void*)c) C(forward<Args>(args)...)]

[|] a.destroy(c)
[|] [:en] (not used)
[|] [:en] [=Effect] Destroys the object at [`c]
[|] [`c->~C()]

[|] a.select_on_container_copy_construction()
[|] [`X]
[|] [:en] Typically returns either [`a] or [`X()]
[|] [`return a;]

[|] X::propagate_on_container_copy_assignment
[|] [:en] Identical to or derived from [`true_type] or [`false_type]
[|] [:en] [`true_type] only if an allocator of type [`X] should be copied when
    the client container is copy-assigned.
    [:en] See Note B, below.
[|] [`false_type]

[|] X::propagate_on_container_move_assignment
[|] [:en] Identical to or derived from [`true_type] or [`false_type]
[|] [:en] [`true_type] only if an allocator of type [`X] should be moved when
    the client container is move-assigned.
    [:en] See Note B, below.
[|] [`false_type]

[|] X::propagate_on_container_swap
[|] [:en] Identical to or derived from [`true_type] or [`false_type]
[|] [:en] [`true_type] only if an allocator of type [`X] should be swapped when
    the client container is swapped.
    [:en] See Note B, below.
[|] [`false_type]

[|] X::is_always_equal
[|] [:en] Identical to or derived from [`true_type] or [`false_type]
[|] [:en] [`true_type] only if the expression [`a1 == a2] is guaranteed to be
    true for any two (possibly [`const]) values [`a1], [`a2] of type [`X].
[|] [`is_empty<X>]

[table:end]

[para]
[:en]
Note A: The member class template [`rebind] in the table above is effectively a
typedef template.

[enter:note]
[:en]
In general, if the name [`Allocator] is bound to [`SomeAllocator<T>], then
[`Allocator::rebind<U>::other] is the same type as [`SomeAllocator<U>], where
[`SomeAllocator<T>::value_type] is [`T] and [`SomeAllocator<U>::value_type] is
[`U].
[exit:note]

[:en]
If [`Allocator] is a class template instantiation of the form [`SomeAllocator<T,
Args>], where [`Args] is zero or more type arguments, and [`Allocator] does not
supply a [`rebind] member template, the standard [`allocator_traits] template
uses [`SomeAllocator<U, Args>] in place of [`Allocator::rebind<U>::other] by
default.

[:en]
For allocator types that are not template instantiations of the above form, no
default is provided.

[para]
[:en]
Note B: If [`X::propagate_on_container_copy_assignment::value] is [`true], [`X]
shall satisfy the [`CopyAssignable] requirements (Table [#tab:copyassignable])
and the copy operation shall not throw exceptions.

[:en]
If [`X::propagate_on_container_move_assignment::value] is [`true], [`X] shall
satisfy the [`MoveAssignable] requirements (Table [#tab:moveassignable]) and the
move operation shall not throw exceptions.

[:en]
If [`X::propagate_on_container_swap::value] is [`true], lvalues of type [`X]
shall be swappable ([#swappable.requirements]) and the [`swap] operation shall
not throw exceptions.

[para]
[:en]
An allocator type [`X] shall satisfy the requirements of [`CopyConstructible]
([#utility.arg.requirements]).

[:en]
The [`X::pointer], [`X::const_pointer], [`X::void_pointer], and
[`X::const_void_pointer] types shall satisfy the requirements of
[`NullablePointer] ([#nullablepointer.requirements]).

[:en]
No constructor, comparison operator, copy operation, move operation, or swap
operation on these types shall exit via an exception.

[:en]
[`X::pointer] and [`X::const_pointer] shall also satisfy the requirements for a
random access iterator ([#iterator.requirements]).

[para]
[:en]
Let [`x1] and [`x2] denote objects of (possibly different) types
[`X::void_pointer], [`X::const_void_pointer], [`X::pointer],
or [`X::const_pointer].

[:en]
Then, [`x1] and [`x2] are [def equivalently-valued] pointer values, if and only
if both [`x1] and [`x2] can be explicitly converted to the two corresponding
objects [`px1] and [`px2] of type [`X::const_pointer], using a sequence of
[`static_cast]s using only these four types, and the expression [`px1 == px2]
evaluates to [`true].

[para]
[:en]
Let [`w1] and [`w2] denote objects of type [`X::void_pointer].

[:en]
Then for the expressions

[codeblock:notation]
w1 == w2
w1 != w2
[codeblock:end]

[:en@~]
either or both objects may be replaced by an equivalently-valued object of type
[`X::const_void_pointer] with no change in semantics.

[para]
[:en]
Let [`p1] and [`p2] denote objects of type [`X::pointer].

[:en]
Then for the expressions

[codeblock:notation]
p1 == p2
p1 != p2
p1 < p2
p1 <= p2
p1 >= p2
p1 > p2
p1 - p2
[codeblock:end]

[:en]
either or both objects may be replaced by an equivalently-valued object of type
[`X::const_pointer] with no change in semantics.

[para]
[:en]
An allocator may constrain the types on which it can be instantiated and the
arguments for which its [`construct] member may be called.

[:en]
If a type cannot be used with a particular allocator, the allocator class or the
call to [`construct] may fail to instantiate.

[para:~]
[enter:example]
[:en]
the following is an allocator class template supporting the minimal interface
that satisfies the requirements of
Table [#tab:utilities.allocator.requirements]:

[codeblock [special ctor-args] ]
template <class Tp>
struct SimpleAllocator {
  typedef Tp value_type;
  SimpleAllocator(ctor-args);

  template <class T> SimpleAllocator(const SimpleAllocator<T>& other);

  Tp* allocate(std::size_t n);
  void deallocate(Tp* p, std::size_t n);
};

template <class T, class U>
bool operator==(const SimpleAllocator<T>&, const SimpleAllocator<U>&);
template <class T, class U>
bool operator!=(const SimpleAllocator<T>&, const SimpleAllocator<U>&);
[codeblock:end]
[exit:example]

[para]
[:en]
If the alignment associated with a specific over-aligned type is not supported
by an allocator, instantiation of the allocator for that type may fail.

[:en]
The allocator also may silently ignore the requested alignment.

[enter:note]
[:en]
Additionally, the member function [`allocate] for that type may fail by throwing
an object of type [`std::bad_alloc].
[exit:note]
