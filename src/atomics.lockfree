[section#atomics.lockfree
    [:en] Lock-free property
]

[%@impldef values of various [`ATOMIC_..._LOCK_FREE] macros]
[codeblock:synopsis [special unspecified] ]
#define ATOMIC_BOOL_LOCK_FREE unspecified
#define ATOMIC_CHAR_LOCK_FREE unspecified
#define ATOMIC_CHAR16_T_LOCK_FREE unspecified
#define ATOMIC_CHAR32_T_LOCK_FREE unspecified
#define ATOMIC_WCHAR_T_LOCK_FREE unspecified
#define ATOMIC_SHORT_LOCK_FREE unspecified
#define ATOMIC_INT_LOCK_FREE unspecified
#define ATOMIC_LONG_LOCK_FREE unspecified
#define ATOMIC_LLONG_LOCK_FREE unspecified
#define ATOMIC_POINTER_LOCK_FREE unspecified
[codeblock:end]

[para]
[:en] The [`ATOMIC_..._LOCK_FREE] macros indicate the lock-free property of the
corresponding atomic types, with the signed and unsigned variants grouped
together.

[:en] The properties also apply to the corresponding (partial) specializations
of the [`atomic] template.

[:en] A value of 0 indicates that the types are never lock-free.

[:en] A value of 1 indicates that the types are sometimes lock-free.

[:en] A value of 2 indicates that the types are always lock-free.

[para]
[:en] The function [`atomic_is_lock_free] ([#atomics.types.operations])
indicates whether the object is lock-free.

[:en] In any given program execution, the result of the lock-free query shall be
consistent for all pointers of the same type.

[para]
[enter:note]
[:en] Operations that are lock-free should also be address-free.

[:en] That is, atomic operations on the same memory location via two different
addresses will communicate atomically.

[:en] The implementation should not depend on any per-process state.

[:en] This restriction enables communication by memory that is mapped into a
process more than once and by memory that is shared between two processes.
[exit:note]
