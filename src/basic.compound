[section#basic.compound
    [:en] Compound types
    [:zh_CN] 
]

[para]
[:en]
[%type[!compound]]
Compound types can be constructed in the following ways:

[list]
[item]
[%type[!array]]
[+arrays] of objects of a given type, [#dcl.array];

[item]
[%type[!function]]
[+functions], which have parameters of given types and return [`void] or
references or objects of a given type, [#dcl.fct];

[item]
[%type[!pointer]]
[+pointers] to [`void] or objects or functions (including static members of
classes) of a given type, [#dcl.ptr];

[item]
[:en]
[%reference] [%reference[!lvalue]] [%reference[!rvalue]]
[%lvalue reference] [%rvalue reference]
[+references] to objects or functions of a given type, [#dcl.ref].

[:en]
There are two types of references:
[list]
[item]
[:en@~]
[+lvalue reference]
[item]
[:en@~]
[+rvalue reference]
[list:end]

[item]
[:en]
[%class]
[+classes] containing a sequence of objects of various types (Clause [#class]),
a set of types, enumerations and functions for manipulating these objects
([#class.mfct]), and a set of restrictions on the access to these entities
(Clause [#class.access]);

[item]
[:en]
[%[`union]]
[+unions], which are classes capable of containing objects of different types at
different times, [#class.union];

[item]
[:en]
[%[`enum]]
[+enumerations], which comprise a set of named constant values.

[:en]
Each distinct enumeration constitutes a different
[%type[!enumerated]] [+enumerated type], [#dcl.enum];

[item]
[:en]
[%member pointer to [see pointer to member]]
[%pointer to member]
[+pointers to non-static]

[footnote]
Static class members are objects or functions, and pointers to them are ordinary
pointers to objects or functions.
[footnote:end]

[:en]
[+class members], which identify members of a given type within objects of a
given class, [#dcl.mptr].
[list:end]

[para]
[:en]
These methods of constructing types can be applied recursively; restrictions are
mentioned in [#dcl.ptr], [#dcl.array], [#dcl.fct], and [#dcl.ref].

[:en]
Constructing a type such that the number of bytes in its object representation
exceeds the maximum value representable in the type [`std::size_t]
([#support.types]) is ill-formed.

[para]
[:en]
[%terminology[!pointer]]
The type of a pointer to [`void] or a pointer to an object type is called an
[def object pointer type].

[enter:note]
[:en]
A pointer to [`void] does not have a pointer-to-object type, however, because
[`void] is not an object type.
[exit:note]

[:en]
The type of a pointer that can designate a function is called a [def function
pointer type].

[:en]
A pointer to objects of type [`T] is referred to as a ["pointer to [`T].]

[enter:example]
[:en]
a pointer to an object of type [`int] is referred to as ["pointer to [`int]] and
a pointer to an object of class [`X] is called a ["pointer to [`X].]
[exit:example]

[:en]
Except for pointers to static members, text referring to ["pointers] does not
apply to pointers to members.

[:en]
Pointers to incomplete types are allowed although there are restrictions on what
can be done with them ([#basic.align]).

[:en]
[%address]
A valid value of an object pointer type represents either the address of a byte
in memory ([#intro.memory]) or a null pointer ([#conv.ptr]).

[:en]
If an object of type [`T] is located at an address [`A], a pointer of type [$cv]
[`T*] whose value is the address [`A] is said to [+point to] that object,
regardless of how the value was obtained.

[enter:note]
[:en]
For instance, the address one past the end of an array ([#expr.add]) would be
considered to point to an unrelated object of the array[=']s element type that
might be located at that address.

[:en]
There are further restrictions on pointers to objects with dynamic storage
duration; see [#basic.stc.dynamic.safety].
[exit:note]

[:en]
The value representation of pointer types is [%@impldef value representation of
pointer types] implementation-defined.

[:en]
Pointers to layout-compatible types shall have the same value representation and
alignment requirements ([#basic.align]).

[enter:note]
[:en]
Pointers to over-aligned types ([#basic.align]) have no special representation,
but their range of valid values is restricted by the extended alignment
requirement.

[:en]
This International Standard specifies only two ways of obtaining such a pointer:
taking the address of a valid object with an over-aligned type, and using one of
the runtime pointer alignment functions.

[:en]
An implementation may provide other means of obtaining a valid pointer value for
an over-aligned type.[exit:note]

[para]
[:en]
[%pointer [seealso [`void*]]]
[%[`void*][!type]]
A pointer to [$cv]-qualified ([#basic.type.qualifier]) or [$cv]-unqualified
[`void] can be used to point to objects of unknown type.

[:en]
Such a pointer shall be able to hold any object pointer.

[:en]
An object of type [$cv] [`void*] shall have the same representation and
alignment requirements as [$cv] [`char*].
