\rSec2[basic.fundamental]{Fundamental types}

[para]
[%type!fundamental]
[%type!integral]
[%type!floating point]
[%type!implementation-defined @[`sizeof}]
[%type!Boolean]
[%type!\idxcode{char}]
[%type!character]
[%type!narrow character]
Objects declared as characters ([`char}) shall be large enough to
store any member of the implementation[=']s basic character set. If a
character from this set is stored in a character object, the integral
value of that character object is equal to the value of the single
character literal form of that character. It is \impldef{signedness of [`char}}
whether a [`char} object can hold negative values.
[%\idxcode{char}!implementation-defined sign~of]
[%type!\idxcode{signed char}]
[%type!\idxcode{unsigned char}]
Characters can be explicitly declared [`unsigned} or
[`signed}.
[%character!\idxcode{signed}]
Plain [`char}, [`signed char}, and [`unsigned char} are
three distinct types, collectively called [+narrow character types}.
A [`char}, a [`signed char}, and an
[`unsigned char} occupy the same amount of storage and have the
same alignment requirements ([#basic.align}); that is, they have the
same object representation. For narrow character types, all bits of the object
representation participate in the value representation. For unsigned narrow
character types, each possible bit pattern of the value representation
represents a distinct number. These requirements do not hold for other types. In
any particular implementation, a plain [`char} object can take on
either the same values as a [`signed char} or an [`unsigned
char}; which one is \impldef{representation of [`char}}.
For each value \placeholder{i} of type [`unsigned char} in the range
0 to 255 inclusive, there exists a value \placeholder{j} of type
[`char} such that the result of an integral
conversion ([#conv.integral}) from \placeholder{i} to [`char} is
\placeholder{j}, and the result of an integral conversion from
\placeholder{j} to [`unsigned char} is \placeholder{i}.

[para]
[%type!standard~signed~integer]
[%standard~signed~integer~type]
There are five [+standard signed integer types} :
[%type!\idxcode{signed char}]
[%type!\idxcode{short}]
[%type!\idxcode{int}]
[%type!\idxcode{long}]
[%type!\idxcode{long long}]
["[`signed char}], ["[`short int}], ["[`int}],
["[`long int}], and ["[`long} [`long} [`int}]. In
this list, each type provides at least as much storage as those
preceding it in the list.
[%type!extended~signed~integer]
[%extended~signed~integer~type]
[%type!signed~integer]
[%signed~integer~type]
There may also be \impldef{extended signed integer types} [+extended signed
integer types}. The standard and
extended signed integer types are collectively called [+signed integer types}.
[%integral~type!implementation-defined @[`sizeof}]
Plain
[`int}s have the natural size suggested by the architecture of the
execution environment%
\footnote{[`int} must also be large enough
to contain any value in the range
\crange{INT_MIN}{INT_MAX},
as defined in the header [`<climits>}.};
the other signed integer types are provided to meet special needs.

[para]
[%type!\idxcode{unsigned}]
For each of the standard signed integer types,
there exists a corresponding (but different)
[%type!standard~unsigned~integer]
[%standard~unsigned~integer~type]
[+standard unsigned integer type}:
[%type!\idxcode{unsigned char}]
[%type!\idxcode{unsigned short}]
[%type!\idxcode{unsigned int}]
[%type!\idxcode{unsigned long}]
[%type!\idxcode{unsigned long long}]
["[`unsigned char}], ["[`unsigned short int}],
["[`unsigned int}], ["[`unsigned long int}], and
["[`unsigned} [`long} [`long} [`int}], each of
which occupies the same amount of storage and has the same alignment
requirements ([#basic.align}) as the corresponding signed integer
type\footnote{See [#dcl.type.simple} regarding the correspondence between types and
the sequences of [~type-specifier}s that designate them.};
that is, each signed integer type has the same object representation as
its corresponding unsigned integer type.
[%type!extended~unsigned~integer]
[%extended~unsigned~integer~type]
[%type!unsigned~integer]
[%unsigned~integer~type]
Likewise, for each of the extended signed integer types there exists a
corresponding [+extended unsigned integer type} with the same amount of storage and alignment
requirements. The standard and extended unsigned integer types are
collectively called [+unsigned integer types}. The range of non-negative
values of a [+signed integer} type is a subrange of the corresponding
[+unsigned integer} type, and the value
representation of each corresponding signed/unsigned type shall be the
same.
[%type!standard~integer]
[%standard~integer~type]
[%type!extended~integer]
[%extended~integer~type]
The standard signed integer types and standard unsigned integer types
are collectively called the [+standard integer types}, and the extended
signed integer types and extended
unsigned integer types are collectively called the [+extended
integer types}. The signed and unsigned integer types shall satisfy
the constraints given in the C standard, section 5.2.4.2.1.

[para]
[%arithmetic!\idxcode{unsigned}]
Unsigned integers shall obey the laws of arithmetic modulo $2^n$ where $n$ is
the number of bits in the value representation of that particular size of
integer.\footnote{This implies that
unsigned arithmetic does not overflow because a result
that cannot be represented by the resulting unsigned integer type is
reduced modulo the number that is one greater than the largest value
that can be represented by the resulting unsigned integer type.}

[para]
[%type!\idxcode{char16_t}]
[%type!\idxcode{char32_t}]
[%\idxcode{wchar_t}!implementation-defined]
[%type!\idxcode{wchar_t}]
[%type!underlying wchar_t@underlying [`wchar_t}]
Type [`wchar_t} is a distinct type whose values can represent
distinct codes for all members of the largest extended character set
specified among the supported locales ([#locale}). Type
[`wchar_t} shall have the same size, signedness, and alignment
requirements ([#basic.align}) as one of the other integral types,
called its [def underlying type}. Types [`char16_t} and
[`char32_t} denote distinct types with the same size, signedness,
and alignment as [`uint_least16_t} and [`uint_least32_t},
respectively, in [`<cstdint>}, called the underlying types.

[para]
[%Boolean~type]
Values of type [`bool} are either [`true} or
[`false}.\footnote{Using a [`bool} value in ways described by this International
Standard as ["undefined,] such as by examining the value of an
uninitialized automatic object, might cause it to behave as if it is
neither [`true} nor [`false}.}
[enter:note]
 There are no [`signed}, [`unsigned}, [`short},
or [`long bool} types or values. [exit:note]
 Values of type
[`bool} participate in integral promotions ([#conv.prom}).

[para]
Types [`bool}, [`char}, [`char16_t}, [`char32_t},
[`wchar_t}, and the signed and unsigned integer types are
collectively called
[%integral~type]
[+integral} types.\footnote{Therefore, enumerations ([#dcl.enum}) are not integral; however,
enumerations can be promoted to integral types as specified
in [#conv.prom}.}
A synonym for integral type is
[%integer~type]
[+integer type}. The representations of integral types shall
define values by use of  a pure binary numeration system.\footnote{A positional
representation for integers that uses the binary digits 0
and 1, in which the values represented by successive bits are additive,
begin with 1, and are multiplied by successive integral power of 2,
except perhaps for the bit with the highest position. (Adapted from the
\doccite{American National Dictionary for Information Processing Systems}.)}
[enter:example]
 this International Standard permits 2[=']s complement, 1[=']s
complement and signed magnitude representations for integral types.
[exit:example]


[para]
[%floating~point~type]
There are three [+floating point} types:
[%type!\idxcode{float}]
[`float},
[%type!\idxcode{double}]
[`double},
and
[%type!\idxcode{long double}]
[`long double}. The type [`double} provides at least as much
precision as [`float}, and the type [`long double} provides at
least as much precision as [`double}. The set of values of the type
[`float} is a subset of the set of values of the type
[`double}; the set of values of the type [`double} is a subset
of the set of values of the type [`long} [`double}. The value
representation of floating-point types is \impldef{value representation of
floating-point types}.
[%floating~point~type!implementation-defined]
[%type!arithmetic]
[+Integral} and [+floating} types are collectively
called [+arithmetic} types.
[%\idxcode{numeric_limits}!specializations for arithmetic types]
Specializations of the standard template
[`std::numeric_limits} ([#support.limits}) shall specify the
maximum and minimum values of each arithmetic type for an
implementation.

[para]
[%type!\idxcode{void}]
The [`void} type has an empty set of values. The [`void} type
is an incomplete type that cannot be completed. It is used as the return
type for functions that do not return a value. Any expression can be
explicitly converted to type [+cv}
[`void} ([#expr.cast}). An expression of type [`void} shall
be used only as an expression statement ([#stmt.expr}), as an operand
of a comma expression ([#expr.comma}), as a second or third operand
of [`?:} ([#expr.cond}), as the operand of
[`typeid}, [`noexcept}, or [`decltype}, as
the expression in a return statement ([#stmt.return}) for a function
with the return type [`void}, or as the operand of an explicit conversion
to type \cv\ [`void}.

[para]
A value of type [`std::nullptr_t} is a null pointer
constant ([#conv.ptr}). Such values participate in the pointer and the
pointer to member conversions ([#conv.ptr}, [#conv.mem}).
[`sizeof(std::nullptr_t)} shall be equal to [`sizeof(void*)}.

[para]
[enter:note]
 
Even if the implementation defines two or more basic types to have the
same value representation, they are nevertheless different types.
[exit:note]
 

