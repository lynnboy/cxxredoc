[section#basic.lookup.argdep
    [:en] Argument-dependent name lookup
    [:zh_CN] 
]

[para]
[:en]
[%lookup[!argument-dependent]]
When the [~postfix-expression] in a function call ([#expr.call]) is an
[~unqualified-id], other namespaces not considered during the usual unqualified
lookup ([#basic.lookup.unqual]) may be searched, and in those namespaces,
namespace-scope friend function or function template declarations
([#class.friend]) not otherwise visible may be found.

[:en]
These modifications to the search depend on the types of the arguments (and for
template template arguments, the namespace of the template argument).

[enter:example]

[codeblock]
namespace N {
  struct S { };
  void f(S);
}

void g() {
  N::S s;
  f(s);                         // [:en] OK: calls [`N::f]
  (f)(s);                       // [:en] error: [`N::f] not considered; parentheses
                                // [:en@~] prevent argument-dependent lookup
}
[codeblock:end]

[exit:example]

[para]
[:en]
For each argument type [`T] in the function call, there is a set of zero or more
associated namespaces and a set of zero or more associated classes to be
considered.

[:en]
The sets of namespaces and classes is determined entirely by the types of the
function arguments (and the namespace of any template template argument).

[:en]
Typedef names and [~using-declaration]s used to specify the types do not
contribute to this set.

[:en]
The sets of namespaces and classes are determined in the following way:

[list]
[item]
[:en]
If [`T] is a fundamental type, its associated sets of namespaces and classes are
both empty.

[item]
[:en]
If [`T] is a class type (including unions), its associated classes are: the
class itself; the class of which it is a member, if any; and its direct and
indirect base classes.

[:en]
Its associated namespaces are the innermost enclosing namespaces of its
associated classes.

[:en]
Furthermore, if [`T] is a class template specialization, its associated
namespaces and classes also include: the namespaces and classes associated with
the types of the template arguments provided for template type parameters
(excluding template template parameters); the namespaces of which any template
template arguments are members; and the classes of which any member templates
used as template template arguments are members.

[enter:note]
[:en]
Non-type template arguments do not contribute to the set of associated
namespaces.
[exit:note]

[item]
[:en]
If [`T] is an enumeration type, its associated namespace is the innermost
enclosing namespace of its declaration.

[:en]
If it is a class member, its associated class is the member[=']s class; else it
has no associated class.

[item]
[:en]
If [`T] is a pointer to [`U] or an array of [`U], its associated namespaces and
classes are those associated with [`U].

[item]
[:en]
If [`T] is a function type, its associated namespaces and classes are those
associated with the function parameter types and those associated with the
return type.

[item]
[:en]
If [`T] is a pointer to a member function of a class [`X], its associated
namespaces and classes are those associated with the function parameter types
and return type, together with those associated with [`X].

[item]
[:en]
If [`T] is a pointer to a data member of class [`X], its associated namespaces
and classes are those associated with the member type together with those
associated with [`X].

[list:end]

[:en]
If an associated namespace is an inline namespace ([#namespace.def]), its
enclosing namespace is also included in the set.

[:en]
If an associated namespace directly contains inline namespaces, those inline
namespaces are also included in the set.

[:en]
In addition, if the argument is the name or address of a set of overloaded
functions and/or function templates, its associated classes and namespaces are
the union of those associated with each of the members of the set, i.e., the
classes and namespaces associated with its parameter types and return type.

[:en]
Additionally, if the aforementioned set of overloaded functions is named with
a [~template-id], its associated classes and namespaces also include those of
its type [~template-argument]s and its template [~template-argument]s.

[para]
[:en]
Let [$X] be the lookup set produced by unqualified lookup
([#basic.lookup.unqual]) and let [$Y] be the lookup set produced by argument
dependent lookup (defined as follows).

[:en]
If [$X] contains
[list]
[item]
[:en]
a declaration of a class member, or

[item]
[:en]
a block-scope function declaration that is not a [~using-declaration], or

[item]
[:en]
a declaration that is neither a function or a function template

[list:end]
[:en]
then [$Y] is empty. Otherwise [$Y] is the set of declarations found in the
namespaces associated with the argument types as described below.

[:en]
The set of declarations found by the lookup of the name is the union of [$X] and
[$Y].

[enter:note]
[:en]
The namespaces and classes associated with the argument types can include
namespaces and classes already considered by the ordinary unqualified lookup.
[exit:note]

[enter:example]

[codeblock]
namespace NS {
  class T { };
  void f(T);
  void g(T, int);
}
NS::T parm;
void g(NS::T, float);
int main() {
  f(parm);                      // [:en] OK: calls [`NS::f]
  extern void g(NS::T, float);
  g(parm, 1);                   // [:en] OK: calls [`g(NS::T, float)]
}
[codeblock:end]
[exit:example]

[para]
[:en]
When considering an associated namespace, the lookup is the same as the lookup
performed when the associated namespace is used as a qualifier
([#namespace.qual]) except that:

[list]
[item]
[:en]
Any [~using-directive]s in the associated namespace are ignored.

[item]
[:en]
Any namespace-scope friend functions or friend function templates declared in
associated classes are visible within their respective namespaces even if they
are not visible during an ordinary lookup ([#class.friend]).

[item]
[:en]
All names except those of (possibly overloaded) functions and function templates
are ignored.

[list:end]
