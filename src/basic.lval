[section#basic.lval
    [:en] Lvalues and rvalues
    [:zh_CN] 左值和右值
]

[para]
[:en]
Expressions are categorized according to the taxonomy in Figure
[#fig:categories].
[:zh_CN]
表达式按照图 [#fig:categories] 中的分类法进行归类。

[figure:graphviz@dot#fig:categories
    [:en] Expression category taxonomy
    [:zh_CN] 表达式类别分类法
]
[:en]
digraph categories {
    graph [nodesep=.75];

    expression [shape=plaintext, height=.1, fontsize=24];
    glvalue [shape=plaintext, height=.1, fontsize=24];
    lvalue [shape=plaintext, height=.1, fontsize=24];
    xvalue [shape=plaintext, height=.1, fontsize=24];
    rvalue [shape=plaintext, height=.1, fontsize=24];
    prvalue [shape=plaintext, height=.1, fontsize=24];

    expression -> glvalue;
    glvalue -> lvalue;
    glvalue -> xvalue;
    expression -> rvalue;
    rvalue -> xvalue;
    rvalue -> prvalue;
}
[:zh_CN]
digraph categories {
    graph [nodesep=.75];

    expression [label="表达式", shape=plaintext, height=.1, fontsize=24];
    glvalue [label="泛左值（glvalue）", shape=plaintext, height=.1, fontsize=24];
    lvalue [label="左值（lvalue）", shape=plaintext, height=.1, fontsize=24];
    xvalue [label="临限值（xvalue）", shape=plaintext, height=.1, fontsize=24];
    rvalue [label="右值（rvalue）", shape=plaintext, height=.1, fontsize=24];
    prvalue [label="纯右值（prvalue）", shape=plaintext, height=.1, fontsize=24];

    expression -> glvalue;
    glvalue -> lvalue;
    glvalue -> xvalue;
    expression -> rvalue;
    rvalue -> xvalue;
    rvalue -> prvalue;
}
[figure:end]

[list]
[item]
[:en]
An [def lvalue] (so called, historically, because lvalues could appear on the
left-hand side of an assignment expression) designates a function or an object.
[:zh_CN]
[def 左值]（lvalue）（该称呼的历史来源于左值能够出现在赋值表达式的左手边），代表
函数或对象。

[enter:example]
[:en]
If [`E] is an expression of pointer type, then [`*E] is an lvalue expression
referring to the object or function to which [`E] points.
[:zh_CN]
若 [`E] 为指针类型的表达式，则 [`*E] 就为指代由 [`E] 所指向的对象或函数的左值
表达式。

[:en]
As another example, the result of calling a function whose return type is an
lvalue reference is an lvalue.
[:zh_CN]
又例如，调用返回类型为左值引用的函数的结果是左值。
[exit:example]

[item]
[:en]
An [def xvalue] (an ["eXpiring] value) also refers to an object, usually near
the end of its lifetime (so that its resources may be moved, for example).
[:zh_CN]
[def 临限值]（xvalue）（“临近期限（eXpiring）的”值）也代表对象，通常临近该对象的
生存期结束（例如，因而它的资源可以被移走）。

[:en]
Certain kinds of expressions involving rvalue references ([#dcl.ref]) yield
xvalues.
[:zh_CN]
涉及右值引用（[#dcl.ref]）的特定种类的表达式产生临限值。

[enter:example]
[:en]
The result of calling a function whose return type is an rvalue reference to an
object type is an xvalue ([#expr.call]).
[:zh_CN]
对返回类型是指代对象的右值引用的函数进行调用的结果是临限值（[#expr.call]）。
[exit:example]

[item]
[:en]
A [def glvalue] (["generalized] lvalue) is an lvalue or an xvalue.
[:zh_CN]
[def 泛左值]（glvalue）（广义，泛化（Generic）的左值）是左值或临限值。

[item]
[:en]
An [def rvalue] (so called, historically, because rvalues could appear on the
right-hand side of an assignment expression) is an xvalue, a temporary object
([#class.temporary]) or subobject thereof, or a value that is not associated
with an object.
[:zh_CN]
[def 右值]（rvalue）（该称呼的历史来源于右值能够出现于赋值表达式的右手边），是
临限值，临时对象（[#class.temporary]）或其子对象，或者未与对象相关联的值。

[item]
[:en]
A [def prvalue] (["pure] rvalue) is an rvalue that is not an xvalue.
[:zh_CN]
[def 纯右值]（prvalue）（纯（Pure）右值）是并非临限值的右值。

[enter:example]
[:en]
The result of calling a function whose return type is not a reference is a
prvalue.
[:zh_CN]
调用返回类型不是引用的函数的结果是纯右值。

[:en]
The value of a literal such as [`12], [`7.3e5], or [`true] is also a prvalue.
[:zh_CN]
如 [`12]，[`7.3e5]，或 [`true] 这样的字面量也是纯右值。
[exit:example]

[list:end]

[:en]
Every expression belongs to exactly one of the fundamental classifications in
this taxonomy: lvalue, xvalue, or prvalue.
[:zh_CN]
每个表达式都属于这种分类法中的恰好一种基础类别：左值、临限值或纯右值。

[:en]
This property of an expression is called its [def value category].
[:zh_CN]
表达式的这项属性被称为它的[def 值类别]。

[enter:note]
[:en]
The discussion of each built-in operator in Clause [#expr] indicates the
category of the value it yields and the value categories of the operands it
expects.
[:zh_CN]
第 [#expr] 条中针对每个内建运算符的讨论，指出其所产生的值类别以及它所要求的操作
数的值类别。

[:en]
For example, the built-in assignment operators expect that the left operand is
an lvalue and that the right operand is a prvalue and yield an lvalue as the
result.
[:zh_CN]
例如，内建赋值运算符都要求其左操作数为左值，而其右操作数是纯右值，且其产生的结果
为左值。

[:en]
User-defined operators are functions, and the categories of values they expect
and yield are determined by their parameter and return types.
[:zh_CN]
自定义的运算符都是函数，并且它们所要求的和所产生的值的类别都由它们的形参和返回
类型决定。
[exit:note]

[para]
[:en]
Whenever a glvalue appears in a context where a prvalue is expected, the glvalue
is converted to a prvalue; see [#conv.lval], [#conv.array], and [#conv.func].
[:zh_CN]
当泛左值出现在要求纯右值的语境中时，泛左值被转换为纯右值；参见 [#conv.lval]，
[#conv.array]，和 [#conv.func]。

[enter:note]
[:en]
An attempt to bind an rvalue reference to an lvalue is not such a context; see
[#dcl.init.ref].
[:zh_CN]
试图向左值绑定右值引用不属于这种语境；参见 [#dcl.init.ref]。
[exit:note]

[para]
[:en]
The discussion of reference initialization in [#dcl.init.ref] and of temporaries
in [#class.temporary] indicates the behavior of lvalues and rvalues in other
significant contexts.
[:zh_CN]
[#dcl.init.ref] 中关于引用初始化，以及 [#class.temporary] 中关于临时对象的讨论，
指出了左值和右值在其他重要的语境中的行为。

[para]
[:en]
Unless otherwise indicated ([#expr.call]), prvalues shall always have complete
types or the [`void] type; in addition to these types, glvalues can also have
incomplete types.
[:zh_CN]
除非另行规定（[#expr.call]），纯右值应当总是具有完整类型或 [`void] 类型；除了
这些类型之外，泛左值还可以具有不完整类型。

[enter:note]
[:en]
class and array prvalues can have cv-qualified types; other prvalues always have
cv-unqualified types.
[:zh_CN]
类和数组的纯右值可以具有 cv-限定的类型；其他纯右值总是具有 cv-未限定的类型。

[:en]
See Clause [#expr].
[:zh_CN]
参见第 [#expr] 条。
[exit:note]

[para]
[:en]
An lvalue for an object is necessary in order to modify the object except that
an rvalue of class type can also be used to modify its referent under certain
circumstances.
[:zh_CN]
改变对象需要该对象的左值，除此之外类类型的右值在特定情况下也能用于改变其所指对象
。

[enter:example]
[:en]
a member function called for an object ([#class.mfct]) can modify the object.
[:zh_CN]
对某对象调用成员函数（[#class.mfct]）能够改变该对象。
[exit:example]

[para]
[:en]
Functions cannot be modified, but pointers to functions can be modifiable.
[:zh_CN]
函数不能被改变，但指向函数的指针是可改变的。

[para]
[:en]
A pointer to an incomplete type can be modifiable.
[:zh_CN]
指向不完整类型的指针是可改变的。

[:en]
At some point in the program when the pointed to type is complete, the object at
which the pointer points can also be modified.
[:zh_CN]
当被指向的类型在程序的某些位置变完整时，该指针所指的对象也可被改变。

[para]
[:en]
The referent of a [`const]-qualified expression shall not be modified (through
that expression), except that if it is of class type and has a [`mutable]
component, that component can be modified ([#dcl.type.cv]).
[:zh_CN]
[`const]-限定的表达式的所指对象不应（通过该表达式）被改变，除非它为类类型且具有
[`mutable] 成分，则该成分可被改变（[#dcl.type.cv]）。

[para]
[:en]
If an expression can be used to modify the object to which it refers, the
expression is called [+modifiable].
[:zh_CN]
若某表达式可用于改变其所指代的对象，则称该表达式为[+可改变的]。

[:en]
A program that attempts to modify an object through a nonmodifiable lvalue or
rvalue expression is ill-formed.
[:zh_CN]
试图通过不可改变的左值或右值表达式改变对象的程序是非良构的。

[para]
[:en]
If a program attempts to access the stored value of an object through a glvalue
of other than one of the following types the behavior is undefined:
[:zh_CN]
若程序试图通过并非下列类型的泛左值来访问对象中保存的值，其行为是未定义的：

[footnote]
[:en]
The intent of this list is to specify those circumstances in which an object may
or may not be aliased.
[:zh_CN]
此列表的目的是用以指出可以或不可以使用对象别名的情况。
[footnote:end]

[list]
[item]
[:en]
the dynamic type of the object,
[:zh_CN]
该对象的动态类型，

[item]
[:en]
a cv-qualified version of the dynamic type of the object,
[:zh_CN]
该对象的动态类型的 cv-限定的版本，

[item]
[:en]
a type similar (as defined in [#conv.qual]) to the dynamic type of the object,
[:zh_CN]
与该对象的动态类型相似（定义于 [#conv.qual]）的类型，

[item]
[:en]
a type that is the signed or unsigned type corresponding to the dynamic type of
the object,
[:zh_CN]
该对象的动态类型所对应的有符号或无符号的类型，

[item]
[:en]
a type that is the signed or unsigned type corresponding to a cv-qualified
version of the dynamic type of the object,
[:zh_CN]
该对象的动态类型的某 cv-限定的版本所对应的有符号或无符号的类型，

[item]
[:en]
an aggregate or union type that includes one of the aforementioned types among
its elements or non-static data members (including, recursively, an element or
non-static data member of a subaggregate or contained union),
[:zh_CN]
聚合或联合类型，其中包括以上述类型之一为类型的元素或非静态数据成员（递归地包括子
聚合或所包含的联合中的元素或非静态成员），

[item]
[:en]
a type that is a (possibly cv-qualified) base class type of the dynamic type of
the object,
[:zh_CN]
该对象的动态类型的（可能 cv-限定的）基类类型，

[item]
[:en]
a [`char] or [`unsigned char] type.
[:zh_CN]
[`char] 或 [`unsigned char] 类型。
[list:end]
