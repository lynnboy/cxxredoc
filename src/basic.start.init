[section#basic.start.init
    [:en] Initialization of non-local variables
    [:zh_CN] 非局部变量的初始化
]

[para]
[:en]
[%initialization] [%initialization[!static and thread]]
There are two broad classes of named non-local variables: those with static
storage duration ([#basic.stc.static]) and those with thread storage duration
([#basic.stc.thread]).
[:zh_CN]
[%初始化] [%初始化[!静态和线程～]]
有两大类由名字的非局部变量：具有静态存储期的（[#basic.stc.static]），和具有线程
存储期的（[#basic.stc.thread]）。

[:en]
Non-local variables with static storage duration are initialized as a
consequence of program initiation.
[:zh_CN]
具有静态存储期的非局部变量的初始化，是程序启动的结果。

[:en]
Non-local variables with thread storage duration are initialized as a
consequence of thread execution.
[:zh_CN]
具有线程存储期的非局部变量的初始化，是线程执行的结果。

[:en]
Within each of these phases of initiation, initialization occurs as follows.
[:zh_CN]
这些启动阶段中，都将按照如下来进行初始化。

[para]
[:en]
[%initialization[![`static object]]]
[%initialization[!dynamic]] [%initialization[!run-time]]
[%start[!program]] [%initialization[!order of]]
Variables with static storage duration ([#basic.stc.static]) or thread storage
duration ([#basic.stc.thread]) shall be zero-initialized ([#dcl.init]) before
any other initialization takes place.
[:zh_CN]
[%初始化[![`static] 对象～]]
[%初始化[!动态～]] [%初始化[!运行时～]]
[%启动[!程序～]] [%初始化[!～的顺序]]
具有静态存储期（[#basic.stc.static]）或线程存储期（[#basic.stc.thread]）的变量，
应当在任何其他初始化发生之前进行零初始化（[#dcl.init]）。

[:en]
A [+constant initializer] for an object [`o] is an expression that is a constant
expression, except that it may also invoke [`constexpr] constructors for [`o]
and its subobjects even if those objects are of non-literal class types
[:zh_CN]
作为对象 [`o] 的[+常量初始化式]的表达式是常量表达式，但也可以为 [`o] 及其子对象
调用 [`constexpr] 构造函数，无论这些对象是否是非字面量类类型

[enter:note]
[:en]
such a class may have a non-trivial destructor
[:zh_CN]
这样的类可能带有非平凡的析构函数
[exit:note]

[:en@~]
.
[:zh_CN@~]
。

[:en]
[%initialization[!constant]]
[+Constant initialization] is performed:
[:zh_CN]
在下列情况下实施[+常量初始化]：

[list]
[item]
[:en]
if each full-expression (including implicit conversions) that appears in the
initializer of a reference with static or thread storage duration is a constant
expression ([#expr.const]) and the reference is bound to a glvalue designating
an object with static storage duration, to a temporary object (see
[#class.temporary]) or subobject thereof, or to a function;
[:zh_CN]
当某个具有静态或线程存储期的引用的初始化式中出现的每个全表达式（包括隐式转换）
都是常量表达式（[#expr.const]），并且该引用被绑定到代表具有静态存储期的泛左值，
绑定到临时对象（参见 [#class.temporary]）或其子对象，或者绑定到函数时；

[item]
[:en]
if an object with static or thread storage duration is initialized by a
constructor call, and if the initialization full-expression is a constant
initializer for the object;
[:zh_CN]
当对某个具有静态或线程存储期的对象通过构造函数的调用进行了初始化，并当初始化
全表达式是该对象的常量初始化式时；

[item]
[:en]
if an object with static or thread storage duration is not initialized by a
constructor call and if either the object is value-initialized or every
full-expression that appears in its initializer is a constant expression.
[:zh_CN]
当某个具有静态或线程存储期的对象不是通过构造函数的调用进行的初始化，并且要么该
对象被值初始化，要么其初始化式中出现的每个全表达式均为常量表达式时。
[list:end]

[:en]
Together, zero-initialization and constant initialization are called [def static
initialization]; all other initialization is [def dynamic initialization].
[:zh_CN]
零初始化和常量初始化统称为[def 静态初始化]；所有其他初始化都是[def 动态初始化]。

[:en]
Static initialization shall be performed before any dynamic initialization takes
place.
[:zh_CN]
静态初始化应当在任何动态初始化开始之前进行。

[:en]
Dynamic initialization of a non-local variable with static storage duration is 
[def unordered] if the variable is an implicitly or explicitly instantiated
specialization, and otherwise is [def ordered]
[:zh_CN]
具有静态存储期的非局部变量的动态初始化，当该变量是隐式或显式实例化的特例时，是
[def 无序的]，否则就是[def 有序的]

[enter:note]
[:en]
an explicitly specialized static data member or variable template specialization
has ordered initialization.
[:zh_CN]
显式特化了的静态数据成员或者变量模板特例进行有序初始化。
[exit:note]

[:en@~]
.
[:zh_CN@~]
。

[:en]
Variables with ordered initialization defined within a single translation unit
shall be initialized in the order of their definitions in the translation unit.
[:zh_CN]
定义于单个翻译单元中的有序初始化的变量，应当按照它们在该翻译单元中被定义的顺序
进行初始化。

[:en]
If a program starts a thread ([#thread.threads]), the subsequent initialization
of a variable is unsequenced with respect to the initialization of a variable
defined in a different translation unit.
[:zh_CN]
如果程序启动了一个线程（[#thread.threads]），那么其后对某个变量的初始化，与定义
于不同翻译单元中的变量的初始化之间就是无顺序的。

[:en]
Otherwise, the initialization of a variable is indeterminately sequenced with
respect to the initialization of a variable defined in a different translation
unit.
[:zh_CN]
否则，变量的初始化和定义于不同翻译单元中的变量的初始化之间就是的顺序不确定的。

[:en]
If a program starts a thread, the subsequent unordered initialization of a
variable is unsequenced with respect to every other dynamic initialization.
[:zh_CN]
如果程序启动了一个线程，那么其后的变量无序初始化，与任何其它动态初始化之间就是
无顺序的。

[:en]
Otherwise, the unordered initialization of a variable is indeterminately
sequenced with respect to every other dynamic initialization.
[:zh_CN]
否则，变量的无序初始化和任何其他动态初始化之间就是的顺序不确定的。

[enter:note]
[:en]
This definition permits initialization of a sequence of ordered variables
concurrently with another sequence.
[:zh_CN]
此条定义允许一个有序的变量序列与另一个序列的初始化之间并发地进行。
[exit:note]

[enter:note]
[:en]
The initialization of local static variables is described in [#stmt.dcl].
[:zh_CN]
局部静态变量的初始化在 [#stmt.dcl] 中说明。
[exit:note]

[para]
An implementation is permitted to perform the initialization of a non-local
variable with static storage duration as a static initialization even if such
initialization is not required to be done statically, provided that
[:zh_CN]
如下情况下，允许实现把具有静态存储期的非局部变量的初始化，当作静态初始化实施，
即使该初始化并不必静态进行：

[list]
[item]
[:en]
the dynamic version of the initialization does not change the value of any other
object of namespace scope prior to its initialization, and
[:zh_CN]
该初始化的动态版本不改变任何在其之前的其他命名空间作用域对象的值，并且

[item]
[:en]
the static version of the initialization produces the same value in the
initialized variable as would be produced by the dynamic initialization if all
variables not required to be initialized statically were initialized
dynamically.
[:zh_CN]
该初始化的静态版本在所初始化的变量中产生的值，与当不需静态地初始化的所有变量都
动态地进行初始化时，由动态初始化产生的值相同。
[list:end]

[enter:note]
[:en]
As a consequence, if the initialization of an object [`obj1] refers to an object
[`obj2] of namespace scope potentially requiring dynamic initialization and
defined later in the same translation unit, it is unspecified whether the value
of [`obj2] used will be the value of the fully initialized [`obj2] (because
[`obj2] was statically initialized) or will be the value of [`obj2] merely
zero-initialized.
[:zh_CN]
其结论是，若对象 [`obj1] 的初始化涉及到某个命名空间作用域对象 [`obj2]，它潜在地
需要动态初始化，且在相同翻译单元中的后面才被定义，则其所使用的 [`obj2] 的值是
[`obj2] 初始化完全进行后的值（由于 [`obj2] 被静态初始化），还是 [`obj2] 只不过被
零初始化后的值是未指明的。

[:en]
For example,
[:zh_CN]
例如，

[codeblock]
inline double fd() { return 1.0; }
extern double d1;
double d2 = d1;     // [:en] unspecified:
                    // [|:zh_CN] 未指明的：
                    // [:en@~] may be statically initialized to [`0.0] or
                    // [|:zh_CN@~] 当 [`d1] 被动态初始化时，
                    // [:en@~] dynamically initialized to [`0.0] if [`d1] is
                    // [|:zh_CN@~] 可能被静态初始化为 [`0.0]
                    // [:en@~] dynamically initialized, or [`1.0] otherwise
                    // [|:zh_CN@~] 否则被静态初始化为 [`1.0]
double d1 = fd();   // [:en] may be initialized statically or dynamically to [`1.0]
                    // [|:zh_CN] 可能被静态或动态初始化为 [`1.0]
[codeblock:end]
[exit:note]

[para]
[:en]
[%evaluation[!unspecified order of]]
It is [%@impldef dynamic initialization of static objects before [`main]]
implementation-defined whether the dynamic initialization of a non-local
variable with static storage duration is done before the first statement of
[`main].
[:zh_CN]
[%求值[!未指明的～顺序]]
具有静态存储期的非局部变量的动态初始化，是否在 [`main] 的第一个语句之前完成是
[%@impldef [`main] 之前进行静态对象的动态初始化]由实现定义的。

[:en]
If the initialization is deferred to some point in time after the first
statement of [`main], it shall occur before the first odr-use ([#basic.def.odr])
of any function or variable defined in the same translation unit as the variable
to be initialized.
[:zh_CN]
若该初始化被推迟到 [`main] 的第一个语句之后的时间点，则应当在与所初始化的变量的
同一个翻译单元中所定义的任何函数和变量被首次 ODR-式使用（[#basic.def.odr]）之前
进行。

[footnote]
[:en]
A non-local variable with static storage duration having initialization with
side-effects must be initialized even if it is not odr-used ([#basic.def.odr],
[#basic.stc.static]).
[:zh_CN]
具有静态存储期的具有带副作用的初始化的非局部变量，即使不被 ODR-式使用也必须进行
初始化（[#basic.def.odr]，[#basic.stc.static]）。
[footnote:end]

[enter:example] 

[codeblock]
// - File 1 -
#include "a.h"
#include "b.h"
B b;
A::A(){
  b.Use();
}

// - File 2 -
#include "a.h"
A a;

// - File 3 -
#include "a.h"
#include "b.h"
extern A a;
extern B b;

int main() {
  a.Use();
  b.Use();
}
[codeblock:end]

[:en]
It is implementation-defined whether either [`a] or [`b] is initialized before
[`main] is entered or whether the initializations are delayed until [`a] is
first odr-used in [`main].
[:zh_CN]
[`a] 或 [`b] 都在进入 [`main] 之前就进行初始化，还是把这些初始化推迟到 [`a] 在
[`main] 中的首次 ODR-式使用之前是由实现定义的。

[:en]
In particular, if [`a] is initialized before [`main] is entered, it is not
guaranteed that [`b] will be initialized before it is odr-used by the
initialization of [`a], that is, before [`A::A] is called.
[:zh_CN]
特别地，若 [`a] 在进入 [`main] 之前进行初始化，则不能保证在 [`a] 的初始化中对
[`b] 进行 ODR-式使用之前（也就是说，在 [`A::A] 被调用之前），已经进行了初始化。

[:en]
If, however, [`a] is initialized at some point after the first statement of
[`main], [`b] will be initialized prior to its use in [`A::A].
[:zh_CN]
然而，若 [`a] 在 [`main] 的第一个语句之后的某点进行初始化，则 [`b] 将会在
[`A::A] 中使用它之前进行初始化。
[exit:example]

[para]
[:en]
It is [%@impldef dynamic initialization of thread-local objects before entry]
implementation-defined whether the dynamic initialization of a non-local
variable with static or thread storage duration is done before the first
statement of the initial function of the thread.
[:zh_CN]
具有静态或线程存储期的非局部变量的动态初始化，是否在该线程的启动函数的第一个语句
之前完成是[%@impldef 入口之前进行线程局部对象的动态初始化]由实现定义的。

[:en]
If the initialization is deferred to some point in time after the first
statement of the initial function of the thread, it shall occur before the first
odr-use ([#basic.def.odr]) of any variable with thread storage duration defined
in the same translation unit as the variable to be initialized.
[:zh_CN]
若该初始化被推迟到该线程的启动函数的第一个语句之后的时间点，则它应当在与所初始化
的变量的同一个翻译单元中所定义的任何具有线程存储期的变量被首次 ODR-式使用
（[#basic.def.odr]）之前进行。

[para]
[:en]
If the initialization of a non-local variable with static or thread storage
duration exits via an exception, [`std::terminate] is called
([#except.terminate]).
[:zh_CN]
如果非局部的具有静态或线程存储期的变量的初始化由于抛出异常而终止，则将会调用
[`std::terminate]（参见 [#except.terminate]）。
