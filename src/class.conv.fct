[section#class.conv.fct
    [:en] Conversion functions
]

[:en]
[%function[!conversion]]
[%fundamental type conversion[see conversion[!user-defined]]]
[%conversion[!user-defined]]
[%conversion operator[see conversion[!user defined]]]

[para]
[:en]
A member function of a class [`X] having no parameters with a name of the form

[syntax]
[rule conversion-function-id [:zh_CN] ]
    [| [`operator] conversion-type-id ]
[rule:end]

[rule conversion-type-id [:zh_CN] ]
    [| type-specifier-seq [~:opt conversion-declarator] ]
[rule:end]

[rule conversion-declarator [:zh_CN] ]
    [| ptr-operator [~:opt conversion-declarator] ]
[rule:end]
[syntax:end]

[:en@~]
specifies a conversion from [`X] to the type specified by the
[~conversion-type-id].

[:en]
Such functions are called conversion functions.

[:en]
No return type can be specified.

[:en]
[%conversion[!type of]]
If a conversion function is a member function, the type of the conversion
function ([#dcl.fct]) is ["function taking no parameter returning
[~conversion-type-id]].

[:en]
A conversion function is never used to convert a (possibly cv-qualified) object
to the (possibly cv-qualified) same object type (or a reference to it),
to a (possibly cv-qualified) base class of that type (or a reference to it),
or to (possibly cv-qualified) void.

[footnote]
[:en]
These conversions are considered as standard conversions for the purposes of
overload resolution ([#over.best.ics], [#over.ics.ref]) and therefore
initialization ([#dcl.init]) and explicit casts ([#expr.static.cast]).

[:en]
A conversion to [`void] does not invoke any conversion function
([#expr.static.cast]).

[:en]
Even though never directly called to perform a conversion, such conversion
functions can be declared and can potentially be reached through a call to a
virtual conversion function in a base class.
[footnote:end]

[para:~]
[enter:example]
[codeblock]
struct X {
  operator int();
};

void f(X a) {
  int i = int(a);
  i = (int)a;
  i = a;
}
[codeblock:end]

[:en]
In all three cases the value assigned will be converted by [`X::operator int()].
[exit:example]

[para]
[:en]
A conversion function may be explicit ([#dcl.fct.spec]), in which case it is
only considered as a user-defined conversion for direct-initialization
([#dcl.init]).

[:en]
Otherwise, user-defined conversions are not restricted to use in assignments and
initializations.

[enter:example]
[codeblock]
class Y { };
struct Z {
  explicit operator Y() const;
};

void h(Z z) {
  Y y1(z);          // [:en] OK: direct-initialization
  Y y2 = z;         // [:en] ill-formed: copy-initialization
  Y y3 = (Y)z;      // [:en] OK: cast notation
}

void g(X a, X b) {
  int i = (a) ? 1+a : 0;
  int j = (a&&b) ? a+b : i;
  if (a) {
  }
}
[codeblock:end]
[exit:example]

[para]
[:en]
The [~conversion-type-id] shall not represent a function type nor an array type.

[:en]
The [~conversion-type-id] in a [~conversion-function-id] is the longest possible
sequence of [~conversion-declarator]s.

[enter:note]
[:en]
This prevents ambiguities between the declarator operator * and its expression
counterparts.
[enter:example]

[codeblock]
&ac.operator int*i; // [:en] syntax error:
                    // [:en@~] parsed as: [`&(ac.operator int *)i]
                    // [:en@~] not as: [`&(ac.operator int)*i]
[codeblock:end]

[:en]
The [`*] is the pointer declarator and not the multiplication operator.
[exit:example]
[exit:note]

[para]
[:en]
[%conversion[!inheritance of user-defined]]
Conversion functions are inherited.

[para]
[:en]
[%conversion[!virtual user-defined]]
Conversion functions can be virtual.

[para]
[:en]
[%conversion[!static user-defined]]
Conversion functions cannot be declared
[`static].

[para]
[:en]
[%conversion[!deduced return type of user-defined]]
A conversion function template shall not have a deduced return type
([#dcl.spec.auto]).
