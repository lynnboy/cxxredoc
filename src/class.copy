[section#class.copy
    [:en] Copying and moving class objects
    [:zh_CN] 类对象的复制与移动
]

[:en]
[%copy[!class object][see constructor[!copy][see assignment[!copy]]]]
[%move[!class object][see constructor[!move][see assignment[!move]]]]
[%constructor[!copy]]
[%constructor[!move]]
[%operator[!copy assignment][see assignment[!copy]]]
[%operator[!move assignment][see assignment[!move]]]
[:zh_CN]
[%复制[!类对象][see 构造函数[!复制～][see 赋值[!复制～]]]]
[%移动[!类对象][see 构造函数[!移动～][see 赋值[!移动～]]]]
[%构造函数[!复制～]]
[%构造函数[!移动～]]
[%运算符[!复制赋值～][see 赋值[!复制～]]]
[%运算符[!移动赋值～][see 赋值[!移动～]]]

[para]
[:en]
A class object can be copied or moved in two ways: by initialization
([#class.ctor], [#dcl.init]), including for function argument passing
([#expr.call]) and for function value return ([#stmt.return]); and by assignment
([#expr.ass]).
[:zh_CN]
类对象可用两种方式进行复制或移动：通过初始化（[#class.ctor]，[#dcl.init]），包括
传递函数实参（[#expr.call]）和函数返回值（[#stmt.return]）中的初始化，以及通过
赋值（[#expr.ass]）。

[:en]
Conceptually, these two operations are implemented by a copy/move constructor
([#class.ctor]) and copy/move assignment operator ([#over.ass]).
[:zh_CN]
概念上说，这两种操作是通过复制/移动构造函数（[#class.ctor]）和复制/移动赋值
运算符（[#over.ass]）来实现的。

[para]
[%:begin#constructor.copy
    [:en] constructor[!copy]
    [:zh_CN] 构造函数[!复制～]
]
[%:begin#constructor.move
    [:en] constructor[!move]
    [:zh_CN] 构造函数[!移动～]
]
[:en]
A non-template constructor for class [`X] is a copy constructor if its first
parameter is of type [`X&], [`const X&], [`volatile X&] or [`const volatile X&],
and either there are no other parameters or else all other parameters have
default arguments ([#dcl.fct.default]).
[:zh_CN]
如果类 [`X] 的某个非模板构造函数的第一个形参类型为 [`X&]，[`const X&]，
[`volatile X&] 或 [`const volatile X&]，且要么它没有其他形参要么所有其他形参都
带有默认实参（[#dcl.fct.default]），则它是复制构造函数。

[enter:example]
[:en]
[`X::X(const X&)] and [`X::X(X&,int=1)] are copy constructors.
[:zh_CN]
[`X::X(const X&)] 和 [`X::X(X&,int=1)] 都是复制构造函数。

[codeblock]
struct X {
  X(int);
  X(const X&, int = 1);
};
X a(1);             // [:en] calls [`X(int);]
                    // [|:zh_CN] 调用了 [`X(int);]
X b(a, 0);          // [:en] calls [`X(const X&, int);]
                    // [|:zh_CN] 调用了 [`X(const X&, int);]
X c = b;            // [:en] calls [`X(const X&, int);]
                    // [|:zh_CN] 调用了 [`X(const X&, int);]
[codeblock:end]
[exit:example]

[para]
[:en]
A non-template constructor for class [`X] is a move constructor if its first
parameter is of type [`X&&], [`const X&&], [`volatile X&&], or [`const volatile
X&&], and either there are no other parameters or else all other parameters have
default  arguments ([#dcl.fct.default]).
[:zh_CN]
如果类 [`X] 的某个非模板构造函数的第一个形参类型为 [`X&&]，[`const X&&]，
[`volatile X&&] 或 [`const volatile X&&]，且要么它没有其他形参要么所有其他形参都
带有默认实参（[#dcl.fct.default]），则它是移动构造函数。

[enter:example]
[:en]
[`Y::Y(Y&&)] is a move constructor.
[:zh_CN]
[`Y::Y(Y&&)] 是移动构造函数。

[codeblock]
struct Y {
  Y(const Y&);
  Y(Y&&);
};
extern Y f(int);
Y d(f(1));          // [:en] calls [`Y(Y&&)]
                    // [|:zh_CN] 调用了 [`Y(Y&&)]
Y e = d;            // [:en] calls [`Y(const Y&)]
                    // [|:zh_CN] 调用了 [`Y(const Y&)]
[codeblock:end]
[exit:example]

[para]
[enter:note]
[:en]
All forms of copy/move constructor may be declared for a class.
[:zh_CN]
可以为一个类声明全部形式的复制/移动构造函数。

[enter:example]
[codeblock]
struct X {
  X(const X&);
  X(X&);            // OK
  X(X&&);
  X(const X&&);     // [:en] OK, but possibly not sensible
                    // [|:zh_CN] OK，但可能无法被觉察到
};
[codeblock:end]
[exit:example]
[exit:note]

[para]
[enter:note]
[:en]
If a class [`X] only has a copy constructor with a parameter of type [`X&],
an initializer of type [`const X] or [`volatile X] cannot initialize an object
of type (possibly cv-qualified) [`X].
[:zh_CN]
若类 [`X] 仅具有带有类型 [`X&] 的形参的复制构造函数，则类型为 [`const X] 或
[`volatile X] 的初始化式不能用于初始化（可能被 cv-限定的）类型 [`X] 的对象。

[enter:example]
[codeblock]
struct X {
  X();              // [:en] default constructor
                    // [|:zh_CN] 默认构造函数
  X(X&);            // [:en] copy constructor with a nonconst parameter
                    // [|:zh_CN] 带有非 const 形参的复制构造函数
};
const X cx;
X x = cx;           // [:en] error: [`X::X(X&)] cannot copy [`cx] into [`x]
                    // [|:zh_CN] 错误：[`X::X(X&)] 不能把 [`cx] 复制给 [`x]
[codeblock:end]
[exit:example]
[exit:note]

[para]
[:en]
A declaration of a constructor for a class [`X] is ill-formed if its first
parameter is of type (optionally cv-qualified) [`X] and either there are no
other parameters or else all other parameters have default arguments.
[:zh_CN]
若类 [`X] 的某个构造函数的第一个形参类型为（可选地被 cv-限定的）[`X]，且要么没有
其他形参要么所有其他形参均带有默认实参，则其声明式是非良构的。

[:en]
A member function template is never instantiated to produce such a constructor
signature.
[:zh_CN]
永远不会实例化成员函数模板来产生这种构造函数签名。

[enter:example]
[codeblock]
struct S {
  template<typename T> S(T);
  S();
};

S g;

void h() {
  S a(g);           // [:en] does not instantiate the member template to produce [`S::S<S>(S)];
                    // [|:zh_CN] 并不实例化成员模板以产生 [`S::S<S>(S)]；
                    // [:en@~] uses the implicitly declared copy constructor
                    // [|:zh_CN@~] 使用隐式声明的复制构造函数
}
[codeblock:end]
[exit:example]

[para]
[:en]
[%constructor[!copy[!implicitly declared]]]
If the class definition does not explicitly declare a copy constructor, one is
declared [+implicitly].
[:zh_CN]
[%构造函数[!复制～[!隐式声明的～]]]
若类定义式中并未明确声明复制构造函数，则将[+隐式]声明一个。

[:en]
If the class definition declares a move constructor or move assignment operator,
the implicitly declared copy constructor is defined as deleted; otherwise, it is
defined as defaulted ([#dcl.fct.def]).
[:zh_CN]
若类定义式中声明了一个移动构造函数或移动赋值运算符，则隐式声明的复制构造函数被
定义为弃置的；否则它被定义为预置的（[#dcl.fct.def]）。

[:en]
The latter case is deprecated if the class has a user-declared copy assignment
operator or a user-declared destructor.
[:zh_CN]
当类带有用户声明的复制赋值运算符或用户声明的析构函数时，后一种情况是被摒弃的。

[para]
[:en]
The implicitly-declared copy constructor for a class [`X] will have the form
[:zh_CN]
为类 [`X] 所隐式声明的复制构造函数的形式为

[codeblock:notation]
X::X(const X&)
[codeblock:end]

[:en@~]
if each potentially constructed subobject of a class type [`M] (or array
thereof) has a copy constructor whose first parameter is of type [`const M&] or
[`const volatile M&].
[:zh_CN@~]
其条件为类类型 [`M]（或其数组）的每个潜在构造的子对象均带有以类型 [`const M&] 或
[`const volatile M&] 为第一个形参的复制构造函数。

[footnote]
[:en]
This implies that the reference parameter of the implicitly-declared copy
constructor cannot bind to a [`volatile] lvalue; see [#diff.special].
[:zh_CN]
这意味着隐式声明的复制构造函数的引用形参不能绑定到 [`volatile] 左值；参见
[#diff.special]。
[footnote:end]

[:en]
Otherwise, the implicitly-declared copy constructor will have the form
[:zh_CN]
否则，隐式声明的复制构造函数的形式为

[codeblock:notation]
X::X(X&)
[codeblock:end]

[para]
[:en]
[%constructor[!move[!implicitly declared]]]
If the definition of a class [`X] does not explicitly declare a move
constructor, one will be implicitly declared as defaulted if and only if
[:zh_CN]
[%构造函数[!移动～[!隐式声明的～]]]
若类定义式中并未明确声明移动构造函数，则当且仅当满足如下条件时将[+隐式]声明一个
预置的移动构造函数：

[list]
[item]
[:en@~] [`X] does not have a user-declared copy constructor,
[:zh_CN@~] [`X] 不带有用户声明的复制构造函数，

[item]
[:en@~] [`X] does not have a user-declared copy assignment operator,
[:zh_CN@~] [`X] 不带有用户声明的复制赋值运算符，

[item]
[:en@~] [`X] does not have a user-declared move assignment operator, and
[:zh_CN@~] [`X] 不带有用户声明的移动赋值运算符，并且

[item]
[:en@~] [`X] does not have a user-declared destructor.
[:zh_CN@~] [`X] 不带有用户声明的析构函数。
[list:end]

[enter:note]
[:en]
When the move constructor is not implicitly declared or explicitly supplied,
expressions that otherwise would have invoked the move constructor may instead
invoke a copy constructor.
[:zh_CN]
如果并未隐式声明或者显式提供移动构造函数，则本应调用移动构造函数的表达式将改为
调用复制构造函数。
[exit:note]

[para]
[:en]
The implicitly-declared move constructor for class [`X] will have the form
[:zh_CN]
为类 [`X] 隐式声明的移动构造函数的形式为

[codeblock:notation]
X::X(X&&)
[codeblock:end]

[para]
[:en]
An implicitly-declared copy/move constructor is an [`inline public] member of
its class.
[:zh_CN]
隐式声明的复制/移动构造函数是其类的 [`inline public] 成员。

[:en]
A defaulted copy/move constructor for a class [`X] is defined as deleted
([#dcl.fct.def.delete]) if [`X] has:
当类 [`X] 具有以下各项时，[`X] 的预置的复制/移动构造函数被定义为弃置的
（[#dcl.fct.def.delete]）：
[:zh_CN]

[list]
[item]
[:en@~] a variant member with a non-trivial corresponding constructor and [`X]
is a union-like class,
[:zh_CN@~] 带有非平凡的对应构造函数的可变成员，且 [`X] 是类似联合的类，

[item]
[:en@~] a potentially constructed subobject type [`M] (or array thereof) that
cannot be copied/moved because overload resolution ([#over.match]), as applied
to [`M][=']s corresponding constructor, results in an ambiguity or a function
that is deleted or inaccessible from the defaulted constructor,
[:zh_CN@~] 类型 [`M]（或其数组）的潜在构造的子对象，由于对 [`M] 的对应构造函数
进行重载决议（[#over.match]）的结果有歧义，或者是被弃置的或在这个预置构造函数中
无法访问的函数，而无法被复制或移动，

[item]
[:en@~] any potentially constructed subobject of a type with a destructor that
is deleted or inaccessible from the defaulted constructor, or,
[:zh_CN@~] 任何其类型带有被弃置或在这个预置的构造函数中无法访问的析构函数的潜在
构造的子对象，或者

[item]
[:en@~] for the copy constructor, a non-static data member of rvalue reference
type.
[:zh_CN@~] （对于复制构造函数）右值引用类型的非静态数据成员。
[list:end]

[:en]
A defaulted move constructor that is defined as deleted is ignored by overload
resolution ([#over.match], [#over.over]).
[:zh_CN]
被定义为弃置的预置移动构造函数，在重载决议中被忽略（[#over.match]，
[#over.over]）。

[enter:note]
[:en]
A deleted move constructor would otherwise interfere with initialization from
an rvalue which can use the copy constructor instead.
[:zh_CN]
否则弃置的移动构造函数将干扰以右值进行的初始化，而其本可以换用复制构造函数。
[exit:note]

[para]
[:en]
[%constructor[!copy[!trivial]]]
[%constructor[!move[!trivial]]]
A copy/move constructor for class [`X] is trivial if it is not user-provided,
its parameter-type-list is equivalent to the parameter-type-list of an implicit
declaration, and if
[:zh_CN]
[%构造函数[!复制～[!平凡的～]]]
[%构造函数[!移动～[!平凡的～]]]
当类 [`X] 的复制/移动构造函数不是用户提供的，其形参类型列表于隐式声明式的形参
类型列表等价，并且满足如下条件时，它是平凡的：

[list]
[item]
[:en@~] class [`X] has no virtual functions ([#class.virtual]) and no virtual
base classes ([#class.mi]), and
[:zh_CN@~] 类 [`X] 没有虚函数（[#class.virtual]）也没有虚基类（[#class.mi]），
并且

[item]
[:en@~] class [`X] has no non-static data members of volatile-qualified type,
and
[:zh_CN@~] 类 [`X] 没有 volatile-限定类型的非静态数据成员，并且

[item]
[:en@~] the constructor selected to copy/move each direct base class subobject
is trivial, and
[:zh_CN@~] 所选择用于复制/移动每个直接基类子对象的构造函数是平凡的，并且

[item]
[:en@~] for each non-static data member of [`X] that is of class type (or array
thereof), the constructor selected to copy/move that member is trivial;
[:zh_CN@~] 对于 [`X] 的每个类类型（或其数组）的非静态数据成员，所选择用于复制/
移动该成员的构造函数是平凡的；
[list:end]

[:en@~]
otherwise the copy/move constructor is [+non-trivial].
[:zh_CN]
否则该复制/移动构造函数是[+非平凡的]。

[para]
[:en]
[%constructor[!copy[!implicitly defined]]]
[%constructor[!move[!implicitly defined]]]
A copy/move constructor that is defaulted and not defined as deleted is
[+implicitly defined] if it is odr-used ([#basic.def.odr]) or when it is
explicitly defaulted after its first declaration.
[:zh_CN]
[%构造函数[!复制～[!隐式定义的～]]]
[%构造函数[!移动～[!隐式定义的～]]]
当预置的且并未被定义为弃置的复制/移动构造函数被 ODR-式使用（[#basic.def.odr]），
或者当在其首个声明式之后被显式预置时，它将被[+隐式定义]。

[enter:note]
[:en]
The copy/move constructor is implicitly defined even if the implementation
elided its odr-use ([#basic.def.odr], [#class.temporary]).
[:zh_CN]
即使实现将其 ODR-式使用消除掉（[#basic.def.odr]，[#class.temporary]）也要对该
复制/移动构造函数进行隐式定义。
[exit:note]

[:en]
If the implicitly-defined constructor would satisfy the requirements of a
[`constexpr] constructor ([#dcl.constexpr]), the implicitly-defined constructor
is [`constexpr].
[:zh_CN]
若隐式定义的构造函数能够符合对 [`constexpr] 构造函数（[#dcl.constexpr]）的规定，
则隐式定义的构造函数是 [`constexpr] 的。

[para]
[:en]
Before the defaulted copy/move constructor for a class is implicitly defined,
all non-user-provided copy/move constructors for its potentially constructed
subobjects shall have been implicitly defined.
[:zh_CN]
在对某个类的预置复制/移动构造函数进行隐式定义之前，它的所有潜在构造子对象的非
用户提供的复制/移动构造函数都应当是已经被隐式定义的。

[enter:note]
[:en]
An implicitly-declared copy/move constructor has an implied exception
specification ([#except.spec]).
[:zh_CN]
隐式声明的复制/移动构造函数带有隐含的异常说明（[#except.spec]）。
[exit:note]

[para]
[:en]
The implicitly-defined copy/move constructor for a non-union class [`X] performs
a memberwise copy/move of its bases and members.
[:zh_CN]
非联合类 [`X] 隐式定义的复制/移动构造函数实施其基类和成员的逐成员复制/移动。

[enter:note]
[:en]
[~brace-or-equal-initializer]s of non-static data members are ignored.
[:zh_CN]
忽略非静态数据成员的[~花括号或等号初始化式]。

[:en]
See also the example in [#class.base.init].
[:zh_CN]
另见 [#class.base.init] 中的示例。
[exit:note]

[:en]
The order of initialization is the same as the order of initialization of bases
and members in a user-defined constructor (see [#class.base.init]).
[:zh_CN]
初始化的顺序与在用户定义的构造函数中为基类和成员进行的初始化的顺序相同（参见
[#class.base.init]）。

[:en]
Let [`x] be either the parameter of the constructor or, for the move
constructor, an xvalue referring to the parameter.
[:zh_CN]
令 [`x] 为构造函数的形参，或对于移动构造函数为一个指代其形参的临限值。

[:en]
Each base or non-static data member is copied/moved in the manner appropriate to
its type:
[:zh_CN]
每个基类对象或非静态数据成员按照与其类型相适应的方式进行复制/移动：

[list]
[item]
[:en@~] if the member is an array, each element is direct-initialized with the
corresponding subobject of [`x];
[:zh_CN@~] 若该成员是数组，则其每个元素以 [`x] 的对应子对象进行直接初始化；

[item]
[:en@~] if a member [`m] has rvalue reference type [`T&&], it is
direct-initialized with [`static_cast<T&&>(x.m)];
[:zh_CN@~] 若成员 [`m] 具有右值引用类型 [`T&&]，则它以 [`static_cast<T&&>(x.m)]
进行直接初始化；

[item]
[:en@~] otherwise, the base or member is direct-initialized with the
corresponding base or member of [`x].
[:zh_CN@~] 否则，基类或成员就以 [`x] 的对应基类或成员进行直接初始化。
[list:end]

[:en]
[%initialization[!virtual base class]]
Virtual base class subobjects shall be initialized only once by the
implicitly-defined copy/move constructor (see [#class.base.init]).
[:zh_CN]
[%初始化[!虚基类]]
虚基类子对象应当只被隐式定义的复制/移动构造函数初始化一次（参见
[#class.base.init]）。

[para]
[:en]
The implicitly-defined copy/move constructor for a union [`X] copies the object
representation ([#basic.types]) of [`X].
[:zh_CN]
联合 [`X] 隐式定义的复制/移动构造函数对 [`X] 的对象表示（[#basic.types]）进行
复制。

[%:end#constructor.move]
[%:end#constructor.copy]

[%:begin#assignment.operator.copy
    [:en] assignment operator[!copy]
    [:zh_CN] 赋值运算符[!复制～]
]
[%:begin#assignment.operator.move
    [:en] assignment operator[!move]
    [:zh_CN] 赋值运算符[!移动～]
]
[para]
[:en]
A user-declared [+copy] assignment operator [`X::operator=] is a non-static
non-template member function of class [`X] with exactly one parameter of type
[`X], [`X&], [`const X&], [`volatile X&] or [`const volatile X&].
[:zh_CN]
用户声明的[+复制]赋值运算符 [`X::operator=] 是类 [`X] 中的恰好带有一个类型为
[`X]，[`X&]，[`const X&]，[`volatile X&] 或 [`const volatile X&] 的形参的非静态
非模板成员函数。

[footnote]
[:en]
Because a template assignment operator or an assignment operator taking an
rvalue reference parameter is never a copy assignment operator, the presence of
such an assignment operator does not suppress the implicit declaration of a copy
assignment operator.
[:zh_CN]
因为模板赋值运算符或者带有右值引用形参的赋值运算符从来不是复制赋值运算符，出现
这种赋值运算符并不会抑制复制赋值运算符的隐式声明。

[:en]
Such assignment operators participate in overload resolution with other
assignment operators, including copy assignment operators, and, if selected,
will be used to assign an object.
[:zh_CN]
这种赋值运算符参与其他赋值运算符（包括复制赋值运算符）的重载决议，并且如果它被
选择，就将被用于对对象赋值。
[footnote:end]

[enter:note]
[:en]
An overloaded assignment operator must be declared to have only one parameter;
see [#over.ass].
[:zh_CN]
重载的赋值运算符必须被声明为仅有一个形参；参见 [#over.ass]。
[exit:note]

[enter:note]
[:en]
More than one form of copy assignment operator may be declared for a class.
[:zh_CN]
可以为类声明多种形式的复制赋值运算符。
[exit:note]

[enter:note]
[:en]
If a class [`X] only has a copy assignment operator with a parameter of type
[`X&], an expression of type const [`X] cannot be assigned to an object of type
[`X].
[:zh_CN]
若类 [`X] 仅有形参类型为 [`X&] 的复制赋值运算符，则类型为 [`const X</code] 的
表达式不能被赋值给类型 [`X] 的对象。

[enter:example]
[codeblock]
struct X {
  X();
  X& operator=(X&);
};
const X cx;
X x;
void f() {
  x = cx;           // [:en] error: [`X::operator=(X&)] cannot assign [`cx] into [`x]
                    // [|:zh_CN] 错误：[`X::operator=(X&)] 不能把 [`cx] 赋值给 [`x]
}
[codeblock:end]
[exit:example]
[exit:note]

[para]
[:en]
[%assignment operator[!copy[!implicitly declared]]]
If the class definition does not explicitly declare a copy assignment operator,
one is declared [+implicitly].
[:zh_CN]
[%赋值运算符[!复制～[!隐式声明的]]]
若类定义式中并未明确声明复制赋值运算符，则将[+隐式]声明一个。

[:en]
If the class definition declares a move constructor or move assignment operator,
the implicitly declared copy assignment operator is defined as deleted;
otherwise, it is defined as defaulted ([#dcl.fct.def]).
[:zh_CN]
若类定义式中声明了一个移动构造函数或移动赋值运算符，则隐式声明的复制赋值运算符被
定义为弃置的；否则它被定义为预置的（[#dcl.fct.def]）。

[:en]
The latter case is deprecated if the class has a user-declared copy constructor
or a user-declared destructor.
[:zh_CN]
当类带有用户声明的复制构造函数或用户声明的析构函数时，后一种情况是被摒弃的。

[:en]
The implicitly-declared copy assignment operator for a class [`X] will have the
form
[:zh_CN]
为类 [`X] 所隐式声明的复制赋值运算符的形式为

[codeblock:notation]
X& X::operator=(const X&)
[codeblock:end]

[:en@~]
if
[:zh_CN@~]
其条件为

[list]
[item]
[:en] each direct base class [`B] of [`X] has a copy assignment operator whose
parameter is of type [`const B&], [`const volatile B&] or [`B], and
[:zh_CN] [`X] 的每个直接基类 [`B] 均带有形参类型为 [`const B&]，[`const volatile
B&] 或 [`B] 的复制赋值运算符，并且

[item]
[:en] for all the non-static data members of [`X] that are of a class type [`M]
(or array thereof), each such class type has a copy assignment operator whose
parameter is of type [`const M&], [`const volatile M&] or [`M].
[:zh_CN] 对于 [`X] 的所有类类型 [`M]（或其数组）的非静态数据成员，每个这样的类
类型均带有形参类型为 [`const M&]，[`const volatile M&] 或 [`M] 的复制赋值运算符
。

[footnote]
[:en]
This implies that the reference parameter of the implicitly-declared copy
assignment operator cannot bind to a [`volatile] lvalue; see [#diff.special].
[:zh_CN]
这意味着隐式声明的复制赋值运算符的引用形参不能绑定到 [`volatile] 左值；参见
[#diff.special]。
[footnote:end]
[list:end]

[:en]
Otherwise, the implicitly-declared copy assignment operator will have the form
[:zh_CN]
否则，隐式声明的复制赋值运算符的形式为

[codeblock:notation]
X& X::operator=(X&)
[codeblock:end]

[para]
[:en]
A user-declared move assignment operator [`X::operator=] is a non-static
non-template member function of class [`X] with exactly one parameter of type
[`X&&], [`const X&&], [`volatile X&&], or [`const volatile X&&].
[:zh_CN]
用户声明的移动赋值运算符 [`X::operator=] 是类 [`X] 的恰好带有一个类型为 [`X&&]，
[`const X&&]，[`volatile X&&] 或 [`const volatile X&&] 的形参的非静态非模板成员
函数。

[enter:note]
[:en]
An overloaded assignment operator must be declared to have only one parameter;
see [#over.ass].
[:zh_CN]
重载的赋值运算符必须被声明为仅有一个形参；参见 [#over.ass]。
[exit:note]

[enter:note]
[:en]
More than one form of move assignment operator may be declared for a class.
[:zh_CN]
可以为类声明多种形式的移动赋值运算符。
[exit:note]

[para]
[:en]
[%assignment operator[!move[!implicitly declared]]]
If the definition of a class [`X] does not explicitly declare a move assignment
operator, one will be implicitly declared as defaulted if and only if
[:zh_CN]
[%赋值运算符[!移动～[!隐式声明的]]]
若类定义式中并未明确声明移动赋值运算符，则当且仅当满足如下条件时将[+隐式]声明
一个预置的移动赋值运算符。

[list]
[item]
[:en@~] [`X] does not have a user-declared copy constructor,
[:zh_CN@~] [`X] 不带有用户声明的复制构造函数，

[item]
[:en@~] [`X] does not have a user-declared move constructor,
[:zh_CN@~] [`X] 不带有用户声明的移动构造函数，

[item]
[:en@~] [`X] does not have a user-declared copy assignment operator, and
[:zh_CN@~] [`X] 不带有用户声明的复制赋值运算符，并且

[item]
[:en@~] [`X] does not have a user-declared destructor.
[:zh_CN@~] [`X] 不带有用户声明的析构函数。
[list:end]

[enter:example]
[:en]
The class definition
[:zh_CN]
类定义式

[codeblock]
struct S {
  int a;
  S& operator=(const S&) = default;
};
[codeblock:end]

[:en@~]
will not have a default move assignment operator implicitly declared because the
copy assignment operator has been user-declared.
[:zh_CN@~]
不会有隐式声明的预置移动赋值运算符，这是因为复制赋值运算符已经由用户声明。

[:en]
The move assignment operator may be explicitly defaulted.
[:zh_CN]
可以显式预置移动赋值运算符。

[codeblock]
struct S {
  int a;
  S& operator=(const S&) = default;
  S& operator=(S&&) = default;
};
[codeblock:end]
[exit:example]

[para]
[:en]
The implicitly-declared move assignment operator for a class [`X] will have the
form
[:zh_CN]
为类 [`X] 隐式声明的移动赋值运算符的形式为

[codeblock:notation]
X& X::operator=(X&&);
[codeblock:end]

[para]
[:en]
The implicitly-declared copy/move assignment operator for class [`X] has the
return type [`X&]; it returns the object for which the assignment operator is
invoked, that is, the object assigned to.
[:zh_CN]
为类 [`X] 隐式声明的复制/移动赋值运算符的返回类型为 [`X&]；它返回调用了该赋值
运算符的对象，也就是被赋值的对象。

[:en]
An implicitly-declared copy/move assignment operator is an [`inline public]
member of its class.
[:zh_CN]
隐式声明的复制/移动赋值运算符是其类的 [`inline public] 成员。

[para]
[:en]
A defaulted copy/move assignment operator for class [`X] is defined as deleted
if [`X] has:
[:zh_CN]
当类 [`X] 具有以下各项时，[`X] 的预置的复制/移动赋值运算符被定义为弃置的：

[list]
[item]
[:en@~] a variant member with a non-trivial corresponding assignment operator
and [`X] is a union-like class, or
[:zh_CN@~] 带有非平凡的对应赋值运算符的可变成员，且 [`X] 是类似联合的类，或者

[item]
[:en@~] a non-static data member of [`const] non-class type (or array thereof),
or
[:zh_CN@~] [`const] 非类类型（或其数组）的非静态数据成员，或者

[item]
[:en@~] a non-static data member of reference type, or
[:zh_CN@~] 引用类型的非静态数据成员，或者

[item]
[:en@~] a potentially constructed subobject of class type [`M] (or array
thereof) that cannot be copied/moved because overload resolution
([#over.match]), as applied to [`M][=']s corresponding assignment operator,
results in an ambiguity or a function that is deleted or inaccessible from the
defaulted assignment operator.
[:zh_CN] 类型 [`M]（或其数组）的潜在构造的子对象，由于对 [`M] 的对应赋值运算符
进行重载决议（[#over.match]）的结果有歧义，或者是被弃置的或在这个预置赋值运算符
中无法访问的函数，而无法被复制或移动。
[list:end]

[:en]
A defaulted move assignment operator that is defined as deleted is ignored by
overload resolution ([#over.match], [#over.over]).
[:zh_CN]
被定义为弃置的预置移动赋值运算符，在重载决议中被忽略（[#over.match]，
[#over.over]）。

[para]
[:en]
[%assignment operator[!copy[!hidden]]]
[%assignment operator[!move[!hidden]]]
Because a copy/move assignment operator is implicitly declared for a class if
not declared by the user, a base class copy/move assignment operator is always
hidden by the corresponding assignment operator of a derived class
([#over.ass]).
[:zh_CN]
[%赋值运算符[!复制～[!隐藏]]]
[%赋值运算符[!移动～[!隐藏]]]
由于如果用户不为类声明复制/移动赋值运算符那么就会隐式声明一个，基类的复制/移动
赋值运算符总是被派生类的对应赋值运算符所隐藏（[#over.ass]）。

[:en]
A [~using-declaration] ([#namespace.udecl]) that brings in from a base class an
assignment operator with a parameter type that could be that of a copy/move
assignment operator for the derived class is not considered an explicit
declaration of such an operator and does not suppress the implicit declaration
of the derived class operator; the operator introduced by the
[~using-declaration] is hidden by the implicitly-declared operator in the
derived class.
[:zh_CN]
若一个 [~using-声明式]（[#namespace.udecl]）从基类引入赋值运算符，且其形参类型是
派生类的复制/移动赋值运算符的形参类型，则它并不被当作对这种运算符的显式声明式，
并且并不会抑制派生类的运算符的隐式声明式；由该 [~using-声明式]所引入的运算符被
派生类中隐式声明的运算符所隐藏。

[para]
[:en]
[%assignment operator[!copy[!trivial]]]
[%assignment operator[!move[!trivial]]]
A copy/move assignment operator for class [`X] is trivial if it is not
user-provided, its parameter-type-list is equivalent to the parameter-type-list
of an implicit declaration, and if
[:zh_CN]
[%赋值运算符[!复制～[!平凡的～]]]
[%赋值运算符[!移动～[!平凡的～]]]
当类 [`X] 的复制/移动赋值运算符不是用户提供的，其形参类型列表于隐式声明式的形参
类型列表等价，并且满足如下条件时，它是平凡的：

[list]
[item]
[:en@~] class [`X] has no virtual functions ([#class.virtual]) and no virtual
base classes ([#class.mi]), and
[:zh_CN@~] 类 [`X] 没有虚函数（[#class.virtual]）也没有虚基类（[#class.mi]），
并且

[item]
[:en@~] class [`X] has no non-static data members of volatile-qualified type,
and
[:zh_CN@~] 类 [`X] 没有 volatile-限定类型的非静态数据成员，并且

[item]
[:en@~] the assignment operator selected to copy/move each direct base class
subobject is trivial, and
[:zh_CN@~] 所选择用于复制/移动每个直接基类子对象的赋值运算符是平凡的，并且

[item]
[:en@~] for each non-static data member of [`X] that is of class type (or array
thereof), the assignment operator selected to copy/move that member is trivial;
[:zh_CN@~] 对于 [`X] 的每个类类型（或其数组）的非静态数据成员，所选择用于复制/
移动该成员的赋值运算符是平凡的；
[list:end]

[:en@~]
otherwise the copy/move assignment operator is [+non-trivial].
[:zh_CN@~] 
否则该复制/移动赋值运算符是[+非平凡的]。

[para]
[:en]
[%assignment operator[!copy[!implicitly defined]]]
[%assignment operator[!move[!implicitly defined]]]
A copy/move assignment operator for a class [`X] that is defaulted and not
defined as deleted is [+implicitly defined] when it is odr-used
([#basic.def.odr]) (e.g., when it is selected by overload resolution to assign
to an object of its class type) or when it is explicitly defaulted after its
first declaration.
[:zh_CN]
[%赋值运算符[!复制～[!隐式定义的～]]]
[%赋值运算符[!移动～[!隐式定义的～]]]
当预置的且并未被定义为弃置的复制/移动赋值运算符被 ODR-式使用（[#basic.def.odr]）
（比如当它被重载决议选择用以对其类类型的对象进行赋值），或者当在其首个声明式之后
被显式预置时，它将被[+隐式定义]。

[:en]
The implicitly-defined copy/move assignment operator is [`constexpr] if
[:zh_CN]
符合以下条件时，隐式定义的复制/移动赋值运算符是 [`constexpr] 的：

[list]
[item]
[:en@~] [`X] is a literal type, and
[:zh_CN@~] [`X] 是字面量类型，并且

[item]
[:en@~] the assignment operator selected to copy/move each direct base class
subobject is a [`constexpr] function, and
[:zh_CN@~] 所选择用于复制/移动每个基类子对象的赋值运算符是 [`constexpr] 函数，
并且

[item]
[:en@~] for each non-static data member of [`X] that is of class type (or array
thereof), the assignment operator selected to copy/move that member is a
[`constexpr] function.
[:zh_CN@~] 对于 [`X] 的每个类类型（或其数组）的非静态数据成员，所选择用于复制/
移动该成员的赋值运算符是 [`constexpr] 的。
[list:end]

[para]
[:en]
Before the defaulted copy/move assignment operator for a class is implicitly
defined, all non-user-provided copy/move assignment operators for its direct
base classes and its non-static data members shall have been implicitly defined.
[:zh_CN]
在对某个类的预置复制/移动赋值运算符进行隐式定义之前，它的所有直接基类和非静态
数据成员的非用户提供的复制/移动赋值运算符都应当是已经被隐式定义的。

[enter:note]
[:en]
An implicitly-declared copy/move assignment operator has an implied exception
specification ([#except.spec]).
[:zh_CN]
隐式声明的复制/移动赋值运算符带有隐含的异常说明（[#except.spec]）。
[exit:note]

[para]
[:en]
The implicitly-defined copy/move assignment operator for a non-union class [`X]
performs memberwise copy/move assignment of its subobjects.
[:zh_CN]
非联合类 [`X] 隐式定义的复制/移动赋值运算符实施其子对象的逐成员复制/移动。

[:en]
The direct base classes of [`X] are assigned first, in the order of their
declaration in the [~base-specifier-list], and then the immediate non-static
data members of [`X] are assigned, in the order in which they were declared in
the class definition.
[:zh_CN]
[`X] 的直接基类首先按照它们在[~基说明符列表]中的声明顺序进行赋值，然后对 [`X] 的
直接非静态数据成员，按照它们在类定义式中的声明顺序进行赋值。

[:en]
Let [`x] be either the parameter of the function or, for the move operator, an
xvalue referring to the parameter.
[:zh_CN]
令 [`x] 为函数的形参，或对于移动运算符为一个指代其形参的临限值。

[:en]
Each subobject is assigned in the manner appropriate to its type:
[:zh_CN]
每个子对象按照与其类型相适应的方式进行赋值：

[list]
[item]
[:en@~]
if the subobject is of class type, as if by a call to [`operator=] with the
subobject as the object expression and the corresponding subobject of [`x] as a
single function argument (as if by explicit qualification; that is, ignoring any
possible virtual overriding functions in more derived classes);
[:zh_CN@~]
若该子对象为类类型，则如同以该子对象为对象表达式并以 [`x] 的对应子对象作为单个
函数实参，调用 [`operator=]（如同被显式限定一样；就是说，忽略在更加派生的类中
任何可能的虚覆盖函数）；

[item]
[:en@~]
if the subobject is an array, each element is assigned, in the manner
appropriate to the element type;
[:zh_CN@~]
若该子对象是数组，则以与元素类型相适应的方式对每个元素赋值；

[item]
[:en@~]
if the subobject is of scalar type, the built-in assignment operator is used.
[:zh_CN@~]
若该子对象是标量类型，则使用内建的赋值运算符。
[list:end]

[:en]
[%assignment operator[!copy[!virtual bases and]]]
It is unspecified whether subobjects representing virtual base classes are
assigned more than once by the implicitly-defined copy/move assignment operator.
[:zh_CN]
[%赋值运算符[!复制～[!虚基类与～]]]
用以表示虚基类的子对象是否会被隐式定义的复制赋值运算符进行多次赋值是未指明的。

[enter:example]
[codeblock]
struct V { };
struct A : virtual V { };
struct B : virtual V { };
struct C : B, A { };
[codeblock:end]

[:en]
It is unspecified whether the virtual base class subobject [`V] is assigned
twice by the implicitly-defined copy/move assignment operator for [`C].
[:zh_CN]
虚基类子对象 [`V] 是否会被 [`C] 的隐式定义的复制赋值运算符赋值两次是未指明的。
[exit:example]

[para]
[:en]
The implicitly-defined copy assignment operator for a union [`X] copies the
object representation ([#basic.types]) of [`X].
[:zh_CN]
联合 [`X] 隐式定义的复制赋值运算符对 [`X] 的对象表示（[#basic.types]）进行复制。

[%:end#assignment.operator.move]
[%:end#assignment.operator.copy]

[para]
[:en]
[%constructor[!copy[!inaccessible]]]
[%constructor[!move[!inaccessible]]]
[%assignment operator[!copy[!inaccessible]]]
[%assignment operator[!move[!inaccessible]]]
A program is ill-formed if the copy/move constructor or the copy/move assignment
operator for an object is implicitly odr-used and the special member function
is not accessible (Clause [#class.access]).
[:zh_CN]
[%构造函数[!复制～[!不可访问的～]]]
[%构造函数[!移动～[!不可访问的～]]]
[%赋值运算符[!复制～[!不可访问的～]]]
[%赋值运算符[!移动～[!不可访问的～]]]
如果隐式 ODR-式使用了对象的复制/移动构造函数或复制/移动赋值运算符，但该特殊成员
函数不可访问（第 [#class.access] 条），则程序非良构。

[enter:note]
[:en]
Copying/moving one object into another using the copy/move constructor or
the copy/move assignment operator does not change the layout or size of either
object.
[:zh_CN]
使用复制/移动构造函数或复制/移动赋值运算符将一个对象复制/移动给另一个对象，并不
改变任何对象的布局或大小。
[exit:note]

[para]
[:en]
[%temporary[!elimination of]]
[%elision[!copy constructor][see constructor[!copy[!elision]]]]
[%elision[!move constructor][see constructor[!move[!elision]]]]
[%constructor[!copy[!elision]]]
[%constructor[!move[!elision]]]
When certain criteria are met, an implementation is allowed to omit the
copy/move construction of a class object, even if the constructor selected for
the copy/move operation and/or the destructor for the object have
[%side effects] side effects.
[:zh_CN]
[%临时对象[!～的消除]]
[%消除[!复制构造函数][see 构造函数[!复制～[!消除]]]]
[%消除[!移动构造函数][see 构造函数[!移动～[!消除]]]]
[%构造函数[!复制～[!消除]]]
[%构造函数[!移动～[!消除]]]
当满足特定的条件时，即使为复制/移动操作所选择的构造函数和/或析构函数带有
[%副作用]副作用，仍然允许实现省略类对象的复制/移动构造过程。

[:en]
In such cases, the implementation treats the source and target of the omitted
copy/move operation as simply two different ways of referring to the same
object, and the destruction of that object occurs at the later of the times when
the two objects would have been destroyed without the optimization.
[:zh_CN]
在这种情况下，实现只是把被省略的复制/移动操作的源和目标对象简单地当作指代相同
对象的两个不同方式，而该对象的析构发生于这两个对象在未优化时将被销毁的最晚时刻。

[footnote]
[:en]
Because only one object is destroyed instead of two, and one copy/move
constructor is not executed, there is still one object destroyed for each one
constructed.
[:zh_CN]
因为只有一个对象而不是两个被销毁，而一个复制/移动构造函数并未被执行，所以对每个
被构造的对象仍然只有一个对象被销毁。
[footnote:end]

[:en]
This elision of copy/move operations, called
[%@defn copy elision
    [see constructor[!copy[!elision]]]
    [see constructor[!move[!elision]]]]
[%@defn elision[!copy]
    [see constructor[!copy[!elision]]]
    [see constructor[!move[!elision]]]]
[%@defn constructor[!copy[!elision]]]
[%@defn constructor[!move[!elision]]]
[+copy elision], is permitted in the following circumstances (which may be
combined to eliminate multiple copies):
[:zh_CN]
这种对复制/移动操作的消除（被称为
[%@defn 副本消除
    [see 构造函数[!复制～[!消除]]]
    [see 构造函数[!移动～[!消除]]]]
[%@defn 消除[!副本～]
    [see 构造函数[!复制～[!消除]]]
    [see 构造函数[!移动～[!消除]]]]
[%@defn 构造函数[!复制～[!消除]]]
[%@defn 构造函数[!移动～[!消除]]]
[+副本消除]），允许在如下情况下进行（它们可以组合起来以消除多份副本）：

[list]
[item]
[:en]
in a [`return] statement in a function with a class return type, when the
expression is the name of a non-volatile automatic object (other than a function
or catch-clause parameter) with the same cv-unqualified type as the function
return type, the copy/move operation can be omitted by constructing the
automatic object directly into the function[=']s return value
[:zh_CN]
在返回类类型的函数的 [`return] 语句中，当其表达式是（除函数或捕获子句的形参外）
非-volatile 自动对象的名字，且它带有与函数返回类型相同的未被 cv-限定的类型时，
其复制/移动操作可以通过将该自动对象直接构造到该函数的返回值中而省略掉

[item]
[:en]
in a [~throw-expression] ([#expr.throw]), when the operand is the name of a
non-volatile automatic object (other than a function or catch-clause parameter)
whose scope does not extend beyond the end of the innermost enclosing
[~try-block] (if there is one), the copy/move operation from the operand to the
exception object ([#except.throw]) can be omitted by constructing the automatic
object directly into the exception object
[:zh_CN]
在 [~throw-表达式]（[#expr.throw]）中，当其操作数是（除函数或捕获子句的形参外）
非-volatile 自动对象的名字，且它的作用域不超过其最内层外围 [~try-块]（如果有）的
末尾时，从该操作数向异常对象（[#except.throw]）的复制/移动操作可以通过将该自动
对象直接构造到该异常对象中而省略掉

[item]
[:en]
when a temporary class object that has not been bound to a reference
([#class.temporary]) would be copied/moved to a class object with the same
cv-unqualified type, the copy/move operation can be omitted by constructing
the temporary object directly into the target of the omitted copy/move
[:zh_CN]
当未绑定到引用（[#class.temporary]）的临时类对象，要复制/移动给带有相同的未被
cv-限定的类型的类对象时，其复制/移动操作可以通过将该临时对象直接构造到要省略的
复制/移动的目标中而省略掉

[item]
[:en]
when the [~exception-declaration] of an exception handler (Clause [#except])
declares an object of the same type (except for cv-qualification) as the
exception object ([#except.throw]), the copy operation can be omitted by
treating the [~exception-declaration] as an alias for the exception object if
the meaning of the program will be unchanged except for the execution of
constructors and destructors for the object declared by the
[~exception-declaration].
[:zh_CN]
当某个异常处理器的[~异常声明式]（第 [#except] 条）声明了与异常对象
（[#except.throw]）（除 cv-限定性之外）类型相同的对象时，如果除了由[~异常声明式]
所声明的对象的构造函数和析构函数的执行之外不改变程序的含义，则其复制/移动操作
可以通过把该[~异常声明式]当作是异常对象的别名而省略掉。

[enter:note]
[:en]
There cannot be a move from the exception object because it is always an lvalue.
[:zh_CN]
不可能从异常对象进行移动，这是因为它总是左值。
[exit:note]
[list:end]

[para:~]
[enter:example]
[codeblock]
class Thing {
public:
  Thing();
  ~Thing();
  Thing(const Thing&);
};

Thing f() {
  Thing t;
  return t;
}

Thing t2 = f();
[codeblock:end]

[:en]
Here the criteria for elision can be combined to eliminate two calls to the copy
constructor of class [`Thing]: the copying of the local automatic object [`t]
into the temporary object for the return value of function [`f()] and the
copying of that temporary object into object [`t2].
[:zh_CN]
此处可以将消除条件组合起来以消除两次类 [`Thing] 的复制构造函数的调用：将局部自动
对象 [`t] 复制到函数 [`f()] 的返回值的临时对象中，以及将该临时对象复制到对象
[`t2] 中。

[:en]
Effectively, the construction of the local object [`t] can be viewed as directly
initializing the global object [`t2], and that object[=']s destruction will
occur at program exit.
[:zh_CN]
局部对象 [`t] 的构造过程可以有效地看作是直接对全局对象 [`t2] 进行初始化，而该
对象的析构将发生于程序退出之时。

[:en]
Adding a move constructor to [`Thing] has the same effect, but it is the move
construction from the temporary object to [`t2] that is elided.
[:zh_CN]
为 [`Thing] 添加移动构造函数效果相同，但所消除的将为从临时对象向 [`t2] 的移动
构造。
[exit:example]

[para]
[:en]
When the criteria for elision of a copy/move operation are met, but not for an
[~exception-declaration], and the object to be copied is designated by an
lvalue, or when the [~expression] in a [`return] statement is a (possibly
parenthesized) [~id-expression] that names an object with automatic storage
duration declared in the body or [~parameter-declaration-clause] of the
innermost enclosing function or [~lambda-expression], overload resolution to
select the constructor for the copy is first performed as if the object were
designated by an rvalue.
[:zh_CN]
当复制/移动操作的消除条件被满足，且不针对[~异常声明式]，而所要复制的对象是以左值
来代表时，或者当 [`return] 语句的[~表达式]是（可能带有括号的）[~标识表达式]，并
指名其最内层外围函数或[~lambda-表达式]的函数体或[~形参声明子句]所声明的具有自动
存储期的对象时，首先按照如同该对象是被右值所代表那样实施重载决议以选择复制所需的
构造函数。

[:en]
If the first overload resolution fails or was not performed, or if the type of
the first parameter of the selected constructor is not an rvalue reference to
the object[=']s type (possibly cv-qualified), overload resolution is performed
again, considering the object as an lvalue.
[:zh_CN]
若第一次重载决议失败或者未进行，或者若被选择的构造函数的第一个形参的类型并不是
该对象的（可能被 cv-限定的）类型的右值引用，则把该对象作为左值再次实施重载决议。

[enter:note]
[:en]
This two-stage overload resolution must be performed regardless of whether copy
elision will occur.
[:zh_CN]
无论是否发生副本消除都要进行这种两阶段重载决议。

[:en]
It determines the constructor to be called if elision is not performed, and the
selected constructor must be accessible even if the call is elided.
[:zh_CN]
它确定了不实施消除时所调用的构造函数，且被选择的构造函数即使在其调用被消除时也
应当是可访问的。
[exit:note]

[para:~]
[enter:example]
[codeblock]
class Thing {
public:
  Thing();
  ~Thing();
  Thing(Thing&&);
private:
  Thing(const Thing&);
};

Thing f(bool b) {
  Thing t;
  if (b)
    throw t;                    // [:en] OK: [`Thing(Thing&&)] used (or elided) to throw [`t]
                                // [|:zh_CN] OK：使用（或消除了）[`Thing(Thing&&)] 以抛出 [`t]
  return t;                     // [:en] OK: [`Thing(Thing&&)] used (or elided) to return [`t]
                                // [|:zh_CN] OK：使用（或消除了）[`Thing(Thing&&)] 以返回 [`t]
}

Thing t2 = f(false);            // [:en] OK: [`Thing(Thing&&)] used (or elided) to construct [`t2]
                                // [|:zh_CN] OK：使用（或消除了）[`Thing(Thing&&)] 以构造 [`t2]
[codeblock:end]
[exit:example]
