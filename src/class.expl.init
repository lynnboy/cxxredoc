[section#class.expl.init
    [:en] Explicit initialization
]

[%[:en] initialization[!explicit]]
[%[:en] initialization[!constructor and]]

[para]
[:en]
An object of class type can be initialized with a parenthesized
[~expression-list], where the [~expression-list] is construed as an argument
list for a constructor that is called to initialize the object.

[:en]
Alternatively, a single [~assignment-expression] can be specified as an
[~initializer] using the [`=] form of initialization.

[:en]
Either direct-initialization semantics or copy-initialization semantics apply;
see [#dcl.init].

[%[:en] example[!constructor and initialization]]
[enter:example]

[codeblock]
struct complex {
  complex();
  complex(double);
  complex(double,double);
};

complex sqrt(complex,complex);

complex a(1);                   // [:en] initialize by a call of
                                // [:en@~] [`complex(double)]
complex b = a;                  // [:en] initialize by a copy of [`a]
complex c = complex(1,2);       // [:en] construct [`complex(1,2)]
                                // [:en@~] using [`complex(double,double)]
                                // [:en@~] copy/move it into [`c]
complex d = sqrt(b,c);          // [:en] call [`sqrt(complex,complex)]
                                // [:en@~] and copy/move the result into [`d]
complex e;                      // [:en] initialize by a call of
                                // [:en@~] [`complex()]
complex f = 3;                  // [:en] construct [`complex(3)] using
                                // [:en@~] [`complex(double)]
                                // [:en@~] copy/move it into [`f]
complex g = { 1, 2 };           // [:en] initialize by a call of
                                // [:en@~] [`complex(double, double)]
[codeblock:end]
[exit:example]

[enter:note]
[:en]
[%initialization[!overloaded assignment and]]
overloading of the assignment operator ([#over.ass]) has no effect on
initialization.
[exit:note]

[para]
[:en]
[%initialization[!array of class objects]]
[%constructor[!array of class objects and]]
An object of class type can also be initialized by a [~braced-init-list].

[:en]
List-initialization semantics apply; see [#dcl.init] and [#dcl.init.list].

[enter:example]
[codeblock]
complex v[6] = { 1, complex(1,2), complex(), 2 };
[codeblock:end]

[:en]
Here, [`complex::complex(double)] is called for the initialization of [`v[0`]]
and [`v[3`]], [`complex::complex(double, double)] is called for the
initialization of [`v[1`]], [`complex::complex()] is called for the
initialization [`v[2`]], [`v[4`]], and [`v[5`]]. For another example,

[codeblock]
struct X {
  int i;
  float f;
  complex c;
} x = { 99, 88.8, 77.7 };
[codeblock:end]

[:en]
Here, [`x.i] is initialized with 99, [`x.f] is initialized with 88.8, and
[`complex::complex(double)] is called for the initialization of [`x.c].
[exit:example]

[enter:note]
[:en]
Braces can be elided in the [~initializer-list] for any aggregate, even if the
aggregate has members of a class type with user-defined type conversions; see
[#dcl.init.aggr].
[exit:note]

[para]
[enter:note]
[:en]
If [`T] is a class type with no default constructor, any declaration of an
object of type [`T] (or array thereof) is ill-formed if no [~initializer]
is explicitly specified (see [#class.init] and [#dcl.init]).
[exit:note]

[para]
[enter:note]
[:en]
[%order of execution[!constructor and [`static] objects]]
the order in which objects with static or thread storage duration
are initialized is described in [#basic.start.init] and [#stmt.dcl].
[exit:note]
