[section#class.temporary
    [:en] Temporary objects
]

[para]
[:en]
[%object temporary[see temporary]]
[%temporary]
[%optimization of temporary[see elimination of temporary]]
[%temporary[!elimination of]]
[%temporary[!implementation-defined generation of]]
Temporaries of class type are created in various contexts: binding a reference
to a prvalue ([#dcl.init.ref]), returning a prvalue ([#stmt.return]), a
conversion that creates a prvalue ([#conv.lval], [#expr.static.cast],
[#expr.const.cast], [#expr.cast]), throwing an exception ([#except.throw]), and
in some initializations ([#dcl.init]).

[enter:note]
[:en]
The lifetime of exception objects is described in [#except.throw].
[exit:note]

[:en]
Even when the creation of the temporary object is unevaluated (Clause [#expr])
or otherwise avoided ([#class.copy]), all the semantic restrictions shall be
respected as if the temporary object had been created and later destroyed.

[enter:note]
[:en]
This includes accessibility ([#class.access]) and whether it is deleted, for the
constructor selected and for the destructor.

[:en]
However, in the special case of a function call used as the operand of a
[~decltype-specifier] ([#expr.call]), no temporary is introduced, so the
foregoing does not apply to the prvalue of any such function call.
[exit:note]

[para]
[enter:example]
[:en]
Consider the following code:

[codeblock]
class X {
public:
  X(int);
  X(const X&);
  X& operator=(const X&);
  ~X();
};

class Y {
public:
  Y(int);
  Y(Y&&);
  ~Y();
};

X f(X);
Y g(Y);

void h() {
  X a(1);
  X b = f(X(2));
  Y c = g(Y(3));
  a = f(a);
}
[codeblock:end]

[:en]
[%class object copy[see copy constructor]]
[%constructor[!copy]]
An implementation might use a temporary in which to construct [`X(2)] before
passing it to [`f()] using [`X][=']s copy constructor; alternatively, [`X(2)]
might be constructed in the space used to hold the argument.

[:en]
Likewise, an implementation might use a temporary in which to construct [`Y(3)]
before passing it to [`g()] using [`Y][=']s move constructor; alternatively,
[`Y(3)] might be constructed in the space used to hold the argument.

[:en]
Also, a temporary might be used to hold the result of [`f(X(2))] before copying
it to [`b] using [`X][=']s copy constructor; alternatively, [`f()][=']s result
might be constructed in [`b].

[:en]
Likewise, a temporary might be used to hold the result of [`g(Y(3))] before
moving it to [`c] using [`Y][=']s move constructor; alternatively, [`g()][=']s
result might be constructed in [`c].

[:en]
On the other hand, the expression [`a=f(a)] requires a temporary for the result
of [`f(a)], which is then assigned to [`a].
[exit:example]

[para]
[:en]
[%temporary[!constructor for]]
[%temporary[!destructor for]]
[%temporary[!destruction of]]
When an implementation introduces a temporary object of a class that has a
non-trivial constructor ([#class.ctor], [#class.copy]), it shall ensure that
a constructor is called for the temporary object.

[:en]
Similarly, the destructor shall be called for a temporary with a non-trivial
destructor ([#class.dtor]).

[:en]
Temporary objects are destroyed as the last step in evaluating the
full-expression ([#intro.execution]) that (lexically) contains the point where
they were created.

[:en]
This is true even if that evaluation ends in throwing an exception.

[:en]
The [%value computation] value computations and [%side effects] side effects of
destroying a temporary object are associated only with the full-expression, not
with any specific subexpression.

[para]
[:en]
[%initializer[!temporary and declarator]]
[%temporary[!order of destruction of]]
There are two contexts in which temporaries are destroyed at a different point
than the end of the full-expression.

[:en]
The first context is when a default constructor is called to initialize an
element of an array.

[:en]
If the constructor has one or more default arguments, the destruction of every
temporary created in a default argument is sequenced before the construction of
the next array element, if any.

[para]
[:en]
The second context is when a reference is bound to a temporary.

[footnote]
[:en]
The same rules apply to initialization of an [`initializer_list] object
([#dcl.init.list]) with its underlying temporary array
[footnote:end]

[:en]
The temporary to which the reference is bound or the temporary that is the
complete object of a subobject to which the reference is bound persists for the
lifetime of the reference except:

[list]
[item]
[:en]
A temporary object bound to a reference parameter in a function call
([#expr.call]) persists until the completion of the full-expression containing
the call.

[item]
[:en]
The lifetime of a temporary bound to the returned value in a function return
statement ([#stmt.return]) is not extended; the temporary is destroyed at the
end of the full-expression in the return statement.

[item]
[:en]
A temporary bound to a reference in a [~new-initializer] ([#expr.new]) persists
until the completion of the full-expression containing the [~new-initializer].

[enter:example]
[codeblock]
struct S { int mi; const std::pair<int,int>& mp; };
S a { 1, {2,3} };
S* p = new S{ 1, {2,3} };   // [:en] Creates dangling reference
[codeblock:end]
[exit:example]

[enter:note]
[:en]
This may introduce a dangling reference, and implementations are encouraged to
issue a warning in such a case.
[exit:note]
[list:end]

[:en]
The destruction of a temporary whose lifetime is not extended by being bound to
a reference is sequenced before the destruction of every temporary which is
constructed earlier in the same full-expression.

[:en]
If the lifetime of two or more temporaries to which references are bound ends
at the same point, these temporaries are destroyed at that point in the reverse
order of the completion of their construction.

[:en]
In addition, the destruction of temporaries bound to references shall take into
account the ordering of destruction of objects with static, thread, or automatic
storage duration ([#basic.stc.static], [#basic.stc.thread], [#basic.stc.auto]);
that is, if [`obj1] is an object with the same storage duration as the temporary
and created before the temporary is created the temporary shall be destroyed
before [`obj1] is destroyed; if [`obj2] is an object with the same storage
duration as the temporary and created after the temporary is created the
temporary shall be destroyed after [`obj2] is destroyed.

[enter:example]
[codeblock]
struct S {
  S();
  S(int);
  friend S operator+(const S&, const S&);
  ~S();
};
S obj1;
const S& cr = S(16)+S(23);
S obj2;
[codeblock:end]

[:en]
the expression [`S(16) + S(23)] creates three temporaries: a first temporary
[`T1] to hold the result of the expression [`S(16)], a second temporary [`T2]
to hold the result of the expression [`S(23)], and a third temporary [`T3] to
hold the result of the addition of these two expressions.

[:en]
The temporary [`T3] is then bound to the reference [`cr].

[:en]
It is unspecified whether [`T1] or [`T2] is created first.

[:en]
On an implementation where [`T1] is created before [`T2], [`T2] shall be
destroyed before [`T1].

[:en]
The temporaries [`T1] and [`T2] are bound to the reference parameters of
[`operator+]; these temporaries are destroyed at the end of the full-expression
containing the call to [`operator+].

[:en]
The temporary [`T3] bound to the reference [`cr] is destroyed at the end of
[`cr][=']s lifetime, that is, at the end of the program.

[:en]
In addition, the order in which [`T3] is destroyed takes into account the
destruction order of other objects with static storage duration.

[:en]
That is, because [`obj1] is constructed before [`T3], and [`T3] is constructed
before [`obj2], [`obj2] shall be destroyed before [`T3], and [`T3] shall be
destroyed before [`obj1].
[exit:example]
