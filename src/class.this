[section#class.this
    [:en] The [`this] pointer
]
[%[`this]]
[%  [:en] member function[![`this]]
    [:zh_CN] ]

[para]
[:en]
[%[`this] pointer[see [`this]]]
In the body of a non-static ([#class.mfct]) member function, the keyword [`this]
is a prvalue expression whose value is the address of the object for which the
function is called.

[:en]
[%[`this][!type of]]
The type of [`this] in a member function of a class [`X] is [`X*].

[:en]
[%member function[![`const]]]
If the member function is declared [`const], the type of [`this] is [`const X*],
[%member function[![`volatile]]]
if the member function is declared [`volatile], the type of [`this] is
[`volatile X*], and if the member function is declared [`const volatile], the
type of [`this] is [`const volatile X*].

[:en]
[%member function[![`const]]]
[enter:note]
[:en]
thus in a [`const] member function, the object for which the function is called
is accessed through a [`const] access path.
[exit:note]

[enter:example]
[codeblock]
struct s {
  int a;
  int f() const;
  int g() { return a++; }
  int h() const { return a++; } // [:en] error
};

int s::f() const { return a; }
[codeblock:end]

[:en]
The [`a++] in the body of [`s::h] is ill-formed because it tries to modify (a
part of) the object for which [`s::h()] is called.

[:en]
This is not allowed in a [`const] member function because [`this] is a pointer
to [`const]; that is, [`*this] has [`const] type.
[exit:example]

[para]
[:en]
Similarly, [`volatile] semantics ([#dcl.type.cv]) apply in [`volatile] member
functions when accessing the object and its non-static data members.

[para]
[:en]
A [~cv-qualified] member function can be called on an object-expression
([#expr.ref]) only if the object-expression is as cv-qualified or
less-cv-qualified than the member function.

[enter:example]
[codeblock]
void k(s& x, const s& y) {
  x.f();
  x.g();
  y.f();
  y.g();                        // [:en] error
}
[codeblock:end]

[:en]
The call [`y.g()] is ill-formed because [`y] is [`const] and [`s::g()] is a
non-[`const] member function, that is, [`s::g()] is less-qualified than the
object-expression [`y].
[exit:example]

[para]
[:en]
[%[`const][!constructor and]]
[%[`const][!destructor and]]
[%[`volatile][!constructor and]]
[%[`volatile][!destructor and]]
Constructors ([#class.ctor]) and destructors ([#class.dtor]) shall not be
declared [`const], [`volatile] or [`const volatile].

[enter:note]
[:en]
However, these functions can be invoked to create and destroy objects with
cv-qualified types, see ([#class.ctor]) and ([#class.dtor]).
[exit:note]
