[section#comparisons
    [:en] Comparisons
    [:zh_CN] 比较
]

[para]
[:en]
The library provides basic function object classes for all of the comparison
operators in the language ([#expr.rel], [#expr.eq]).
[:zh_CN]
程序库为语言中的所有比较运算符（[#expr.rel]，[#expr.eq]）提供了基本的函数对象类
。

[%@library equal_to]
[codeblock:declaration]
template <class T = void> struct equal_to {
  constexpr bool operator()(const T& x, const T& y) const;
  typedef T first_argument_type;
  typedef T second_argument_type;
  typedef bool result_type;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`x == y].
[:zh_CN] [`operator()] 返回 [`x == y]。
[exit:description]

[%@library not_equal_to]
[codeblock:declaration]
template <class T = void> struct not_equal_to {
  constexpr bool operator()(const T& x, const T& y) const;
  typedef T first_argument_type;
  typedef T second_argument_type;
  typedef bool result_type;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`x != y].
[:zh_CN] [`operator()] 返回 [`x != y]。
[exit:description]

[%@library greater]
[codeblock:declaration]
template <class T = void> struct greater {
  constexpr bool operator()(const T& x, const T& y) const;
  typedef T first_argument_type;
  typedef T second_argument_type;
  typedef bool result_type;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`x > y].
[:zh_CN] [`operator()] 返回 [`x > y]。
[exit:description]

[%@library less]
[codeblock:declaration]
template <class T = void> struct less {
  constexpr bool operator()(const T& x, const T& y) const;
  typedef T first_argument_type;
  typedef T second_argument_type;
  typedef bool result_type;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`x < y].
[:zh_CN] [`operator()] 返回 [`x < y]。
[exit:description]

[%@library greater_equal]
[codeblock:declaration]
template <class T = void> struct greater_equal {
  constexpr bool operator()(const T& x, const T& y) const;
  typedef T first_argument_type;
  typedef T second_argument_type;
  typedef bool result_type;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`x >= y].
[:zh_CN] [`operator()] 返回 [`x >= y]。
[exit:description]

[%@library less_equal]
[codeblock:declaration]
template <class T = void> struct less_equal {
  constexpr bool operator()(const T& x, const T& y) const;
  typedef T first_argument_type;
  typedef T second_argument_type;
  typedef bool result_type;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`x <= y].
[:zh_CN] [`operator()] 返回 [`x <= y]。
[exit:description]

[%@library equal_to<>]
[codeblock:declaration [special unspecified] ]
template <> struct equal_to<void> {
  template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) == std::forward<U>(u));

  typedef unspecified is_transparent;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`std::forward<T>(t) == std::forward<U>(u)].
[:zh_CN] [`operator()] 返回 [`std::forward<T>(t) == std::forward<U>(u)]。
[exit:description]

[%@library not_equal_to<>]
[codeblock:declaration [special unspecified] ]
template <> struct not_equal_to<void> {
  template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) != std::forward<U>(u));

  typedef unspecified is_transparent;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`std::forward<T>(t) != std::forward<U>(u)].
[:zh_CN] [`operator()] 返回 [`std::forward<T>(t) != std::forward<U>(u)]。
[exit:description]

[%@library greater<>]
[codeblock:declaration [special unspecified] ]
template <> struct greater<void> {
  template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) > std::forward<U>(u));

  typedef unspecified is_transparent;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`std::forward<T>(t) > std::forward<U>(u)].
[:zh_CN] [`operator()] 返回 [`std::forward<T>(t) > std::forward<U>(u)]。
[exit:description]

[%@library less<>]
[codeblock:declaration [special unspecified] ]
template <> struct less<void> {
  template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) < std::forward<U>(u));

  typedef unspecified is_transparent;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`std::forward<T>(t) < std::forward<U>(u)].
[:zh_CN] [`operator()] 返回 [`std::forward<T>(t) < std::forward<U>(u)]。
[exit:description]

[%@library greater_equal<>]
[codeblock:declaration [special unspecified] ]
template <> struct greater_equal<void> {
  template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) >= std::forward<U>(u));

  typedef unspecified is_transparent;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`std::forward<T>(t) >= std::forward<U>(u)].
[:zh_CN] [`operator()] 返回 [`std::forward<T>(t) >= std::forward<U>(u)]。
[exit:description]

[%@library less_equal<>]
[codeblock:declaration [special unspecified] ]
template <> struct less_equal<void> {
  template <class T, class U> constexpr auto operator()(T&& t, U&& u) const
    -> decltype(std::forward<T>(t) <= std::forward<U>(u));

  typedef unspecified is_transparent;
};
[codeblock:end]

[enter:description]
[para]
[:en] [`operator()] returns [`std::forward<T>(t) <= std::forward<U>(u)].
[:zh_CN] [`operator()] 返回 [`std::forward<T>(t) <= std::forward<U>(u)]。
[exit:description]

[para]
[:en]
For templates [`greater], [`less], [`greater_equal], and [`less_equal], the
specializations for any pointer type yield a total order, even if the built-in
operators [`<], [`>], [`<=], [`>=] do not.
[:zh_CN]
对于模板 [`greater]、[`less]、[`greater_equal] 和 [`less_equal]，它们对任意指针
类型的特例均构成一个全序，即使内建的运算符 [`<]、[`>]、[`<=]、[`>=] 并不构成全序
时也是如此。
