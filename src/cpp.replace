[section#cpp.replace
    [:en] Macro replacement
]
[%:begin#macro.replacement
    [:en] macro [!replacement]
]

[:en]
[%replacement[!macro][see macro[!replacement]]]
[%preprocessing directives[!macro replacement][see macro[!replacement]]]

[para]
[:en]
[%macro[!replacement list]]
Two replacement lists are identical if and only if the preprocessing tokens in
both have the same number, ordering, spelling, and white-space separation, where
all white-space separations are considered identical.

[para]
[:en]
An identifier currently defined as an
[%object-like macro[see macro[!object-like]]] [%macro[!object-like]]
[+object-like] macro may be redefined by another [`#define] preprocessing
directive provided that the second definition is an object-like macro definition
and the two replacement lists are identical, otherwise the program is
ill-formed.

[:en]
Likewise, an identifier currently defined as a
[%function-like macro[see macro[!function-like]]] [%macro[!function-like]]
[+function-like] macro may be redefined by another [`#define] preprocessing
directive provided that the second definition is a function-like macro
definition that has the same number and spelling of parameters, and the two
replacement lists are identical, otherwise the program is ill-formed.

[para]
[:en]
[%macro[!replacement list]]
There shall be white-space between the identifier and the replacement list
in the definition of an object-like macro.

[para]
[:en]
If the [~identifier-list] in the macro definition does not end with
an ellipsis, the number of arguments (including those arguments consisting
of no preprocessing tokens)
in an invocation of a function-like macro shall
equal the number of parameters in the macro definition. Otherwise, there shall be more arguments in the invocation than there are
parameters in the macro definition (excluding the [`...]). There
shall exist a
[`)]
preprocessing token that terminates the invocation.

[para]
[%[`__VA_ARGS__]]
[:en]
The identifier [`__VA_ARGS__] shall occur only in the replacement-list of a
function-like macro that uses the ellipsis notation in the parameters.

[para]
[:en]
A parameter identifier in a function-like macro shall be uniquely declared
within its scope.

[para]
[:en]
The identifier immediately following the [`define] is called the
[%macro[!name]] [%name[!macro][see macro[!name]]]
[+macro name].

[:en]
There is one name space for macro names.

[:en]
Any white-space characters preceding or following the replacement list of
preprocessing tokens are not considered part of the replacement list for either
form of macro.

[para]
[:en]
If a [%[`#] operator] [`#] preprocessing token, followed by an identifier,
occurs lexically at the point at which a preprocessing directive could begin,
the identifier is not subject to macro replacement.

[para]
[:en]
A preprocessing directive of the form

[syntax:explanation]
[%[`#define]]
[`#] [`define] [~identifier] [~replacement-list] [~new-line]
[syntax:end]

[:en@~]
defines an [%macro[!object-like]] [+object-like macro] that causes each
subsequent instance of the macro name

[footnote]
[:en]
Since, by macro-replacement time, all character literals and string literals are
preprocessing tokens, not sequences possibly containing identifier-like
subsequences (see [#lex.phases], translation phases), they are never scanned for
macro names or parameters.
[footnote:end]

[:en@~]
to be replaced by the replacement list of preprocessing tokens that constitute
the remainder of the directive.

[footnote]
[:en]
An alternative token ([#lex.digraph]) is not an identifier, even when its
spelling consists entirely of letters and underscores.

[:en]
Therefore it is not possible to define a macro whose name is the same as that of
an alternative token.
[footnote:end]

[:en]
The replacement list is then rescanned for more macro names as specified below.

[para]
[:en]
A preprocessing directive of the form

[syntax:explanation]
[rule]
    [| [`#] [`define] identifier lparen [~:opt identifier-list] [`)] replacement-list new-line ]
    [| [`#] [`define] identifier lparen [`...] [`)] replacement-list new-line ]
    [| [`#] [`define] identifier lparen identifier-list [`,] [`...] [`)] replacement-list new-line ]
[rule:end]
[syntax:end]

[:en@~]
[%macro[!function-like]]
defines a [+function-like macro] with parameters, whose use is similar
syntactically to a function call.

[:en]
The parameters [%parameters[!macro]] are specified by the optional list of
identifiers, whose scope extends from their declaration in the identifier list
until the new-line character that terminates the [`#define] preprocessing
directive.

[:en]
[%invocation[!macro]]
Each subsequent instance of the function-like macro name followed by a [`(] as
the next preprocessing token introduces the sequence of preprocessing tokens
that is replaced by the replacement list in the definition (an invocation of the
macro).

[:en]
The replaced sequence of preprocessing tokens is terminated by the matching [`)]
preprocessing token, skipping intervening matched pairs of left and right
parenthesis preprocessing tokens.

[:en]
Within the sequence of preprocessing tokens making up an invocation of a
function-like macro, new-line is considered a normal white-space character.

[para]
[:en]
[%macro[!function-like[!arguments]]]
The sequence of preprocessing tokens bounded by the outside-most matching
parentheses forms the list of arguments for the function-like macro.

[:en]
The individual arguments within the list are separated by comma preprocessing
tokens, but comma preprocessing tokens between matching inner parentheses do not
separate arguments.

[:en]
If there are sequences of preprocessing tokens within the list of arguments that
would otherwise act as preprocessing directives,

[footnote]
[:en]
Despite the name, a non-directive is a preprocessing directive.
[footnote:end]

[:en@~]
the behavior is undefined.

[para]
[:en]
[%macro[!function-like[!arguments]]]
If there is a [`...] immediately preceding the [`)] in the function-like macro
definition, then the trailing arguments, including any separating comma
preprocessing tokens, are merged to form a single item: the [+variable
arguments].

[:en]
The number of arguments so combined is such that, following merger, the number
of arguments is one more than the number of parameters in the macro definition
(excluding the [`...]).

[include cpp.subst]

[include cpp.stringize]

[include cpp.concat]

[include cpp.rescan]

[include cpp.scope]

[%:end#macro.replacement]
