[section#dcl.attr.deprecated
    [:en] Deprecated attribute
]

[%  [:en] attribute[!deprecated]
    [:zh_CN] ]

[para]
[:en]
The [~attribute-token] [`deprecated] can be used to mark names and entities
whose use is still allowed, but is discouraged for some reason.

[enter:note]
[:en]
in particular, [`deprecated] is appropriate for names and entities that are
deemed obsolescent or unsafe.
[exit:note]

[:en]
It shall appear at most once in each [~attribute-list].

[:en]
An [~attribute-argument-clause] may be present and, if present, it shall have
the form:

[codeblock:notation]
( [~string-literal] )
[codeblock:end]

[enter:note]
[:en]
the [~string-literal] in the [~attribute-argument-clause] could be used to
explain the rationale for deprecation and/or to suggest a replacing entity.
[exit:note]

[para]
[:en]
The attribute may be applied to the declaration of a class, a [~typedef-name],
a variable, a non-static data member, a function, a namespace, an enumeration,
an enumerator, or a template specialization.

[para]
[:en]
A name or entity declared without the [`deprecated] attribute can later be
re-declared with the attribute and vice-versa.

[enter:note]
[:en]
Thus, an entity initially declared without the attribute can be marked as
deprecated by a subsequent redeclaration.

[:en]
However, after an entity is marked as deprecated, later redeclarations do not
un-deprecate the entity.
[exit:note] 

[:en]
Redeclarations using different forms of the attribute (with or without the
[~attribute-argument-clause] or with different [~attribute-argument-clause]s)
are allowed.

[para]
[enter:note]
[:en]
Implementations may use the [`deprecated] attribute to produce a diagnostic
message in case the program refers to a name or entity other than to declare it,
after a declaration that specifies the attribute.

[:en]
The diagnostic message may include the text provided within the
[~attribute-argument-clause] of any [`deprecated] attribute applied to the name
or entity.
[exit:note]
