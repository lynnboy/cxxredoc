[section#dcl.fct.default
    [:en] Default arguments
]

[%:begin#declaration.default.argument
    [:en] declaration [!default argument]
]

[para]
[:en]
If an [~initializer-clause] is specified in a [~parameter-declaration] this
[~initializer-clause] is used as a default argument.

[:en]
Default arguments will be used in calls where trailing arguments are missing.

[para]
[:en]
[%argument[!example of default]]

[enter:example]
[:en]
the declaration

[codeblock]
void point(int = 3, int = 4);
[codeblock:end]

[:en@~]
declares a function that can be called with zero, one, or two arguments of type
[`int].

[:en]
It can be called in any of these ways:

[codeblock]
point(1,2);  point(1);  point();
[codeblock:end]

[:en]
The last two calls are equivalent to [`point(1,4)] and [`point(3,4)],
respectively.
[exit:example]

[para]
[:en]
A default argument shall be specified only in the
[~parameter-declaration-clause] of a function declaration or
[~lambda-declarator] or in a [~template-parameter] ([#temp.param]); in the
latter case, the [~initializer-clause] shall be an [~assignment-expression].

[:en]
A default argument shall not be specified for a parameter pack.

[:en]
If it is specified in a [~parameter-declaration-clause], it shall not occur
within a [~declarator] or [~abstract-declarator] of a [~parameter-declaration].

[footnote]
[:en]
This means that default arguments cannot appear, for example, in declarations of
pointers to functions, references to functions, or [`typedef] declarations.
[footnote:end]

[para]
[:en]
For non-template functions, default arguments can be added in later declarations
of a function in the same scope.

[:en]
Declarations in different scopes have completely distinct sets of default
arguments.

[:en]
That is, declarations in inner scopes do not acquire default arguments from
declarations in outer scopes, and vice versa.

[:en]
In a given function declaration, each parameter subsequent to a parameter with a
default argument shall have a default argument supplied in this or a previous
declaration or shall be a function parameter pack.

[:en]
A default argument shall not be redefined by a later declaration (not even to
the same value).

[enter:example]
[codeblock]
void g(int = 0, ...);           // [:en] OK, ellipsis is not a parameter so it can follow
                                // [:en@~] a parameter with a default argument
void f(int, int);
void f(int, int = 7);
void h() {
  f(3);                         // [:en] OK, calls [`f(3, 7)]
  void f(int = 1, int);         // [:en] error: does not use default
                                // [:en@~] from surrounding scope
}
void m() {
  void f(int, int);             // [:en] has no defaults
  f(4);                         // [:en] error: wrong number of arguments
  void f(int, int = 5);         // OK
  f(4);                         // [:en] OK, calls [`f(4, 5);]
  void f(int, int = 5);         // [:en] error: cannot redefine, even to
                                // [:en@~] same value
}
void n() {
  f(6);                         // [:en] OK, calls [`f(6, 7)]
}
[codeblock:end]
[exit:example]

[:en]
For a given inline function defined in different translation units, the
accumulated sets of default arguments at the end of the translation units shall
be the same; see [#basic.def.odr].

[:en]
If a friend declaration specifies a default argument expression, that
declaration shall be a definition and shall be the only declaration of the
function or function template in the translation unit.

[para]
[:en]
[%argument[!type checking of default]]
[%argument[!binding of default]]
[%argument[!evaluation of default]]
The default argument has the same semantic constraints as the initializer in a
declaration of a variable of the parameter type, using the copy-initialization
semantics ([#dcl.init]).

[:en]
The names in the default argument are bound, and the semantic constraints are
checked, at the point where the default argument appears.

[:en]
Name lookup and checking of semantic constraints for default arguments in
function templates and in member functions of class templates are performed as
described in [#temp.inst].

[enter:example]
[:en]
[%argument[!example of default]]
in the following code, [`g] will be called with the value [`f(2)]:

[codeblock]
int a = 1;
int f(int);
int g(int x = f(a));            // [:en] default argument: [`f(::a)]

void h() {
  a = 2;
  {
  int a = 3;
  g();                          // [`g(f(::a))]
  }
}
[codeblock:end]
[exit:example]

[enter:note]
[:en]
In member function declarations, names in default arguments are looked up as
described in [#basic.lookup.unqual].

[:en]
Access checking applies to names in default arguments as described in Clause
[#class.access].
[exit:note]

[para]
[:en]
Except for member functions of class templates, the default arguments in a
member function definition that appears outside of the class definition are
added to the set of default arguments provided by the member function
declaration in the class definition; the program is ill-formed if a default
constructor ([#class.ctor]), copy or move constructor, or copy or move
assignment operator ([#class.copy]) is so declared.

[:en]
Default arguments for a member function of a class template shall be specified
on the initial declaration of the member function within the class template.
[enter:example]

[codeblock]
class C {
  void f(int i = 3);
  void g(int i, int j = 99);
};

void C::f(int i = 3) {          // [:en] error: default argument already
}                               // [:en@~] specified in class scope
void C::g(int i = 88, int j) {  // [:en] in this translation unit,
}                               // [:en@~] [`C::g] can be called with no argument
[codeblock:end]
[exit:example]

[para]
[:en]
Local variables shall not be used in a default argument.

[enter:example]
[codeblock]
void f() {
  int i;
  extern void g(int x = i);     // [:en] error
  // ...
}
[codeblock:end]
[exit:example]

[para]
[:en]
The keyword [`this] shall not be used in a default argument of a member
function.

[enter:example]
[codeblock]
class A {
  void f(A* p = this) { }       // [:en] error
};
[codeblock:end]
[exit:example]

[para]
[:en]
[%argument[!evaluation of default]]
A default argument is evaluated each time the function is called with no
argument for the corresponding parameter.

[:en]
[%arguments[!implementation-defined order of evaluation of function]]
The order of evaluation of function arguments is unspecified.

[:en]
[%argument[!scope of default]]
Consequently, parameters of a function shall not be used in a default argument,
even if they are not evaluated.

[:en]
[%argument and name hiding[!default]]
Parameters of a function declared before a default argument are in scope and can
hide namespace and class member names.

[enter:example]
[codeblock]
int a;
int f(int a, int b = a);            // [:en] error: parameter [`a]
                                    // [:en@~] used as default argument
typedef int I;
int g(float I, int b = I(2));       // [:en] error: parameter [`I] found
int h(int a, int b = sizeof(a));    // [:en] error, parameter [`a] used
                                    // [:en@~] in default argument
[codeblock:end]
[exit:example]

[:en]
Similarly, a non-static member shall not be used in a default argument, even if
it is not evaluated, unless it appears as the [~id-expression] of a class member
access expression ([#expr.ref]) or unless it is used to form a pointer to member
([#expr.unary.op]).

[enter:example]
[:en]
the declaration of [`X::mem1()] in the following example is ill-formed because
no object is supplied for the non-static member [`X::a] used as an initializer.

[codeblock]
int b;
class X {
  int a;
  int mem1(int i = a);          // [:en] error: non-static member [`a]
                                // [:en@~] used as default argument
  int mem2(int i = b);          // [:en] OK;  use [`X::b]
  static int b;
};
[codeblock:end]

[:en]
The declaration of [`X::mem2()] is meaningful, however, since no object is
needed to access the static member [`X::b].

[:en]
Classes, objects, and members are described in Clause [#class].
[exit:example]

[:en]
A default argument is not part of the type of a function.

[enter:example]
[codeblock]
int f(int = 0);

void h() {
  int j = f(1);
  int k = f();                  // [:en] OK, means [`f(0)]
}

int (*p1)(int) = &f;
int (*p2)() = &f;               // [:en] error: type mismatch
[codeblock:end]
[exit:example]

[:en]
When a declaration of a function is introduced by way of a [~using-declaration]
([#namespace.udecl]), any default argument information associated with the
declaration is made known as well.

[:en]
If the function is redeclared thereafter in the namespace with additional
default arguments, the additional arguments are also known at any point
following the redeclaration where the [~using-declaration] is in scope.

[para]
[:en]
[%argument and virtual function[!default]]
A virtual function call ([#class.virtual]) uses the default arguments in the
declaration of the virtual function determined by the static type of the pointer
or reference denoting the object.

[:en]
An overriding function in a derived class does not acquire default arguments
from the function it overrides.

[enter:example]
[codeblock]
struct A {
  virtual void f(int a = 7);
};
struct B : public A {
  void f(int a);
};
void m() {
  B* pb = new B;
  A* pa = pb;
  pa->f();          // [:en] OK, calls [`pa->B::f(7)]
  pb->f();          // [:en] error: wrong number of arguments for [`B::f()]
}
[codeblock:end]
[exit:example]

[%:end#declaration.default.argument]
