[section#dcl.init.aggr
    [:en] Aggregates
]

[:en]
[%aggregate]
[%initialization[!aggregate]]
[%aggregate initialization]
[%initialization[!array]]
[%initialization[!class object]]
[%class object initialization[see constructor]]
[%[`{}][!initializer list]

[para]
[:en]
An [+aggregate] is an array or a class (Clause [#class]) with no user-provided
constructors ([#class.ctor]), no private or protected non-static data members
(Clause [#class.access]), no base classes (Clause [#class.derived]), and no
virtual functions ([#class.virtual]).

[para]
[:en]
When an aggregate is initialized by an initializer list, as specified in
[#dcl.init.list], the elements of the initializer list are taken as initializers
for the members of the aggregate, in increasing subscript or member order.

[:en]
Each member is copy-initialized from the corresponding [~initializer-clause].

[:en]
If the [~initializer-clause] is an expression and a narrowing conversion
([#dcl.init.list]) is required to convert the expression, the program is
ill-formed.

[enter:note]
[:en]
If an [~initializer-clause] is itself an initializer list, the member is
list-initialized, which will result in a recursive application of the rules in
this section if the member is an aggregate.
[exit:note]

[enter:example]
[codeblock]
struct A {
  int x;
  struct B {
    int i;
    int j;
  } b;
} a = { 1, { 2, 3 } };
[codeblock:end]

[:en]
initializes [`a.x] with 1, [`a.b.i] with 2, [`a.b.j] with 3.
[exit:example]

[para]
[:en]
An aggregate that is a class can also be initialized with a single expression
not enclosed in braces, as described in [#dcl.init].

[para]
[:en]
An array of unknown size initialized with a brace-enclosed [~initializer-list]
containing [`n] [~initializer-clause]s, where [`n] shall be greater than zero,
is defined as having [`n] elements ([#dcl.array]).

[enter:example]
[codeblock]
int x[] = { 1, 3, 5 };
[codeblock:end]

[:en]
declares and initializes [`x] as a one-dimensional array that has three elements
since no size was specified and there are three initializers.
[exit:example]

[:en]
An empty initializer list [`{}] shall not be used as the [~initializer-clause]
for an array of unknown bound.

[footnote]
[:en]
The syntax provides for empty [~initializer-list]s, but nonetheless [=Cpp] does
not have zero length arrays.
[footnote:end]

[para]
[:en]
Static data members and anonymous bit-fields are not considered members of the
class for purposes of aggregate initialization.

[enter:example]
[codeblock]
struct A {
  int i;
  static int s;
  int j;
  int :17;
  int k;
} a = { 1, 2, 3 };
[codeblock:end]

[:en]
Here, the second initializer 2 initializes [`a.j] and not the static data member
[`A::s], and the third initializer 3 initializes [`a.k] and not the anonymous
bit-field before it.
[exit:example]

[para]
[:en]
An [~initializer-list] is ill-formed if the number of [~initializer-clause]s 
exceeds the number of members or elements to initialize.

[enter:example]
[codeblock]
char cv[4] = { 'a', 's', 'd', 'f', 0 };     // [:en] error
[codeblock:end]

[:en]
is ill-formed.
[exit:example]

[para]
[:en]
If there are fewer [~initializer-clause]s in the list than there are members in
the aggregate, then each member not explicitly initialized shall be initialized
from its [~brace-or-equal-initializer] or, if there is no
[~brace-or-equal-initializer], from an empty initializer list
([#dcl.init.list]).

[enter:example]
[codeblock]
struct S { int a; const char* b; int c; int d = b[a]; };
S ss = { 1, "asdf" };
[codeblock:end]

[:en]
initializes [`ss.a] with 1, [`ss.b] with [`"asdf"], [`ss.c] with the value of an
expression of the form [`int{}] (that is, [`0]), and [`ss.d] with the value of
[`ss.b[ss.a`]] (that is, [`'s']), and in

[codeblock]
struct X { int i, j, k = 42; };
X a[] = { 1, 2, 3, 4, 5, 6 };
X b[2] = { { 1, 2, 3 }, { 4, 5, 6 } };
[codeblock:end]

[:en@~]
[`a] and [`b] have the same value
[exit:example]

[para]
[:en]
If a reference member is initialized from its [~brace-or-equal-initializer] and
a potentially-evaluated subexpression thereof is an aggregate initialization
that would use that [~brace-or-equal-initializer], the program is ill-formed.

[enter:example]
[codeblock]
  struct A;
  extern A a;
  struct A {
    const A& a1 { A{a,a} };   // OK
    const A& a2 { A{} };      // [:en] error
  };
  A a{a,a};                   // OK
[codeblock:end]
[exit:example]

[para]
[:en]
If an aggregate class [`C] contains a subaggregate member [`m] that has no
members for purposes of aggregate initialization, the [~initializer-clause] for
[`m] shall not be omitted from an [~initializer-list] for an object of type [`C]
unless the [~initializer-clause]s for all members of [`C] following [`m] are
also omitted.

[enter:example]
[codeblock]
struct S { } s;
struct A {
  S s1;
  int i1;
  S s2;
  int i2;
  S s3;
  int i3;
} a = {
  { },      // [:en] Required initialization
  0,
  s,        // [:en] Required initialization
  0
};          // [:en] Initialization not required for [`A::s3] because [`A::i3] is also not initialized
[codeblock:end]
[exit:example]

[para]
[:en]
If an incomplete or empty [~initializer-list] leaves a member of reference type
uninitialized, the program is ill-formed.

[para]
[:en]
When initializing a multi-dimensional array, the [~initializer-clause]s
initialize the elements with the last (rightmost) index of the array varying the
fastest ([#dcl.array]).

[enter:example]
[codeblock]
int x[2][2] = { 3, 1, 4, 2 };
[codeblock:end]

[:en@~]
initializes [`x[0`][0`]] to [`3], [`x[0`][1`]] to [`1], [`x[1`][0`]] to [`4],
and [`x[1`][1`]] to [`2].

[:en]
On the other hand,

[codeblock]
float y[4][3] = {
  { 1 }, { 2 }, { 3 }, { 4 }
};
[codeblock:end]

[:en@~]
initializes the first column of [`y] (regarded as a two-dimensional array) and
leaves the rest zero.
[exit:example]

[para]
[:en]
Braces can be elided in an [~initializer-list] as follows.

[:en]
If the [~initializer-list] begins with a left brace, then the succeeding
comma-separated list of [~initializer-clause]s initializes the members of a
subaggregate; it is erroneous for there to be more [~initializer-clause]s than
members.

[:en]
If, however, the [~initializer-list] for a subaggregate does not begin with a
left brace, then only enough [~initializer-clause]s from the list are taken to
initialize the members of the subaggregate; any remaining [~initializer-clause]s
are left to initialize the next member of the aggregate of which the current
subaggregate is a member.

[enter:example]
[codeblock]
float y[4][3] = {
  { 1, 3, 5 },
  { 2, 4, 6 },
  { 3, 5, 7 },
};
[codeblock:end]

[:en]
is a completely-braced initialization:

[:en]
1, 3, and 5 initialize the first row of the array [`y[0`]], namely [`y[0`][0`]],
[`y[0`][1`]], and [`y[0`][2`]].

[:en]
Likewise the next two lines initialize [`y[1`]] and [`y[2`]].

[:en]
The initializer ends early and therefore [`y[3`]]s elements are initialized as
if explicitly initialized with an expression of the form [`float()], that is,
are initialized with [`0.0].

[:en]
In the following example, braces in the [~initializer-list] are elided; however
the [~initializer-list] has the same effect as the completely-braced
[~initializer-list] of the above example,

[codeblock]
float y[4][3] = {
  1, 3, 5, 2, 4, 6, 3, 5, 7
};
[codeblock:end]

[:en]
The initializer for [`y] begins with a left brace, but the one for [`y[0`]] does
not, therefore three elements from the list are used.

[:en]
Likewise the next three are taken successively for [`y[1`]] and [`y[2`]].
[exit:example]

[para]
[:en]
All implicit type conversions (Clause [#conv]) are considered when initializing
the aggregate member with an [~assignment-expression].

[:en]
If the [~assignment-expression] can initialize a member, the member is
initialized.

[:en]
Otherwise, if the member is itself a subaggregate, brace elision is assumed and
the [~assignment-expression] is considered for the initialization of the first
member of the subaggregate.

[enter:note]
[:en]
As specified above, brace elision cannot apply to subaggregates with no members
for purposes of aggregate initialization; an [~initializer-clause] for the
entire subobject is required.
[exit:note]

[para:~]
[enter:example]
[codeblock]
struct A {
  int i;
  operator int();
};
struct B {
  A a1, a2;
  int z;
};
A a;
B b = { 4, a, a };
[codeblock:end]

[:en]
Braces are elided around the [~initializer-clause] for [`b.a1.i].

[:en]
[`b.a1.i] is initialized with 4, [`b.a2] is initialized with [`a], [`b.z] is
initialized with whatever [`a.operator int()] returns.
[exit:example]

[para]
[%  [:en] initialization[!array of class objects]]
[enter:note]
[:en]
An aggregate array or an aggregate class may contain members of a class type
with a user-provided constructor ([#class.ctor]).

[:en]
Initialization of these aggregate objects is described in [#class.expl.init].
[exit:note]

[para]
[enter:note]
[:en]
Whether the initialization of aggregates with static storage duration is static
or dynamic is specified in [#basic.start.init] and [#stmt.dcl].
[exit:note]

[para]
[:en]
[%initialization[![`union]]]
When a union is initialized with a brace-enclosed initializer, the braces shall
only contain an [~initializer-clause] for the first non-static data member of
the union.

[enter:example]
[codeblock]
union u { int a; const char* b; };
u a = { 1 };
u b = a;
u c = 1;                        // [:en] error
u d = { 0, "asdf" };            // [:en] error
u e = { "asdf" };               // [:en] error
[codeblock:end]
[exit:example]

[para]
[enter:note]
[:en]
As described above, the braces around the [~initializer-clause] for a union
member can be omitted if the union is a member of another aggregate.
[exit:note]
