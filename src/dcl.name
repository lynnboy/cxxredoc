[section#dcl.name
    [:en] Type names
    [:zh_CN] 类型名
]

[para]
[:en]
[%type name]
To specify type conversions explicitly, [%operator[!cast]] and as an argument of
[`sizeof], [`alignof], [`new], or [`typeid], the name of a type shall be
specified.
[:zh_CN]
[%类型名]
当显式指定类型转换[%运算符[!强制转换～]]时，或者提供 [`sizeof]、[`alignof]、
[`new] 或 [`typeid] 的实参时，应该指定类型的名字。

[:en]
This can be done with a [~type-id], which is syntactically a declaration for a
variable or function of that type that omits the name of the entity.
[:zh_CN]
这可以用 [~类型标识]做到，它在语法上是变量或函数的声明式，旦省略了实体的名字。

[syntax]
[rule type-id [:zh_CN] 类型标识 ]
    [| type-specifier-seq [~:opt abstract-declarator] ]
[rule:end]

[rule abstract-declarator [:zh_CN] 抽象声明符 ]
    [| ptr-abstract-declarator ]
    [| [~:opt noptr-abstract-declarator] parameters-and-qualifiers
        trailing-return-type ]
    [| abstract-pack-declarator ]
[rule:end]

[rule ptr-abstract-declarator [:zh_CN] 指针抽象声明符 ]
    [| noptr-abstract-declarator ]
    [| ptr-operator [~:opt ptr-abstract-declarator] ]
[rule:end]

[rule noptr-abstract-declarator [:zh_CN] 非指针抽象声明符 ]
    [| [~:opt noptr-abstract-declarator] parameters-and-qualifiers ]
    [| [~:opt noptr-abstract-declarator] [`[] [~:opt constant-expression] [``]]
        [~:opt attribute-specifier-seq] ]
    [| [`(] ptr-abstract-declarator [`)] ]
[rule:end]

[rule abstract-pack-declarator [:zh_CN] 抽象包组声明符 ]
    [| noptr-abstract-pack-declarator ]
    [| ptr-operator abstract-pack-declarator ]
[rule:end]

[rule noptr-abstract-pack-declarator [:zh_CN] 非指针抽象包组声明符 ]
    [| noptr-abstract-pack-declarator parameters-and-qualifiers ]
    [| noptr-abstract-pack-declarator [`[] [~:opt constant-expression] [``]]
        [~:opt attribute-specifier-seq] ]
    [| [`...] ]
[rule:end]
[syntax:end]

[:en]
It is possible to identify uniquely the location in the [~abstract-declarator]
where the identifier would appear if the construction were a declarator in a
declaration.
[:zh_CN]
[~抽象声明符]中，能够唯一地指定一个位置，使得当这个语言构造变为某个声明式中的
声明符时，就是标识符应当出现的位置。

[:en]
The named type is then the same as the type of the hypothetical identifier.
[:zh_CN]
所指名的类型与这个假定的标识符的类型相同。

[enter:example]
[%  [:en] example[!type name]
    [:zh_CN] 示例[!类型名] ]
[%  [:en] example[!declarator]
    [:zh_CN] 示例[!声明符] ]
[codeblock]
int                 // [`int i]
int *               // [`int *pi]
int *[3]            // [`int *p[3`]]
int (*)[3]          // [`int (*p3i)[3`]]
int *()             // [`int *f()]
int (*)(double)     // [`int (*pf)(double)]
[codeblock:end]

[:en]
name respectively the types ["[`int],] ["pointer to [`int],] ["array of
3 pointers to [`int],] ["pointer to array of 3 [`int],] ["function of
(no parameters) returning pointer to [`int],] and ["pointer to a function of
([`double]) returning [`int].]
[:zh_CN]
分别指名了类型“[`int]”、“[`int] 的指针”、“3 个 [`int] 的指针的数组”、“指向 3 个
[`int] 的数组的指针”、“返回 [`int] 的指针的(无形参)函数”和“指向返回 [`int] 的
([`double])函数的指针”。
[exit:example]

[para]
[:en]
A type can also be named (often more easily) by using a [+typedef]
([#dcl.typedef]).
[:zh_CN]
还可以（通常更便利地）用 [+typedef]（[#dcl.typedef]）来指名类型。
