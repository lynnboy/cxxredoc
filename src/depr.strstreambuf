[section#depr.strstreambuf
    [:en] Class [`strstreambuf]
]

[%@library strstreambuf]
[codeblock:synopsis]
namespace std {
  class strstreambuf : public basic_streambuf<char> {
  public:
    explicit strstreambuf(streamsize alsize_arg = 0);
    strstreambuf(void* (*palloc_arg)(size_t), void (*pfree_arg)(void*));
    strstreambuf(char* gnext_arg, streamsize n, char* pbeg_arg = 0);
    strstreambuf(const char* gnext_arg, streamsize n);

    strstreambuf(signed char* gnext_arg, streamsize n,
                 signed char* pbeg_arg = 0);
    strstreambuf(const signed char* gnext_arg, streamsize n);
    strstreambuf(unsigned char* gnext_arg, streamsize n,
                 unsigned char* pbeg_arg = 0);
    strstreambuf(const unsigned char* gnext_arg, streamsize n);

    virtual ~strstreambuf();

    void  freeze(bool freezefl = true);
    char* str();
    int   pcount();

  protected:
    virtual int_type overflow (int_type c = EOF);
    virtual int_type pbackfail(int_type c = EOF);
    virtual int_type underflow();
    virtual pos_type seekoff(off_type off, ios_base::seekdir way,
                             ios_base::openmode which
                               = ios_base::in | ios_base::out);
    virtual pos_type seekpos(pos_type sp, ios_base::openmode which
                               = ios_base::in | ios_base::out);
    virtual streambuf* setbuf(char* s, streamsize n);

  private:
    typedef T1 strstate;              // [=Expos]
    static const strstate allocated;  // [=Expos]
    static const strstate constant;   // [=Expos]
    static const strstate dynamic;    // [=Expos]
    static const strstate frozen;     // [=Expos]
    strstate strmode;                 // [=Expos]
    streamsize alsize;                // [=Expos]
    void* (*palloc)(size_t);          // [=Expos]
    void (*pfree)(void*);             // [=Expos]
  };
}
[codeblock:end]

[para]
[:en] The class [`strstreambuf] associates the input sequence, and possibly the
output sequence, with an object of some [+character] array type, whose elements
store arbitrary values.

[:en] The array object has several attributes.

[para]
[enter:note]
[:en] For the sake of exposition, these are represented as elements of a bitmask
type (indicated here as [`T1]) called [`strstate].

[:en] The elements are:

[list]
[item]
[:en] [`allocated], set when a dynamic array object has been allocated, and
hence should be freed by the destructor for the [`strstreambuf] object;
[item]
[:en] [`constant], set when the array object has [`const] elements, so the
output sequence cannot be written;
[item]
[:en] [`dynamic], set when the array object is allocated (or reallocated) as
necessary to hold a character sequence that can change in length;
[item]
[:en] [`frozen], set when the program has requested that the array object not be
altered, reallocated, or freed.
[list:end]
[exit:note]

[para]
[enter:note]
[:en] For the sake of exposition, the maintained data is presented here as:

[list]
[item]
[:en] [`strstate strmode], the attributes of the array object associated with
the [`strstreambuf] object;
[item]
[:en] [`int alsize], the suggested minimum size for a dynamic array object;
[item]
[:en] [`void* (*palloc)(size_t)], points to the function to call to allocate
a dynamic array object;
[item]
[:en] [`void (*pfree)(void*)], points to the function to call to free a dynamic
array object.
[list:end]
[exit:note]

[para]
[:en] Each object of class [`strstreambuf] has a [+seekable area], delimited by
the pointers [`seeklow] and [`seekhigh].

[:en] If [`gnext] is a null pointer, the seekable area is undefined.

[:en] Otherwise, [`seeklow] equals [`gbeg] and [`seekhigh] is either [`pend], if
[`pend] is not a null pointer, or [`gend].

[include depr.strstreambuf.cons]

[include depr.strstreambuf.members]

[include depr.strstreambuf.virtuals]
