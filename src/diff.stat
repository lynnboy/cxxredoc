[section#diff.stat
    [:en] Clause [#stmt.stmt]: statements
]

[#stmt.switch], [#stmt.goto]
[para:change]
[:en] It is now invalid to jump past a declaration with explicit or implicit
initializer (except across entire block not entered)
[para:rationale]
[:en] Constructors used in initializers may allocate resources which need to be
de-allocated upon leaving the block.
[:en] Allowing jump past initializers would require complicated run-time
determination of allocation.
[:en] Furthermore, any use of the uninitialized object could be a disaster.
[:en] With this simple compile-time rule, [=Cpp] assures that if an initialized
variable is in scope, then it has assuredly been initialized.
[para:effect]
[:en] Deletion of semantically well-defined feature.
[para:difficulty]
[:en] Semantic transformation.
[para:howwide]
[:en] Seldom.

[para:~]
[#stmt.return]
[para:change]
[:en] It is now invalid to return (explicitly or implicitly) from a function
which is declared to return a value without actually returning a value
[para:rationale]
[:en] The caller and callee may assume fairly elaborate return-value mechanisms
for the return of class objects.
[:en] If some flow paths execute a return without specifying any value, the
implementation must embody many more complications.
[:en] Besides, promising to return a value of a given type, and then not
returning such a value, has always been recognized to be a questionable
practice, tolerated only because very-old C had no distinction between [`void]
functions and [`int] functions.
[para:effect]
[:en] Deletion of semantically well-defined feature.
[para:difficulty]
[:en] Semantic transformation.
[:en] Add an appropriate return value to the source code, such as zero.
[para:howwide]
[:en] Seldom.
[:en] For several years, many existing C implementations have produced warnings
in this case.
