[section#except.handle
    [:en] Handling an exception
]

[%:begin#exception.handling.handler
    [:en] exception handling [!handler]
]

[para]
[:en]
The [~exception-declaration] in a [+handler] describes the type(s) of exceptions
that can cause that [+handler] to be entered.

[:en]
[%exception handling[!handler[!incomplete type in]]]
[%exception handling[!handler[!rvalue reference in]]]
[%exception handling[!handler[!array in]]]
[%exception handling[!handler[!pointer to function in]]]
The [~exception-declaration] shall not denote an incomplete type, an abstract
class type, or an rvalue reference type.

[:en]
The [~exception-declaration] shall not denote a pointer or reference to an
incomplete type, other than [`void*], [`const void*], [`volatile void*], or
[`const volatile void*].

[para]
[:en]
A handler of type ["array of [`T]] or ["function returning [`T]] is adjusted to
be of type ["pointer to [`T]] or ["pointer to function returning [`T]],
respectively.

[%:begin#exception.handling.handler.match
    [:en] exception handling [!handler [!match]]
]

[para]
[:en]
A [+handler] is a match for an exception object of type [`E] if

[list]
[item]
[:en]
The [+handler] is of type [$cv] [`T] or [$cv] [`T&] and [`E] and [`T] are the
same type (ignoring the top-level [~cv-qualifier]s), or

[item]
[:en]
the [+handler] is of type [$cv] [`T] or [$cv] [`T&] and [`T] is an unambiguous
public base class of [`E], or

[item]
[:en]
the [+handler] is of type [$cv] [`T] or [`const T&] where [`T] is a pointer type
and [`E] is a pointer type that can be converted to [`T] by either or both of

[list]
[item]
[:en@~] a standard pointer conversion ([#conv.ptr]) not involving conversions to
pointers to private or protected or ambiguous classes
[item]
[:en@~] a qualification conversion, or
[list:end]

[item]
[:en]
the [+handler] is of type [$cv] [`T] or [`const T&] where [`T] is a pointer or
pointer to member type and [`E] is [`std::nullptr_t].
[list:end]

[enter:note]
[:en]
A [~throw-expression] whose operand is an integer literal with value zero does
not match a handler of pointer or pointer to member type.
[exit:note]

[para:~]
[enter:example]
[codeblock]
class Matherr { /* ... */ virtual void vf(); };
class Overflow: public Matherr { /* ... */ };
class Underflow: public Matherr { /* ... */ };
class Zerodivide: public Matherr { /* ... */ };

void f() {
  try {
    g();
  } catch (Overflow oo) {
        // ...
  } catch (Matherr mm) {
        // ...
  }
}
[codeblock:end]

[:en]
Here, the [`Overflow] handler will catch exceptions of type [`Overflow] and the
[`Matherr] handler will catch exceptions of type [`Matherr] and of all types
publicly derived from [`Matherr] including exceptions of type [`Underflow] and
[`Zerodivide].
[exit:example]

[para]
[:en]
The handlers for a try block are tried in order of appearance.

[:en]
That makes it possible to write handlers that can never be executed, for example
by placing a handler for a derived class after a handler for a corresponding
base class.

[para]
[:en]
A [`...] in a handler[=']s [~exception-declaration] functions similarly to
[`...] in a function parameter declaration; it specifies a match for any
exception.

[:en]
If present, a [`...] handler shall be the last handler for its try block.

[para]
[:en]
If no match is found among the handlers for a try block, the search for a
matching handler continues in a dynamically surrounding try block of the same
thread.

[para]
[:en]
A handler is considered active when initialization is complete for the parameter
(if any) of the catch clause.

[enter:note]
[:en]
The stack will have been unwound at that point.
[exit:note]

[:en]
Also, an implicit handler is considered active when [`std::terminate()] or
[`std::unexpected()] is entered due to a throw.

[:en]
A handler is no longer considered active when the catch clause exits or when
[`std::unexpected()] exits after being entered due to a throw.

[para]
[:en]
The exception with the most recently activated handler that is still active is
called the [+currently handled exception].

[para]
[:en]
If no matching handler is found, the function [`std::terminate()] is called;
whether or not the stack is unwound before this call to [`std::terminate()] is
[%@impldef stack unwinding before call to [`std::terminate()]]
implementation-defined ([#except.terminate]).

[para]
[:en]
Referring to any non-static member or base class of an object in the handler for
a [~function-try-block] of a constructor or destructor for that object results
in undefined behavior.

[para]
[:en]
The scope and lifetime of the parameters of a function or constructor extend
into the handlers of a [~function-try-block].

[para]
[:en]
Exceptions thrown in destructors of objects with static storage duration or in
constructors of namespace-scope objects with static storage duration are not
caught by a [~function-try-block] on [`main()].

[:en]
Exceptions thrown in destructors of objects with thread storage duration or in
constructors of namespace-scope objects with thread storage duration are not
caught by a [~function-try-block] on the initial function of the thread.

[para]
[:en]
If a return statement appears in a handler of the [~function-try-block] of a
constructor, the program is ill-formed.

[para]
[:en]
The currently handled exception is rethrown if control reaches the end of a
handler of the [~function-try-block] of a constructor or destructor.

[:en]
Otherwise, a function returns when control reaches the end of a handler for the
[~function-try-block] ([#stmt.return]).

[:en]
Flowing off the end of a [~function-try-block] is equivalent to a [`return] with
no value; this results in undefined behavior in a value-returning function
([#stmt.return]).

[para]
[:en]
The variable declared by the [~exception-declaration], of type [$cv] [`T] or
[$cv] [`T&], is initialized from the exception object, of type [`E], as follows:

[list]
[item]
[:en@~] if [`T] is a base class of [`E], the variable is copy-initialized
([#dcl.init]) from the corresponding base class subobject of the exception
object;
[item]
[:en@~] otherwise, the variable is copy-initialized ([#dcl.init]) from the
exception object.
[list:end]

[:en]
The lifetime of the variable ends when the handler exits, after the destruction
of any automatic objects initialized within the handler.

[para]
[:en]
When the handler declares an object, any changes to that object will not affect
the exception object.

[:en]
When the handler declares a reference to an object, any changes to the
referenced object are changes to the exception object and will have effect
should that object be rethrown.

[%:end#exception.handling.handler.match]

[%:end#exception.handling.handler]
