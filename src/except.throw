[section#except.throw
    [:en] Throwing an exception
]
[%[:en] exception handling[!throwing]
]
[%[:en] throwing [see exception handling[!throwing]]
]

[para]
[:en]
Throwing an exception transfers control to a handler.

[enter:note]
[:en]
An exception can be thrown from one of the following contexts:
[~throw-expression]s ([#expr.throw]), allocation functions
([#basic.stc.dynamic.allocation]), [`dynamic_cast] ([#expr.dynamic.cast]),
[`typeid] ([#expr.typeid]), [~new-expression]s ([#expr.new]), and standard
library functions ([#structure.specifications]).
[exit:note]

[:en]
An object is passed and the type of that object determines which handlers can
catch it.

[enter:example]
[codeblock]
throw "Help!";
[codeblock:end]

[:en]
can be caught by a [+handler] of [`const char*] type:

[codeblock]
try {
    // ...
}
catch(const char* p) {
    // [:en] handle character string exceptions here
}
[codeblock:end]

[:en@~]
and

[codeblock]
class Overflow {
public:
    Overflow(char,double,double);
};

void f(double x) {
    throw Overflow('+',x,3.45e107);
}
[codeblock:end]

[:en@~]
can be caught by a handler for exceptions of type [`Overflow]

[codeblock]
try {
    f(1.2);
} catch(Overflow& oo) {
    // [:en] handle exceptions of type [`Overflow] here
}
[codeblock:end]
[exit:example]

[para]
[:en]
[%exception handling[!throwing]]
[%exception handling[!handler]]
[%exception handling[!nearest handler]]
When an exception is thrown, control is transferred to the nearest handler with
a matching type ([#except.handle]); ["nearest] means the handler for which the
[~compound-statement] or [~ctor-initializer] following the [`try] keyword was
most recently entered by the thread of control and not yet exited.

[para]
[:en]
Throwing an exception copy-initializes ([#dcl.init], [#class.copy]) a temporary
object, called the [%exception handling[!exception object]][+exception object].

[:en]
The temporary is an lvalue and is used to initialize the variable declared in
the matching [+handler] ([#except.handle]).

[:en]
If the type of the exception object would be an incomplete type or a pointer to
an incomplete type other than (possibly cv-qualified) [`void] the program is
ill-formed.

[para]
[:en]
[%exception handling[!memory]]
[%exception handling[!rethrowing]]
[%exception handling[!exception object]]
The memory for the exception object is allocated in an unspecified way, except
as noted in [#basic.stc.dynamic.allocation}.

[:en]
If a handler exits by rethrowing, control is passed to another handler for the
same exception.

[:en]
The exception object is destroyed after either the last remaining active handler
for the exception exits by any means other than rethrowing, or the last object
of type [`std::exception_ptr] ([#propagation]) that refers to the exception
object is destroyed, whichever is later.

[:en]
In the former case, the destruction occurs when the handler exits, immediately
after the destruction of the object declared in the [~exception-declaration] in
the handler, if any.

[:en]
In the latter case, the destruction occurs before the destructor of
[`std::exception_ptr] returns.

[:en]
The implementation may then deallocate the memory for the exception object; any
such deallocation is done in an unspecified way.

[enter:note]
[:en]
a thrown exception does not propagate to other threads unless caught, stored,
and rethrown using appropriate library functions; see [#propagation] and
[#futures].
[exit:note]

[para]
[:en]
[%exception handling[!exception object[!constructor]]]
[%exception handling[!exception object[!destructor]]]
When the thrown object is a class object, the constructor selected for the
copy-initialization and the destructor shall be accessible, even if the
copy/move operation is elided ([#class.copy]).

[para]
[:en]
[%exception handling[!rethrow]]
[%rethrow[see exception handling[!rethrow]]]
[%reraise[see exception handling[!rethrow]]]
An exception is considered caught when a handler for that exception becomes
active ([#except.handle]).

[enter:note]
[:en]
An exception can have active handlers and still be considered uncaught if it is
rethrown.
[exit:note]

[para]
[:en]
[%exception handling[![`terminate()] called]]
[%[`terminate()][!called]]
If the exception handling mechanism, after completing the initialization of the
exception object but before the activation of a handler for the exception, calls
a function that exits via an exception, [`std::terminate] is called
([#except.terminate]).

[enter:example]
[codeblock]
struct C {
  C() { }
  C(const C&) {
    if (std::uncaught_exceptions()) {
      throw 0;      // [:en] throw during copy to handler[=']s [~exception-declaration] object ([#except.handle])
    }
  }
};

int main() {
  try {
    throw C();      // [:en] calls [`std::terminate()] if construction of the handler[=']s
                    // [:en@~] [~exception-declaration] object is not elided ([#class.copy])
  } catch(C) { }
}
[codeblock:end]
[exit:example]
