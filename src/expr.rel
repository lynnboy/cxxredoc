[section#expr.rel
    [:en] Relational operators
    [:zh_CN]
]

[:en]
[%expression[!relational operators]]
[%operator[!relational]]

[para]
[:en]
The relational operators group left-to-right.

[enter:example]
[:en]
[`a<b<c] means [`(a<b)<c] and [em not] [`(a<b)&&(b<c)].
[exit:example]

[:en]
[%operator[!less than]]
[%[`<][see less than operator]]
[%operator[!greater than]]
[%[`>][see greater than operator]]
[%operator[!less than or equal to]]
[%[`<=][see less than or equal to operator]]
[%operator[!greater than or equal to]]
[%[`>=][see greater than or equal operator]]

[syntax]
[rule relational-expression ]
    [| shift-expression ]
    [| relational-expression [`<] shift-expression ]
    [| relational-expression [`>] shift-expression ]
    [| relational-expression [`<=] shift-expression ]
    [| relational-expression [`>=] shift-expression ]
[rule:end]
[syntax:end]

[:en]
The operands shall have arithmetic, enumeration, or pointer type.

[:en]
The operators [`<] (less than), [`>] (greater than), [`<=] (less than or equal
to), and [`>=] (greater than or equal to) all yield [`false] or [`true].

[:en]
The type of the result is [`bool].

[para]
[:en]
The usual arithmetic conversions are performed on operands of arithmetic or
enumeration type.

[:en]
If both operands are pointers, pointer conversions ([#conv.ptr]) and
qualification conversions ([#conv.qual]) are performed to bring them to their
composite pointer type (Clause [#expr]).

[:en]
After conversions, the operands shall have the same type.

[para]
[:en]
Comparing pointers to objects

[footnote]
[:en]
An object that is not an array element is considered to belong to a
single-element array for this purpose; see [#expr.unary.op].
[footnote:end]

[:en@~]
is defined as follows:

[list]
[item]
[:en]
If two pointers point to different elements of the same array, or to subobjects
thereof, the pointer to the element with the higher subscript compares greater.

[item]
[:en]
If one pointer points to an element of an array, or to a subobject thereof, and
another pointer points one past the last element of the array, the latter
pointer compares greater.

[item]
[:en]
If two pointers point to different non-static data members of the same object,
or to subobjects of such members, recursively, the pointer to the later declared
member compares greater provided the two members have the same access control
(Clause [#class.access]) and provided their class is not a union.
[list:end]

[para]
[:en]
If two operands [`p] and [`q] compare equal ([#expr.eq]), [`p<=q] and [`p>=q]
both yield [`true] and [`p<q] and [`p>q] both yield [`false].

[:en]
Otherwise, if a pointer [`p] compares greater than a pointer [`q], [`p>=q],
[`p>q], [`q<=p], and [`q<p] all yield [`true] and [`p<=q], [`p<q], [`q>=p], and
[`q>p] all yield [`false].

[:en]
Otherwise, the result of each of the operators is unspecified.

[para]
[:en]
If both operands (after conversions) are of arithmetic or enumeration type, each
of the operators shall yield [`true] if the specified relationship is true and
[`false] if it is false.
