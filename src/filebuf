[section#filebuf
    [:en] Class template [`basic_filebuf]
]

[%@library basic_filebuf]
[codeblock:synopsis]
namespace std {
  template <class charT, class traits = char_traits<charT> >
  class basic_filebuf : public basic_streambuf<charT,traits> {
  public:
    typedef charT                     char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;
    typedef traits                    traits_type;

    // [:en] [#filebuf.cons] Constructors/destructor:
    basic_filebuf();
    basic_filebuf(const basic_filebuf& rhs) = delete;
    basic_filebuf(basic_filebuf&& rhs);
    virtual ~basic_filebuf();

    // [:en] [#filebuf.assign] Assign/swap:
    basic_filebuf& operator=(const basic_filebuf& rhs) = delete;
    basic_filebuf& operator=(basic_filebuf&& rhs);
    void swap(basic_filebuf& rhs);

     // [:en] [#filebuf.members] Members:
    bool is_open() const;
    basic_filebuf<charT,traits>* open(const char* s,
        ios_base::openmode mode);
    basic_filebuf<charT,traits>* open(const string& s,
        ios_base::openmode mode);
    basic_filebuf<charT,traits>* close();

  protected:
    // [:en] [#filebuf.virtuals] Overridden virtual functions:
    virtual streamsize showmanyc();
    virtual int_type underflow();
    virtual int_type uflow();
    virtual int_type pbackfail(int_type c = traits::eof());
    virtual int_type overflow (int_type c = traits::eof());

    virtual basic_streambuf<charT,traits>*
        setbuf(char_type* s, streamsize n);
    virtual pos_type seekoff(off_type off, ios_base::seekdir way,
        ios_base::openmode which = ios_base::in | ios_base::out);
    virtual pos_type seekpos(pos_type sp,
        ios_base::openmode which = ios_base::in | ios_base::out);
    virtual int      sync();
    virtual void     imbue(const locale& loc);
  };

  template <class charT, class traits>
  void swap(basic_filebuf<charT, traits>& x,
            basic_filebuf<charT, traits>& y);
}
[codeblock:end]

[para]
[:en] The class [`basic_filebuf<charT,traits>] associates both the input
sequence and the output sequence with a file.

[para]
[:en] The restrictions on reading and writing a sequence controlled by an object
of class [`basic_filebuf<charT, traits>] are the same as for reading and writing
with the Standard C library [`FILE]s.

[para]
[:en] In particular:

[list]
[item]
[:en] If the file is not open for reading the input sequence cannot be read.
[item]
[:en] If the file is not open for writing the output sequence cannot be written.
[item]
[:en] A joint file position is maintained for both the input sequence and the
output sequence.
[list:end]

[para]
[:en] An instance of [`basic_filebuf] behaves as described in [#filebuf]
provided [`traits::pos_type] is [`fpos<traits::state_type>].

[:en] Otherwise the behavior is undefined.

[para]
[:en] In order to support file I/O and multibyte/wide character conversion,
conversions are performed using members of a facet, referred to as [`a_codecvt]
in following sections, obtained as if by

[codeblock:notation]
const codecvt<charT,char,typename traits::state_type>& a_codecvt =
  use_facet<codecvt<charT,char,typename traits::state_type> >(getloc());
[codeblock:end]
