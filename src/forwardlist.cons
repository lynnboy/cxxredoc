[section#forwardlist.cons
    [:en] [`forward_list] constructors, copy, assignment
]

[%@library forward_list[!forward_list]]
[%@library forward_list[!forward_list]]
[codeblock:declaration]
explicit forward_list(const Allocator&);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an empty [`forward_list] object using the specified allocator.

[para:complexity]
[:en] Constant.
[exit:description]

[%@library forward_list[!forward_list]]
[%@library forward_list[!forward_list]]
[codeblock:declaration]
explicit forward_list(size_type n, const Allocator& = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`forward_list] object with [`n] default-inserted elements
using the specified allocator.

[para:requires]
[:en] [`T] shall be [`DefaultInsertable] into [`*this].

[para:complexity]
[:en] Linear in [`n].
[exit:description]

[%@library forward_list[!forward_list]]
[%@library forward_list[!forward_list]]
[codeblock:declaration]
forward_list(size_type n, const T& value, const Allocator& = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`forward_list] object with [`n] copies of [`value] using the
specified allocator.

[para:requires]
[:en] [`T] shall be [`CopyInsertable] into [`*this].

[para:complexity]
[:en] Linear in [`n].
[exit:description]

[%@library forward_list[!forward_list]]
[%@library forward_list[!forward_list]]
[codeblock:declaration]
template <class InputIterator>
  forward_list(InputIterator first, InputIterator last, const Allocator& = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`forward_list] object equal to the range
[=range[first,last)].

[para:complexity]
[:en] Linear in [`distance(first, last)].
[exit:description]
