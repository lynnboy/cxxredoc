[section#func.bind.isbind
    [:en] Class template [`is_bind_expression]
]

[%@library is_bind_expression]
[codeblock:synopsis]
namespace std {
  template<class T> struct is_bind_expression; // [:en] see below
}
[codeblock:end]

[para]
[:en]
[`is_bind_expression] can be used to detect function objects generated by
[`bind].

[:en]
[`bind] uses [`is_bind_expression] to detect subexpressions.

[para]
[:en]
Instantiations of the [`is_bind_expression] template shall meet the
UnaryTypeTrait requirements ([#meta.rqmts]).

[:en]
The implementation shall provide a definition that has a BaseCharacteristic of
[`true_type] if [`T] is a type returned from [`bind], otherwise it shall have a
BaseCharacteristic of [`false_type].

[:en]
A program may specialize this template for a user-defined type [`T] to have a
BaseCharacteristic of [`true_type] to indicate that [`T] should be treated as a
subexpression in a [`bind] call.
