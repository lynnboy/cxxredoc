[section#function.objects
    [:en] Function objects
    [:zh_CN] 函数对象
]

[para]
[:en]
A [def function object type [% function object[!type]]] is an object type
([#basic.types]) that can be the type of the [~postfix-expression] in a function
call ([#expr.call], [#over.match.call]).
[:zh_CN]
[def 函数对象类型[%函数对象[!～类型]]]是可以用作函数调用（[#expr.call，
[#over.match.call]）中的[~后缀表达式]的类型的对象类型（[#basic.types]）。

[footnote]
[:en]
Such a type is a function pointer or a class type which has a member
[`operator()] or a class type which has a conversion to a pointer to function.
[:zh_CN]
这种类型是函数指针，或者带有成员 [`operator()] 的类类型，或者带有向函数指针的
转换的类类型。
[footnote:end]

[:en]
A [def function object] is an object of a function object type.
[:zh_CN]
[def 函数对象]是具有函数对象类型的对象。

[:en]
In the places where one would expect to pass a pointer to a function to an
algorithmic template (Clause [#algorithms]), the interface is specified to
accept a function object.
[:zh_CN]
在预期可以向算法模板（第 [#algorithms] 条）传递指向某函数的指针之处，该接口就被
指定为接受一个函数对象。

[:en]
This not only makes algorithmic templates work with pointers to functions, but
also enables them to work with arbitrary function objects.
[:zh_CN]
这使得算法模板不仅可以用函数指针进行工作，也使它们可以用任意函数对象来工作。

[para] [para:synopsis]
[:en] Header [`<functional>] synopsis
[:zh_CN] 头文件 [`<functional>] 纲要

[%@library <functional> [sortas functional]]
[codeblock:synopsis [special unspecified] ]
namespace std {
  // [:en] [#func.invoke], invoke:
  // [|:zh_CN] [#func.invoke]，invoke：
  template <class F, class... Args> result_of_t<F&&(Args&&...)> invoke(F&& f, Args&&... args);

  // [:en] [#refwrap], reference_wrapper:
  // [|:zh_CN] [#refwrap]，reference_wrapper：
  template <class T> class reference_wrapper;

  template <class T> reference_wrapper<T> ref(T&) noexcept;
  template <class T> reference_wrapper<const T> cref(const T&) noexcept;
  template <class T> void ref(const T&&) = delete;
  template <class T> void cref(const T&&) = delete;

  template <class T> reference_wrapper<T> ref(reference_wrapper<T>) noexcept;
  template <class T> reference_wrapper<const T> cref(reference_wrapper<T>) noexcept;

  // [:en] [#arithmetic.operations], arithmetic operations:
  // [|:zh_CN] [#arithmetic.operations]，算术操作：
  template <class T = void> struct plus;
  template <class T = void> struct minus;
  template <class T = void> struct multiplies;
  template <class T = void> struct divides;
  template <class T = void> struct modulus;
  template <class T = void> struct negate;
  template <> struct plus<void>;
  template <> struct minus<void>;
  template <> struct multiplies<void>;
  template <> struct divides<void>;
  template <> struct modulus<void>;
  template <> struct negate<void>;

  // [:en] [#comparisons], comparisons:
  // [|:zh_CN] [#comparisons]，比较：
  template <class T = void> struct equal_to;
  template <class T = void> struct not_equal_to;
  template <class T = void> struct greater;
  template <class T = void> struct less;
  template <class T = void> struct greater_equal;
  template <class T = void> struct less_equal;
  template <> struct equal_to<void>;
  template <> struct not_equal_to<void>;
  template <> struct greater<void>;
  template <> struct less<void>;
  template <> struct greater_equal<void>;
  template <> struct less_equal<void>;

  // [:en] [#logical.operations], logical operations:
  // [|:zh_CN] [#logical.operations]，逻辑操作：
  template <class T = void> struct logical_and;
  template <class T = void> struct logical_or;
  template <class T = void> struct logical_not;
  template <> struct logical_and<void>;
  template <> struct logical_or<void>;
  template <> struct logical_not<void>;

  // [:en] [#bitwise.operations], bitwise operations:
  // [|:zh_CN] [#bitwise.operations]，按位操作：
  template <class T = void> struct bit_and;
  template <class T = void> struct bit_or;
  template <class T = void> struct bit_xor;
  template <class T = void> struct bit_not;
  template <> struct bit_and<void>;
  template <> struct bit_or<void>;
  template <> struct bit_xor<void>;
  template <> struct bit_not<void>;

  // [:en] [#negators], negators:
  // [|:zh_CN] [#negators]，求反器：
  template <class Predicate> class unary_negate;
  template <class Predicate>
    constexpr unary_negate<Predicate> not1(const Predicate&);
  template <class Predicate> class binary_negate;
  template <class Predicate>
    constexpr binary_negate<Predicate> not2(const Predicate&);

  // [:en] [#func.bind], bind:
  // [|:zh_CN] [#func.bind]，bind：
  template<class T> struct is_bind_expression;
  template<class T> struct is_placeholder;

  template<class F, class... BoundArgs>
    unspecified bind(F&&, BoundArgs&&...);
  template<class R, class F, class... BoundArgs>
    unspecified bind(F&&, BoundArgs&&...);

  namespace placeholders {
    // [:en] M is the implementation-defined number of placeholders
    // [|:zh_CN] M 是由实现定义的占位符的数量
    extern unspecified _1;
    extern unspecified _2;
                .
                .
                .
    extern unspecified _M;
  }

  // [:en] [#func.memfn], member function adaptors:
  // [|:zh_CN] [#func.memfn]，成员函数适配器：
  template<class R, class T> unspecified mem_fn(R T::*);

  // [:en] [#func.wrap] polymorphic function wrappers:
  // [|:zh_CN] [#func.wrap] 多态的函数包装器：
  class bad_function_call;

  template<class> class function; // [:en] undefined
                                  // [|:zh_CN] 未定义
  template<class R, class... ArgTypes> class function<R(ArgTypes...)>;

  template<class R, class... ArgTypes>
    void swap(function<R(ArgTypes...)>&, function<R(ArgTypes...)>&);

  template<class R, class... ArgTypes>
    bool operator==(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
  template<class R, class... ArgTypes>
    bool operator==(nullptr_t, const function<R(ArgTypes...)>&) noexcept;
  template<class R, class... ArgTypes>
    bool operator!=(const function<R(ArgTypes...)>&, nullptr_t) noexcept;
  template<class R, class... ArgTypes>
    bool operator!=(nullptr_t, const function<R(ArgTypes...)>&) noexcept;

  // [:en] [#unord.hash], hash function primary template:
  // [|:zh_CN] [#unord.hash]，hash 函数的主模板：
  template <class T> struct hash;

  // [:en] Hash function specializations
  // [|:zh_CN] hash 函数的特化式
  template <> struct hash<bool>;
  template <> struct hash<char>;
  template <> struct hash<signed char>;
  template <> struct hash<unsigned char>;
  template <> struct hash<char16_t>;
  template <> struct hash<char32_t>;
  template <> struct hash<wchar_t>;
  template <> struct hash<short>;
  template <> struct hash<unsigned short>;
  template <> struct hash<int>;
  template <> struct hash<unsigned int>;
  template <> struct hash<long>;
  template <> struct hash<long long>;
  template <> struct hash<unsigned long>;
  template <> struct hash<unsigned long long>;

  template <> struct hash<float>;
  template <> struct hash<double>;
  template <> struct hash<long double>;

  template<class T> struct hash<T*>;
}
[codeblock:end]

[para]
[enter:example]
[:en] If a [=Cpp] program wants to have a by-element addition of two vectors
[`a] and [`b] containing [`double] and put the result into [`a], it can do:
[:zh_CN] 若 [=Cpp] 程序想要对包含 [`double] 的两个 [`vector] [`a] 和 [`b] 进行
逐成员相加并将结果放入 [`a]，则它可以：

[codeblock]
transform(a.begin(), a.end(), b.begin(), a.begin(), plus<double>());
[codeblock:end]
[exit:example]

[para]
[enter:example]
[:en] To negate every element of [`a]:
[:zh_CN] 为对 [`a] 的每个元素求反，可以：

[codeblock]
transform(a.begin(), a.end(), a.begin(), negate<double>());
[codeblock:end]
[exit:example]

[para]
[enter:note]
[:en]
To enable adaptors and other components to manipulate function objects that take
one or two arguments many of the function objects in this clause correspondingly
provide typedefs [`argument_type] and [`result_type] for function objects that
take one argument and [`first_argument_type], [`second_argument_type], and
[`result_type] for function objects that take two arguments.
[:zh_CN]
为能够使用适配器和操纵带有一个或两个实参的函数对象的其他组件，要求带有一个实参
的函数对象提供 typedef [`argument_type] 和 [`result_type] 而带有两个实参的函数
对象提供 [`first_argument_type]、[`second_argument_type] 和 [`result_type]。
[exit:note]

[include func.def]

[include func.require]

[include func.invoke]

[include refwrap]

[include arithmetic.operations]

[include comparisons]

[include logical.operations]

[include bitwise.operations]

[include negators]

[include func.bind]

[include func.memfn]

[include func.wrap]

[include unord.hash]
