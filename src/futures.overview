[section#futures.overview
    [:en] Overview
]

[para]
[:en] [#futures] describes components that a [=Cpp] program can use to retrieve
in one thread the result (value or exception) from a function that has run in
the same thread or another thread.

[enter:note]
[:en] These components are not restricted to multi-threaded programs but can be
useful in single-threaded programs as well.
[exit:note]

[para:synopsis]
[:en] Header [`<future>] synopsis

[codeblock:synopsis [special unspecified implementation-defined] ]
namespace std {
  enum class future_errc {
    broken_promise = implementation-defined,
    future_already_retrieved = implementation-defined,
    promise_already_satisfied = implementation-defined,
    no_state = implementation-defined
  };

  enum class launch : unspecified {
    async = unspecified,
    deferred = unspecified,
    implementation-defined
  };

  enum class future_status {
    ready,
    timeout,
    deferred
  };

  template <> struct is_error_code_enum<future_errc> : public true_type { };
  error_code make_error_code(future_errc e) noexcept;
  error_condition make_error_condition(future_errc e) noexcept;

  const error_category& future_category() noexcept;

  class future_error;

  template <class R> class promise;
  template <class R> class promise<R&>;
  template <> class promise<void>;

  template <class R>
    void swap(promise<R>& x, promise<R>& y) noexcept;

  template <class R, class Alloc>
    struct uses_allocator<promise<R>, Alloc>;

  template <class R> class future;
  template <class R> class future<R&>;
  template <> class future<void>;

  template <class R> class shared_future;
  template <class R> class shared_future<R&>;
  template <> class shared_future<void>;

  template <class> class packaged_task;   // [:en] undefined
  template <class R, class... ArgTypes>
    class packaged_task<R(ArgTypes...)>;

  template <class R, class... ArgTypes>
    void swap(packaged_task<R(ArgTypes...)>&, packaged_task<R(ArgTypes...)>&) noexcept;

  template <class R, class Alloc>
    struct uses_allocator<packaged_task<R>, Alloc>;

  template <class F, class... Args>
    future<result_of_t<decay_t<F>(decay_t<Args>...)>>
    async(F&& f, Args&&... args);
  template <class F, class... Args>
    future<result_of_t<decay_t<F>(decay_t<Args>...)>>
    async(launch policy, F&& f, Args&&... args);
}
[codeblock:end]

[para]
[:en] The [`enum] type [`launch] is a bitmask type ([#bitmask.types]) with
[`launch::async] and [`launch::deferred] denoting individual bits.

[enter:note]
[:en] Implementations can provide bitmasks to specify restrictions on task
interaction by functions launched by [`async()] applicable to a corresponding
subset of available launch policies. Implementations can extend the behavior of
the first overload of [`async()] by adding their extensions to the launch policy
under the ["as if] rule.
[exit:note]

[para]
[:en] The enum values of [`future_errc] are distinct and not zero.
