[section#futures.task
    [:en] Class template [`packaged_task]
]

[para]
[:en] The class template [`packaged_task] defines a type for wrapping a function
or callable object so that the return value of the function or callable object
is stored in a future when it is invoked.

[para]
[:en] When the [`packaged_task] object is invoked, its stored task is invoked
and the result (whether normal or exceptional) stored in the shared state.

[:en] Any futures that share the shared state will then be able to access the
stored result.

[codeblock:synopsis]
namespace std {
  template<class> class packaged_task; // [:en] undefined

  template<class R, class... ArgTypes>
  class packaged_task<R(ArgTypes...)> {
  public:
    // [:en] construction and destruction
    packaged_task() noexcept;
    template <class F>
      explicit packaged_task(F&& f);
    template <class F, class Allocator>
      explicit packaged_task(allocator_arg_t, const Allocator& a, F&& f);
    ~packaged_task();

    // [:en] no copy
    packaged_task(const packaged_task&) = delete;
    packaged_task& operator=(const packaged_task&) = delete;

    // [:en] move support
    packaged_task(packaged_task&& rhs) noexcept;
    packaged_task& operator=(packaged_task&& rhs) noexcept;
    void swap(packaged_task& other) noexcept;

    bool valid() const noexcept;

    // [:en] result retrieval
    future<R> get_future();        

    // [:en] execution
    void operator()(ArgTypes... );
    void make_ready_at_thread_exit(ArgTypes...);

    void reset();
  };
  template <class R, class... ArgTypes>
    void swap(packaged_task<R(ArgTypes...)>& x, packaged_task<R(ArgTypes...)>& y) noexcept;
  template <class R, class Alloc>
    struct uses_allocator<packaged_task<R>, Alloc>;
}
[codeblock:end]

[include futures.task.members]

[include futures.task.nonmembers]
