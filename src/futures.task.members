[section#futures.task.members
    [:en] [`packaged_task] member functions
]

[%@library packaged_task[![:en]constructor]]
[codeblock:declaration]
packaged_task() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] constructs a [`packaged_task] object with no shared state and no stored
task.
[exit:description]

[%@library packaged_task[![:en]constructor]]
[codeblock:declaration]
template <class F>
  packaged_task(F&& f);
template <class F, class Allocator>
  explicit packaged_task(allocator_arg_t, const Allocator& a, F&& f);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`[$INVOKE](f, t1, t2, ..., tN, R)], where [`t1, t2, ..., tN] are values
of the corresponding types in [`ArgTypes...], shall be a valid expression.

[:en] Invoking a copy of [`f] shall behave the same as invoking [`f].

[para:remarks]
[:en] These constructors shall not participate in overload resolution if
[`decay_t<F>] is the same type as [`std::packaged_task<R(ArgTypes...)>].

[para:effects]
[:en] constructs a new [`packaged_task] object with a shared state and
initializes the object[=']s stored task with [`std::forward<F>(f)].

[:en] The constructors that take an [`Allocator] argument use it to allocate
memory needed to store the internal data structures.

[para:throws]
[:en] any exceptions thrown by the copy or move constructor of [`f], or
[`std::bad_alloc] if memory for the internal data structures could not be
allocated.
[exit:description]

[%@library packaged_task[![:en]constructor]]
[codeblock:declaration]
packaged_task(packaged_task&& rhs) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] constructs a new [`packaged_task] object and transfers ownership of
[`rhs][=']s shared state to [`*this], leaving [`rhs] with no shared state.

[:en] Moves the stored task from [`rhs] to [`*this].

[para:postcondition]
[:en] [`rhs] has no shared state.
[exit:description]

[%@library packaged_task[!operator=]]
[%@library operator=[!packaged_task]]
[codeblock:declaration]
packaged_task& operator=(packaged_task&& rhs) noexcept;
[codeblock:end]

[enter:description]
[para:effects]

[list]
[item]
[:en] releases any shared state ([#futures.state]).
[item]
[:en] [`packaged_task(std::move(rhs)).swap(*this)].
[list:end]
[exit:description]

[%@library packaged_task[![:en]destructor]]
[codeblock:declaration]
~packaged_task();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Abandons any shared state. ([#futures.state]).
[exit:description]

[%@library packaged_task[!swap]]
[%@library swap[!packaged_task]]
[codeblock:declaration]
void swap(packaged_task& other) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] exchanges the shared states and stored tasks of [`*this] and [`other].

[para:postcondition]
[:en] [`*this] has the same shared state and stored task (if any) as [`other]
prior to the call to [`swap]. [`other] has the same shared state and stored task
(if any) as [`*this] prior to the call to [`swap].
[exit:description]

[%@library packaged_task[!valid]]
[%@library valid[!packaged_task]]
[codeblock:declaration]
bool valid() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`true] only if [`*this] has a shared state.
[exit:description]

[%@library packaged_task[!get_future]]
[%@library get_future[!packaged_task]]
[codeblock:declaration]
future<R> get_future();
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`future] object that shares the same shared state as [`*this].

[para:throws]
[:en] a [`future_error] object if an error occurs.

[para:errors]
[list]
[item]
[:en] [`future_already_retrieved] if [`get_future] has already been called on a
[`packaged_task] object with the same shared state as [`*this].
[item]
[:en] [`no_state] if [`*this] has no shared state.
[list:end]
[exit:description]

[%@library packaged_task[!operator()]]
[%@library operator()[!packaged_task]]
[codeblock:declaration]
void operator()(ArgTypes... args);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`[$INVOKE](f, t1, t2, ..., tN, R)], where [`f] is the stored task of
[`*this] and [`t1, t2, ..., tN] are the values in [`args...].

[:en] If the task returns normally, the return value is stored as the
asynchronous result in the shared state of [`*this], otherwise the exception
thrown by the task is stored.

[:en] The shared state of [`*this] is made ready, and any threads blocked in a
function waiting for the shared state of [`*this] to become ready are unblocked.

[para:throws]
[:en] a [`future_error] exception object if there is no shared state or the
stored task has already been invoked.

[para:errors]
[list]
[item]
[:en] [`promise_already_satisfied] if the stored task has already been invoked.
[item]
[:en] [`no_state] if [`*this] has no shared state.
[list:end]
[exit:description]

[%@library packaged_task[!make_ready_at_thread_exit]]
[%@library make_ready_at_thread_exit[!packaged_task]]
[codeblock:declaration]
void make_ready_at_thread_exit(ArgTypes... args);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`[$INVOKE](f, t1, t2, ..., tN, R)], where [`f] is the stored task and
[`t1, t2, ..., tN] are the values in [`args...].

[:en] If the task returns normally, the return value is stored as the
asynchronous result in the shared state of [`*this], otherwise the exception
thrown by the task is stored.

[:en] In either case, this shall be done without making that state ready
([#futures.state]) immediately.

[:en] Schedules the shared state to be made ready when the current thread exits,
after all objects of thread storage duration associated with the current thread
have been destroyed.

[para:throws]
[:en] [`future_error] if an error condition occurs.

[para:errors]
[list]
[item]
[:en] [`promise_already_satisfied] if the stored task has already been invoked.
[item]
[:en] [`no_state] if [`*this] has no shared state.
[list:end]
[exit:description]

[%@library packaged_task[!reset]]
[%@library reset[!packaged_task]]
[codeblock:declaration]
void reset();
[codeblock:end]

[enter:description]
[para:effects]
[:en] as if [`*this = packaged_task(std::move(f))], where [`f] is the task
stored in [`*this].

[enter:note]
[:en] This constructs a new shared state for [`*this].

[:en] The old state is abandoned ([#futures.state]).
[exit:note]

[para:throws]
[list]
[item]
[:en] [`bad_alloc] if memory for the new shared state could not be allocated.
[item]
[:en] any exception thrown by the move constructor of the task stored in the
shared state.
[item]
[:en] [`future_error] with an error condition of [`no_state] if [`*this] has no
shared state.
[list:end]
[exit:description]
