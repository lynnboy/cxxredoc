[section#iostreamclass
    [:en] Class template [`basic_iostream]
]

[%@library basic_iostream]
[codeblock:synopsis]
namespace std {
  template <class charT, class traits = char_traits<charT> >
  class basic_iostream :
    public basic_istream<charT,traits>,
    public basic_ostream<charT,traits> {
  public:
    // [:en] types:
    typedef charT                     char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;
    typedef traits                    traits_type;

    // [:en] constructor/destructor
    explicit basic_iostream(basic_streambuf<charT,traits>* sb);
    virtual ~basic_iostream();

  protected:
    basic_iostream(const basic_iostream& rhs) = delete;
    basic_iostream(basic_iostream&& rhs);

    // [:en] assign/swap
    basic_iostream& operator=(const basic_iostream& rhs) = delete;
    basic_iostream& operator=(basic_iostream&& rhs);
    void swap(basic_iostream& rhs);
  };
}
[codeblock:end]

[para]
[:en] The class [`basic_iostream] inherits a number of functions that allow
reading input and writing output to sequences controlled by a stream buffer.

[include iostream.cons]

[include iostream.dest]

[include iostream.assign]
