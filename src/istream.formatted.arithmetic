[section#istream.formatted.arithmetic
    [:en] Arithmetic extractors
]

[%@library operator>>[!istream]]
[codeblock:declaration]
operator>>(unsigned short& val);
operator>>(unsigned int& val);
operator>>(long& val);
operator>>(unsigned long& val);
operator>>(long long& val);
operator>>(unsigned long long& val);
operator>>(float& val);
operator>>(double& val);
operator>>(long double& val);
operator>>(bool& val);
operator>>(void*& val);
[codeblock:end]

[enter:description]
[para]
[:en] As in the case of the inserters, these extractors depend on the
locale[=']s [`num_get<>] ([#locale.num.get]) object to perform parsing the input
stream data.

[:en] These extractors behave as formatted input functions (as described in
[#istream.formatted.reqmts]).

[:en] After a sentry object is constructed, the conversion occurs as if
performed by the following code fragment:

[codeblock:notation]
typedef num_get< charT,istreambuf_iterator<charT,traits> > numget;
iostate err = iostate::goodbit;
use_facet< numget >(loc).get(*this, 0, *this, err, val);
setstate(err);
[codeblock:end]

[:en] In the above fragment, [`loc] stands for the private member of the
[`basic_ios] class.

[enter:note]
[:en] The first argument provides an object of the [`istreambuf_iterator] class
which is an iterator pointed to an input stream.

[:en] It bypasses istreams and uses streambufs directly.
[exit:note]

[:en] Class [`locale] relies on this type as its interface to [`istream], so
that it does not need to depend directly on [`istream].
[exit:description]

[%@library operator>>[!istream]]
[codeblock:declaration]
operator>>(short& val);
[codeblock:end]

[enter:description]
[para]
[:en] The conversion occurs as if performed by the following code fragment
(using the same notation as for the preceding code fragment):

[codeblock:notation]
typedef num_get<charT,istreambuf_iterator<charT,traits> > numget;
iostate err = ios_base::goodbit;
long lval;
use_facet<numget>(loc).get(*this, 0, *this, err, lval);
if (lval < numeric_limits<short>::min()) {
  err |= ios_base::failbit;
  val = numeric_limits<short>::min();
} else if (numeric_limits<short>::max() < lval) {
  err |= ios_base::failbit;
  val = numeric_limits<short>::max();
}  else
  val = static_cast<short>(lval);
setstate(err);
[codeblock:end]
[exit:description]

[%@library operator>>[!istream]]
[codeblock:declaration]
operator>>(int& val);
[codeblock:end]

[enter:description]
[para]
[:en] The conversion occurs as if performed by the following code fragment
(using the same notation as for the preceding code fragment):

[codeblock:notation]
typedef num_get<charT,istreambuf_iterator<charT,traits> > numget;
iostate err = ios_base::goodbit;
long lval;
use_facet<numget>(loc).get(*this, 0, *this, err, lval);
if (lval < numeric_limits<int>::min()) {
  err |= ios_base::failbit;
  val = numeric_limits<int>::min();
} else if (numeric_limits<int>::max() < lval) {
  err |= ios_base::failbit;
  val = numeric_limits<int>::max();
}  else
  val = static_cast<int>(lval);
setstate(err);
[codeblock:end]
[exit:description]
