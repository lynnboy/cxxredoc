[section#istream.iterator.cons
    [:en] [`istream_iterator] constructors and destructor
    [:zh_CN] [`istream_iterator] 的构造函数和析构函数
]

[%@library istream_iterator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
[=Seebelow] istream_iterator();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs the end-of-stream iterator.
[:zh_CN] 构造流结束迭代器。

[:en] If [`T] is a literal type, then this constructor shall be a [`constexpr]
constructor.
[:zh_CN] 如果 [`T] 是字面量类型，则这个构造函数应当为 [`constexpr] 构造函数。

[para:postcondition]
[:en] [`in_stream == 0].
[:zh_CN] [`in_stream == 0]。
[exit:description]

[%@library istream_iterator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
istream_iterator(istream_type& s);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Initializes [$in_stream] with [`&s].
[:zh_CN] 以 [`&s] 初始化 [$in_stream]。

[:en] [$value] may be initialized during construction or the first time it is
referenced.
[:zh_CN] [$value] 可能在构造之中或者其第一次被涉指时进行初始化。

[para:postcondition]
[:en] [`in_stream == &s].
[:zh_CN]
[exit:description]

[%@library istream_iterator[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
istream_iterator(const istream_iterator& x) = default;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a copy of [`x].
[:zh_CN] 构造 [`x] 的副本。

[:en] If [`T] is a literal type, then this constructor shall be a trivial copy
constructor.
[:zh_CN] 如果 [`T] 是字面量类型，则这个构造函数应当为 [`constexpr] 构造函数。

[para:postcondition]
[:en] [`in_stream == x.in_stream].
[:zh_CN] [`in_stream == x.in_stream]。
[exit:description]

[%@library istream_iterator[![:en]destructor[:zh_CN]析构函数]]
[codeblock:declaration]
~istream_iterator() = default;
[codeblock:end]

[enter:description]
[para:effects]
[:en] The iterator is destroyed.
[:zh_CN] 销毁迭代器。

[:en] If [`T] is a literal type, then this destructor shall be a trivial
destructor.
[:zh_CN] 如果 [`T] 是字面量类型，则这个析构函数应当为平凡析构函数。
[exit:description]
