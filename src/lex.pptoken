[section#lex.pptoken
    [:en] Preprocessing tokens
    [:zh_CN] 
]

[index:begin#preprocessing.token
    [:en] token [!preprocessing]
]

[syntax]
[rule preprocessing-token]
    [| header-name]
    [| identifier]
    [| pp-number]
    [| character-literal]
    [| user-defined-character-literal]
    [| string-literal]
    [| user-defined-string-literal]
    [| preprocessing-op-or-punc]
    [|:descriptive
        [:en] each non-white-space character that cannot be one of the above
    ]
[rule:end]
[syntax:end]

[para]
[:en]
Each preprocessing token that is converted to a token ([#lex.token]) shall have
the lexical form of a keyword, an identifier, a literal, an operator, or a
punctuator.

[para]
[:en]
A preprocessing token is the minimal lexical element of the language in
translation phases 3 through 6.

[:en]
The categories of preprocessing token are: header names, identifiers,
preprocessing numbers, character literals (including user-defined character
literals), string literals (including user-defined string literals),
preprocessing operators and punctuators, and single non-white-space characters
that do not lexically match the other preprocessing token categories.

[:en]
If a [`'] or a [`"] character matches the last category, the behavior is
undefined.

[:en]
Preprocessing tokens can be separated by [%space[!white]] white space;

[:en]
[%comment]
this consists of comments ([#lex.comment]), or white-space characters (space,
horizontal tab, new-line, vertical tab, and form-feed), or both.

[:en]
As described in Clause [#cpp], in certain circumstances during translation
phase 4, white space (or the absence thereof) serves as more than preprocessing
token separation.

[:en]
White space can appear within a preprocessing token only as part of a header
name or between the quotation characters in a character literal or string
literal.

[para]
[:en]
If the input stream has been parsed into preprocessing tokens up to a given
character:

[list]

[item]
[:en]
If the next character begins a sequence of characters that could be the prefix
and initial double quote of a raw string literal, such as [`R"], the next
preprocessing token shall be a raw string literal.

[:en]
Between the initial and final double quote characters of the raw string, any
transformations performed in phases 1 and 2 (universal-character-names and line
splicing) are reverted;

[:en]
this reversion shall apply before any [~d-char], [~r-char], or delimiting
parenthesis is identified.

[:en]
The raw string literal is defined as the shortest sequence of characters that
matches the raw-string pattern

[syntax:explanation]
[~:opt encoding-prefix] [`R] [~raw-string]
[syntax:end]

[item]
[:en]
Otherwise, if the next three characters are [`<::] and the subsequent character
is neither [`:] nor [`>], the [`<] is treated as a preprocessor token by itself
and not as the first character of the alternative token [`<:].

[item]
[:en]
Otherwise, the next preprocessing token is the longest sequence of characters
that could constitute a preprocessing token, even if that would cause further
lexical analysis to fail.

[list:end]

[enter:example]

[codeblock]
#define R "x"
const char* s = R"y";           // [:en] ill-formed raw string, not [`"x" "y"]
                                // [|:zh_CN]
[codeblock:end]

[exit:example]

[para]
[enter:example]
[:en]
The program fragment [`0xe+foo] is parsed as a preprocessing number token (one
that is not a valid floating or integer literal token), even though a parse as
three preprocessing tokens [`0xe], [`+], and [`foo] might produce a valid
expression (for example, if [`foo] were a macro defined as [`1]).

[:en]
Similarly, the program fragment [`1E1] is parsed as a preprocessing number (one
that is a valid floating literal token), whether or not [`E] is a macro name.

[exit:example]

[para]
[enter:example
[:en]
The program fragment [`x+++++y] is parsed as [`x ++ ++ + y], which, if [`x] and
[`y] have integral types, violates a constraint on increment operators, even
though the parse [`x ++ + ++ y] might yield a correct expression.
[exit:example]

[index:end#preprocessing.token]
