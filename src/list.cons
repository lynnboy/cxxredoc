[section#list.cons
    [:en] [`list] constructors, copy, and assignment
]

[%@library list[!list]]
[codeblock:declaration]
explicit list(const Allocator&);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an empty list, using the specified allocator.

[para:complexity]
[:en] Constant.
[exit:description]

[%@library list[!list]]
[codeblock:declaration]
explicit list(size_type n, const Allocator& = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`list] with [`n] default-inserted elements using the
specified allocator.

[para:requires]
[:en] [`T] shall be [`DefaultInsertable] into [`*this].

[para:complexity]
[:en] Linear in [`n].
[exit:description]

[%@library list[!list]]
[codeblock:declaration]
list(size_type n, const T& value, const Allocator& = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`list] with [`n] copies of [`value], using the specified
allocator.

[para:requires]
[:en] [`T] shall be [`CopyInsertable] into [`*this].

[para:complexity]
[:en] Linear in [`n].
[exit:description]

[%@library list[!list]]
[codeblock:declaration]
template <class InputIterator>
  list(InputIterator first, InputIterator last, const Allocator& = Allocator());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`list] equal to the range [=range[first,last)].

[para:complexity]
[:en] Linear in [`distance(first, last)].
[exit:description]
