[section#list.modifiers
    [:en] [`list] modifiers
]

[%@library insert[!list]]
[codeblock:declaration]
iterator insert(const_iterator position, const T& x);
iterator insert(const_iterator position, T&& x);
iterator insert(const_iterator position, size_type n, const T& x);
template <class InputIterator>
  iterator insert(const_iterator position, InputIterator first,
                  InputIterator last);
iterator insert(const_iterator position, initializer_list<T>);

template <class... Args> void emplace_front(Args&&... args);
template <class... Args> void emplace_back(Args&&... args);
template <class... Args> iterator emplace(const_iterator position, Args&&... args);
void push_front(const T& x);
void push_front(T&& x);
void push_back(const T& x);
void push_back(T&& x);
[codeblock:end]

[enter:description]
[para:notes]
[:en] Does not affect the validity of iterators and references.

[:en] If an exception is thrown there are no effects.

[para:complexity]
[:en] Insertion of a single element into a list takes constant time and exactly
one call to a constructor of [`T].

[:en] Insertion of multiple elements into a list is linear in the number of
elements inserted, and the number of calls to the copy constructor or move
constructor of [`T] is exactly equal to the number of elements inserted.
[exit:description]

[%@library erase[!list]]
[codeblock:declaration]
iterator erase(const_iterator position);
iterator erase(const_iterator first, const_iterator last);

void pop_front();
void pop_back();
void clear() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Invalidates only the iterators and references to the erased elements.

[para:throws]
[:en] Nothing.

[para:complexity]
[:en] Erasing a single element is a constant time operation with a single call
to the destructor of [`T].

[:en] Erasing a range in a list is linear time in the size of the range and the
number of calls to the destructor of type [`T] is exactly equal to the size of
the range.
[exit:description]
