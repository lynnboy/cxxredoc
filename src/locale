[section#locale
    [:en] Class [`locale]
]

[%@library <locale> [sortas locale]]
[codeblock:synopsis]
namespace std {
  class locale {
  public:
    // [:en] types:
    class facet;
    class id;
    typedef int category;
    static const category   // [:en] values assigned here are for exposition only
      none     = 0,
      collate  = 0x010, ctype    = 0x020,
      monetary = 0x040, numeric  = 0x080,
      time     = 0x100, messages = 0x200,
      all = collate | ctype | monetary | numeric | time  | messages;

    // [:en] construct/copy/destroy:
    locale() noexcept;
    locale(const locale& other) noexcept;
    explicit locale(const char* std_name);
    explicit locale(const string& std_name);
    locale(const locale& other, const char* std_name, category);
    locale(const locale& other, const string& std_name, category);
    template <class Facet> locale(const locale& other, Facet* f);
    locale(const locale& other, const locale& one, category);
    ~locale();                  // [:en] not virtual
    const locale& operator=(const locale& other) noexcept;
    template <class Facet> locale combine(const locale& other) const;

    // [:en] locale operations:
    basic_string<char>                  name() const;

    bool operator==(const locale& other) const;
    bool operator!=(const locale& other) const;

    template <class charT, class traits, class Allocator>
      bool operator()(const basic_string<charT,traits,Allocator>& s1,
                      const basic_string<charT,traits,Allocator>& s2) const;

    // [:en] global locale objects:
    static       locale  global(const locale&);
    static const locale& classic();
  };
}
[codeblock:end]

[para]
[:en]
Class [`locale] implements a type-safe polymorphic set of facets, indexed by
facet [+type].

[:en]
In other words, a facet has a dual role: in one sense, it[=']s just a class
interface; at the same time, it[=']s an index into a locale[=']s set of facets.

[para]
[:en]
Access to the facets of a [`locale] is via two function templates,
[`use_facet<>] and [`has_facet<>].

[para]
[enter:example]
[:en]
An iostream [`operator<<] might be implemented as:

[footnote]
[:en]
Note that in the call to [`put] the stream is implicitly converted to an
[`ostreambuf_iterator<charT,traits>].
[footnote:end]

[codeblock:synopsis]
template <class charT, class traits>
basic_ostream<charT,traits>&
operator<< (basic_ostream<charT,traits>& s, Date d) {
  typename basic_ostream<charT,traits>::sentry cerberos(s);
  if (cerberos) {
    ios_base::iostate err = ios_base::iostate::goodbit;
    tm tmbuf; d.extract(tmbuf);
    use_facet< time_put<charT,ostreambuf_iterator<charT,traits> > >(
      s.getloc()).put(s, s, s.fill(), err, &tmbuf, 'x');
    s.setstate(err);            // [:en] might throw
  }
  return s;
}
[codeblock:end]
[exit:example]

[para]
[:en]
In the call to [`use_facet<Facet>(loc)], the type argument chooses a facet,
making available all members of the named type.

[:en]
If [`Facet] is not present in a locale, it throws the standard exception
[`bad_cast].

[:en]
A [=Cpp] program can check if a locale implements a particular facet with the
function template [`has_facet<Facet>()].

[:en]
User-defined facets may be installed in a locale, and used identically as may
standard facets ([#facets.examples]).

[para]
[enter:note]
[:en]
All locale semantics are accessed via [`use_facet<>] and [`has_facet<>], except
that:

[list]
[item]
[:en]
A member operator template [`operator()(const basic_string<C, T, A>&, const
basic_string<C, T, A>&)] is provided so that a locale may be used as a predicate
argument to the standard collections, to collate strings.

[item]
[:en]
Convenient global interfaces are provided for traditional [`ctype] functions
such as [`isdigit()] and [`isspace()], so that given a locale object [`loc] a
[=Cpp] program can call [`isspace(c,loc)].

[:en]
(This eases upgrading existing extractors ([#istream.formatted]).)
[exit:note]
[list:end]

[para]
[:en]
Once a facet reference is obtained from a locale object by calling
[`use_facet<>], that reference remains usable, and the results from member
functions of it may be cached and re-used, as long as some locale object refers
to that facet.

[para]
[:en]
In successive calls to a locale facet member function on a facet object
installed in the same locale, the returned result shall be identical.

[para]
[:en]
A [`locale] constructed from a name string (such as [`"POSIX"]), or from parts
of two named locales, has a name; all others do not.

[:en]
Named locales may be compared for equality; an unnamed locale is equal only to
(copies of) itself.

[:en]
For an unnamed locale, [`locale::name()] returns the string [`"*"].

[para]
[:en]
Whether there is one global locale object for the entire program or one global
locale object per thread is [%@impldef whether locale object is global or
per-thread] implementation-defined.

[:en]
Implementations should provide one global locale object per thread.

[:en]
If there is a single global locale object for the entire program,
implementations are not required to avoid data races on it
([#res.on.data.races]).

[include locale.types]

[include locale.cons]

[include locale.members]

[include locale.operators]

[include locale.statics]
