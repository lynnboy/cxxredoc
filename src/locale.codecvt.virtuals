[section#locale.codecvt.virtuals
    [:en] [`codecvt] virtual functions
]

[%@library codecvt[!do_out]]
[%@library do_out[!codecvt]]
[%@library codecvt[!do_in]]
[%@library do_in[!codecvt]]
[codeblock:declaration]
result do_out(stateT& state,
  const internT* from, const internT* from_end, const internT*& from_next,
  externT* to, externT* to_end, externT*& to_next) const;

result do_in(stateT& state,
  const externT* from, const externT* from_end, const externT*& from_next,
        internT* to, internT* to_end, internT*& to_next) const;
[codeblock:end]

[enter:description]
[para:preconditions]
[:en] [`(from<=from_end && to<=to_end)] well-defined and [`true]; [`state]
initialized, if at the beginning of a sequence, or else equal to the result of
converting the preceding characters in the sequence.

[para:effects]
[:en] Translates characters in the source range [`[from,from_end)], placing the
results in sequential positions starting at destination [`to].

[:en] Converts no more than [`(from_end-from)] source elements, and stores no
more than [`(to_end-to)] destination elements.

[:en] Stops if it encounters a character it cannot convert.

[:en] It always leaves the [`from_next] and [`to_next] pointers pointing one
beyond the last element successfully converted.

[:en] If returns [`noconv], [`internT] and [`externT] are the same type and the
converted sequence is identical to the input sequence [`[from, from_next)].

[:en] [`to_next] is set equal to [`to], the value of [`state] is unchanged, and
there are no changes to the values in [`[to, to_end)].

[para]
[:en] A [`codecvt] facet that is used by [`basic_filebuf] ([#file.streams])
shall have the property that if

[codeblock]
do_out(state, from, from_end, from_next, to, to_end, to_next)
[codeblock:end]

[:en@~]
would return [`ok], where [`from != from_end], then

[codeblock:synopsis]
do_out(state, from, from + 1, from_next, to, to_end, to_next)
[codeblock:end]

[:en@~] shall also return [`ok], and that if

[codeblock:synopsis]
do_in(state, from, from_end, from_next, to, to_end, to_next)
[codeblock:end]

[:en@~] would return [`ok], where [`to != to_end], then

[codeblock:synopsis]
do_in(state, from, from_end, from_next, to, to + 1, to_next)
[codeblock:end]

[:en@~] shall also return [`ok].

[footnote]
[:en] Informally, this means that [`basic_filebuf] assumes that the mappings
from internal to external characters is 1 to N: a [`codecvt] facet that is used
by [`basic_filebuf] must be able to translate characters one internal character
at a time.
[footnote:end]

[enter:note]
[:en] As a result of operations on [`state], it can return [`ok] or [`partial]
and set [`from_next == from] and [`to_next != to].
[exit:note]

[para:notes]
[:en] Its operations on [`state] are unspecified.

[enter:note]
[:en] This argument can be used, for example, to maintain shift state, to
specify conversion options (such as count only), or to identify a cache of seek
offsets.
[exit:note]

[para:returns]
[:en] An enumeration value, as summarized in Table
[#tab:localization.convert.result.values.out.in].

[table:listing#tab:localization.convert.result.values.out.in
    [:en] [`do_in/do_out] result values
    [columns
        [column@headercenter@code
            [:en] Value
        ]
        [column@headercenter
            [:en] Meaning
        ]
    ]
    [border:cell@none]
]

[|] ok
[|] [:en] completed the conversion

[|] partial
[|] [:en] not all source characters converted

[|] error
[|] [:en] encountered a character in [`[from,from_end)] that it could not
    convert

[|] noconv
[|] [:en] [`internT] and [`externT] are the same type, and input sequence is
    identical to converted sequence

[table:end]

[:en]
A return value of [`partial], if [`(from_next==from_end)], indicates that either
the destination sequence has not absorbed all the available destination
elements, or that additional source elements are needed before another
destination element can be produced.
[exit:description]

[%@library codecvt[!do_unshift]]
[%@library do_unshift[!codecvt]]
[codeblock:declaration]
result do_unshift(stateT& state,
  externT* to, externT* to_end, externT*& to_next) const;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`(to <= to_end)] well defined and true; state initialized, if at the
beginning of a sequence, or else equal to the result of converting the preceding
characters in the sequence.

[para:effects]
[:en] Places characters starting at [`to] that should be appended to terminate
a sequence when the current [`stateT] is given by [`state].

[footnote]
[:en] Typically these will be characters to return the state to [`stateT()]
[footnote:end]

[:en] Stores no more than [`(to_end-to)] destination elements, and leaves the
[`to_next] pointer pointing one beyond the last element successfully stored.

[para:returns]
[:en] An enumeration value, as summarized in Table
[#tab:localization.convert.result.values.unshift].

[table:listing#tab:localization.convert.result.values.unshift
    [:en] [`do_unshift] result values
    [columns
        [column@headercenter@code
            [:en] Value
        ]
        [column@headercenter
            [:en] Meaning
        ]
    ]
    [border:cell@none]
]

[|] ok
[|] [:en] completed the sequence

[|] partial
[|] [:en] space for more than [`to_end-to] destination elements was needed to
    terminate a sequence given the value of [`state]

[|] error
[|] [:en] an unspecified error has occurred

[|] noconv
[|] [:en] no termination is needed for this [`state_type]

[table:end]

[exit:description]

[%@library codecvt[!do_encoding]]
[%@library do_encoding[!codecvt]]
[codeblock:declaration]
int do_encoding() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`-1] if the encoding of the [`externT] sequence is state-dependent; else
the constant number of [`externT] characters needed to produce an internal
character; or [`0] if this number is not a constant.

[footnote]
[:en] If [`encoding()] yields [`-1], then more than [`max_length()] [`externT]
elements may be consumed when producing a single [`internT] character, and
additional [`externT] elements may appear at the end of a sequence after those
that yield the final [`internT] character.
[footnote:end]
[exit:description]

[%@library codecvt[!do_always_noconv]]
[%@library do_always_noconv[!codecvt]]
[codeblock:declaration]
bool do_always_noconv() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`true] if [`do_in()] and [`do_out()] return [`noconv] for all valid
argument values.

[:en] [`codecvt<char, char, mbstate_t>] returns [`true].
[exit:description]

[%@library codecvt[!do_length]]
[%@library do_length[!codecvt]]
[codeblock:declaration]
int do_length(stateT& state, const externT* from, const externT* from_end,
              size_t max) const;
[codeblock:end]

[enter:description]
[para:preconditions]
[:en] [`(from<=from_end)] well-defined and [`true]; [`state] initialized, if at
the beginning of a sequence, or else equal to the result of converting the
preceding characters in the sequence.

[para:effects]
[:en] The effect on the [`state] argument is ["as if] it called [`do_in(state,
from, from_end, from, to, to+max, to)] for [`to] pointing to a buffer of at
least [`max] elements.

[para:returns]
[:en] [`(from_next-from)] where [`from_next] is the largest value in the range
[`[from,from_end`]] such that the sequence of values in the range
[=range[from,from_next)] represents [`max] or fewer valid complete characters of
type [`internT].

[:en] The specialization [`codecvt<char, char, mbstate_t>], returns the lesser
of [`max] and [`(from_end-from)].
[exit:description]

[%@library codecvt[!do_max_length]]
[%@library do_max_length[!codecvt]]
[codeblock:declaration]
int do_max_length() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] The maximum value that [`do_length(state, from, from_end, 1)] can return
for any valid range [`[from, from_end)] and [`stateT] value [`state].

[:en] The specialization [`codecvt<char, char, mbstate_t>::do_max_length()]
returns 1.
[exit:description]
