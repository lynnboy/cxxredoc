[section#locale.collate.virtuals
    [:en] [`collate] virtual functions
]

[%@library collate[!do_compare]]
[%@library do_compare[!collate]]
[codeblock:declaration]
int do_compare(const charT* low1, const charT* high1,
               const charT* low2, const charT* high2) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`1] if the first string is greater than the second, [`-1] if less, zero
otherwise.

[:en] The specializations required in Table [#tab:localization.category.facets]
([#locale.category]), namely [`collate<char>] and [`collate<wchar_t>], implement
a lexicographical comparison ([#alg.lex.comparison]).
[exit:description]

[%@library collate[!do_transform]]
[%@library do_transform[!collate]]
[codeblock:declaration]
string_type do_transform(const charT* low, const charT* high) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`basic_string<charT>] value that, compared lexicographically with the
result of calling [`transform()] on another string, yields the same result as
calling [`do_compare()] on the same two strings.

[footnote]
[:en] This function is useful when one string is being compared to many other
strings.
[footnote:end]
[exit:description]

[%@library collate[!do_hash]]
[%@library do_hash[!collate]]
[codeblock:declaration]
long do_hash(const charT* low, const charT* high) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] An integer value equal to the result of calling [`hash()] on any other
string for which [`do_compare()] returns 0 (equal) when passed the two strings.

[enter:note]
[:en] The probability that the result equals that for another string which does
not compare equal should be very small, approaching
[`(1.0/numeric_limits<unsigned long>::max())].
[exit:note]
[exit:description]
