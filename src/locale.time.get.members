[section#locale.time.get.members
    [:en] [`time_get] members
]

[%@library time_get[!date_order]]
[%@library date_order[!time_get]]
[codeblock:declaration]
dateorder date_order() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`do_date_order()]
[exit:description]

[%@library time_get[!get_time]]
[%@library get_time[!time_get]]
[codeblock:declaration]
iter_type get_time(iter_type s, iter_type end, ios_base& str,
                   ios_base::iostate& err, tm* t) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`do_get_time(s, end, str, err, t)]
[exit:description]

[%@library time_get[!get_date]]
[%@library get_date[!time_get]]
[codeblock:declaration]
iter_type get_date(iter_type s, iter_type end, ios_base& str,
                   ios_base::iostate& err, tm* t) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`do_get_date(s, end, str, err, t)]
[exit:description]

[%@library time_get[!get_weekday]]
[%@library get_weekday[!time_get]]
[%@library time_get[!get_monthname]]
[%@library get_monthname[!time_get]]
[codeblock:declaration]
iter_type get_weekday(iter_type s, iter_type end, ios_base& str,
                      ios_base::iostate& err, tm* t) const;
iter_type get_monthname(iter_type s, iter_type end, ios_base& str,
                        ios_base::iostate& err, tm* t) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`do_get_weekday(s, end, str, err, t)] or
[`do_get_monthname(s, end, str, err, t)]
[exit:description]

[%@library time_get[!get_year]]
[%@library get_year[!time_get]]
[codeblock:declaration]
iter_type get_year(iter_type s, iter_type end, ios_base& str,
                   ios_base::iostate& err, tm* t) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`do_get_year(s, end, str, err, t)]
[exit:description]

[%@library get[!time_get]]
[%@library time_get[!get]]
[codeblock:declaration]
iter_type get(iter_type s, iter_type end, ios_base& f,
    ios_base::iostate& err, tm* t, char format, char modifier = 0) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`do_get(s, end, f, err, t, format, modifier)]
[exit:description]

[%@library get[!time_get]]
[%@library time_get[!get]]
[codeblock:declaration]
iter_type get(iter_type s, iter_type end, ios_base& f,
    ios_base::iostate& err, tm* t, const char_type* fmt, const char_type* fmtend) const;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [=range[fmt,fmtend)] shall be a valid range.

[para:effects]
[:en] The function starts by evaluating [`err = ios_base::goodbit].

[:en] It then enters a loop, reading zero or more characters from [`s] at each
iteration.

[:en] Unless otherwise specified below, the loop terminates when the first of
the following conditions holds:

[list]
[item]
[:en] The expression [`fmt == fmtend] evaluates to true.

[item]
[:en] The expression [`err == ios_base::goodbit] evaluates to false.

[item]
[:en] The expression [`s == end] evaluates to true, in which case the function
evaluates [`err = ios_base::eofbit | ios_base::failbit].

[item]
[:en] The next element of [`fmt] is equal to [`'%'], optionally followed by a
modifier character, followed by a conversion specifier character, [`format],
together forming a conversion specification valid for the ISO/IEC 9945 function
[`strptime].

[:en] If the number of elements in the range [=range[fmt,fmtend)] is not
sufficient to unambiguously determine whether the conversion specification is
complete and valid, the function evaluates [`err = ios_base::failbit].

[:en] Otherwise, the function evaluates [`s = do_get(s, end, f, err, t, format,
modifier)], where the value of [`modifier] is [`'\0'] when the optional modifier
is absent from the conversion specification.

[:en] If [`err == ios_base::goodbit] holds after the evaluation of the
expression, the function increments [`fmt] to point just past the end of the
conversion specification and continues looping.

[item]
[:en] The expression [`isspace(*fmt, f.getloc())] evaluates to true, in which
case the function first increments [`fmt] until [`fmt == fmtend ||
!isspace(*fmt, f.getloc())] evaluates to true, then advances [`s] until
[`s == end || !isspace(*s, f.getloc())] is true, and finally resumes looping.

[item]
[:en] The next character read from [`s] matches the element pointed to by [`fmt]
in a case-insensitive comparison, in which case the function evaluates
[`++fmt, ++s] and continues looping. Otherwise, the function evaluates
[`err = ios_base::failbit].
[list:end]

[para]
[enter:note]
[:en] The function uses the [`ctype<charT>] facet installed in [`f][=']s locale
to determine valid whitespace characters. It is unspecified by what means the
function performs case-insensitive comparison or whether multi-character
sequences are considered while doing so.
[exit:note]

[para:returns]
[:en] [`s]
[exit:description]
