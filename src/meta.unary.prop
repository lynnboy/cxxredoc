[section#meta.unary.prop
    [:en] Type properties
    [:zh_CN] 类型属性
]

[para]
[:en]
These templates provide access to some of the more important properties of
types.
[:zh_CN]
这些模板提供了对类型的某些更加重要的属性的访问。

[para]
[:en]
It is unspecified whether the library defines any full or partial
specializations of any of these templates.
[:zh_CN]
程序库中是否对这些模板中的任意一个提供任何完全或部分特化是未指明的。

[para]
[:en]
For all of the class templates [`X] declared in this Clause, instantiating that
template with a template-argument that is a class template specialization may
result in the implicit instantiation of the template argument if and only if the
semantics of [`X] require that the argument must be a complete type.
[:zh_CN]
对于本条款所声明的所有类模板 [`X]，对这个模板以某个类模板特例作为模板实参进行
实例化，当且仅当 [`X] 的语义要求该实参必须为完整类型时，将导致对模板实参进行隐式
实例化。

[table:listing#tab:type-traits.properties
    [:en] Type property predicates
    [:zh_CN] 类型属性谓词
    [columns
        [column@headercenter@code
            [:en] Template
            [:zh_CN] 模板
        ]
        [column@headercenter
            [:en] Condition
            [:zh_CN] 条件
        ]
        [column@headercenter
            [:en] Preconditions
            [:zh_CN] 前条件
        ]
    ]
    [border:row@both]
]

[|]
template <class T> [br]
struct is_const;
[|] [:en] [`T] is const-qualified ([#basic.type.qualifier])
    [:zh_CN] [`T] 是被 const-限定的（[#basic.type.qualifier]）
[|]

[|]
template <class T> [br]
struct is_volatile;
[|] [:en] [`T] is volatile-qualified ([#basic.type.qualifier])
    [:zh_CN] [`T] 是被 volatile-限定的（[#basic.type.qualifier]）
[|]

[|]
template <class T> [br]
struct is_trivial;
[|] [:en] [`T] is a trivial type ([#basic.types])
    [:zh_CN] [`T] 为平凡类型（[#basic.types]）
[|] [:en] [`remove_all_extents_t<T>] shall be a complete type or (possibly
    cv-qualified) [`void].
    [:zh_CN] [`remove_all_extents_t<T>] 应当为完整类型或（可能被 cv-限定的）
    [`void]。

[|]
template <class T> [br]
struct is_trivially_copyable;
[|] [:en] [`T] is a trivially copyable type ([#basic.types])
    [:zh_CN] [`T] 为可平凡复制类型（[#basic.types]）
[|] [:en] [`remove_all_extents_t<T>] shall be a complete type or (possibly
    cv-qualified) [`void].
    [:zh_CN] [`remove_all_extents_t<T>] 应当为完整类型或（可能被 cv-限定的）
    [`void]。

[|]
template <class T> [br]
struct is_standard_layout;
[|] [:en] [`T] is a standard-layout type ([#basic.types])
    [:zh_CN] [`T] 为标准布局类型（[#basic.types]）
[|] [:en] [`remove_all_extents_t<T>] shall be a complete type or (possibly
    cv-qualified) [`void].
    [:zh_CN] [`remove_all_extents_t<T>] 应当为完整类型或（可能被 cv-限定的）
    [`void]。

[|]
template <class T> [br]
struct is_pod;
[|] [:en] [`T] is a POD type ([#basic.types])
    [:zh_CN] [`T] 为 POD 类型（[#basic.types]）
[|] [:en] [`remove_all_extents_t<T>] shall be a complete type or (possibly
    cv-qualified) [`void].
    [:zh_CN] [`remove_all_extents_t<T>] 应当为完整类型或（可能被 cv-限定的）
    [`void]。

[|]
template <class T> [br]
struct is_literal_type;
[|] [:en] [`T] is a literal type ([#basic.types])
    [:zh_CN] [`T] 为字面量类型（[#basic.types]）
[|] [:en] [`remove_all_extents_t<T>] shall be a complete type or (possibly
    cv-qualified) [`void].
    [:zh_CN] [`remove_all_extents_t<T>] 应当为完整类型或（可能被 cv-限定的）
    [`void]。

[|]
template <class T> [br]
struct is_empty;
[|] [:en] [`T] is a class type, but not a union type, with no non-static data
    members other than bit-fields of length 0, no virtual member functions, no
    virtual base classes, and no base class [`B] for which [`is_empty<B>::value]
    is false.
    [:zh_CN] [`T] 为类类型，但不是联合类型，没有除长度为 0 的位字段之外的非静态
    数据成员，没有虚成员函数，没有虚基类，并且没有使得 [`is_empty<B>::value] 为
    假的基类 [`B]。
[|] [:en] If [`T] is a non-union class type, [`T] shall be a complete type.

[|]
template <class T> [br]
struct is_polymorphic;
[|] [:en] [`T] is a polymorphic class ([#class.virtual])
    [:zh_CN] [`T] 为多态类（[#class.virtual]）
[|] [:en] If [`T] is a non-union class type, [`T] shall be a complete type.
    [:zh_CN] 若 [`T] 是非联合类类型，则 [`T] 应当为完整类型。

[|]
template <class T> [br]
struct is_abstract;
[|] [:en] [`T] is an abstract class ([#class.abstract])
    [:zh_CN] [`T] 为抽象类（[#class.abstract]）
[|] [:en] If [`T] is a non-union class type, [`T] shall be a complete type.
    [:zh_CN] 若 [`T] 是非联合类类型，则 [`T] 应当为完整类型。

[|]
template <class T> [br]
struct is_final;
[|] [:en] [`T] is a class type marked with the [~class-virt-specifier] [`final]
    (Clause [#class]).
    [:zh_CN] [`T] 为被标以[~类虚说明符] [`final] 的类类型（第 [#class] 条）。
    [enter:note]
    [:en] A union is a class type that can be marked with [`final].
    [:zh_CN] 联合是可以被标以 [`final] 的类类型。
    [exit:note]                                        &
[|] [:en] If [`T] is a class type, [`T] shall be a complete type.
    [:zh_CN] 若 [`T] 是类类型，则 [`T] 应当为完整类型。

[|]
template <class T> [br]
struct is_signed;
[|] [:en] If [`is_arithmetic<T>::value] is [`true], the same result as
    [`integral_constant<bool, T(-1) < T(0)>::value]; otherwise, [`false]
    [:zh_CN] 若 [`is_arithmetic<T>::value] 为 [`true]，则与
    [`integral_constant<bool, T(-1) < T(0)>::value] 的结果相同；否则为 [`false]
[|]

[|]
template <class T> [br]
struct is_unsigned;
[|] [:en] If [`is_arithmetic<T>::value] is [`true], the same result as
    [`integral_constant<bool, T(0) < T(-1)>::value]; otherwise, [`false]
    [:zh_CN] 若 [`is_arithmetic<T>::value] 为 [`true]，则与
    [`integral_constant<bool, T(0) < T(-1)>::value] 的结果相同；否则为 [`false]
[|]

[|]
template <class T, class... Args> [br]
struct is_constructible;
[|] [=Seebelow]
[|] [:en] [`T] and all types in the parameter pack [`Args] shall be complete
    types, (possibly cv-qualified) [`void], or arrays of unknown bound.
    [:zh_CN] [`T] 以及形参包组 [`Args] 中的所有类型均应当为完整类型，（可能被
    cv-限定的）[`void]，或者未知边界的数组。

[|]
template <class T> [br]
struct is_default_constructible;
[|] [:en] [`is_constructible<T>::value] is [`true].
    [:zh_CN] [`is_constructible<T>::value] 为 [`true]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void],
    or an array of unknown bound.
    [:zh_CN] [`T] 以及形参包组 [`Args] 中的所有类型均应当为完整类型，（可能被
    cv-限定的）[`void]，或者未知边界的数组。

[|]
template <class T> [br]
struct is_copy_constructible;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_constructible<T, const T&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_constructible<T, const T&>::value]
    的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void],
    or an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_move_constructible;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_constructible<T, T&&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_constructible<T, T&&>::value] 的
    结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void],
    or an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T, class U> [br]
struct is_assignable;
[|] [:en] The expression [`declval<T>() = declval<U>()] is well-formed when
    treated as an unevaluated operand (Clause [#expr]).
    [:zh_CN] 表达式 [`declval<T>() = declval<U>()] 被当作免求值操作数时是良构的
    （第 [#expr] 条）。

    [:en] Access checking is performed as if in a context unrelated to [`T] and
    [`U].
    [:zh_CN] 如同在与 [`T] 和 [`U] 无关的语境那样进行访问检查。

    [:en] Only the validity of the immediate context of the assignment
    expression is considered.
    [:zh_CN] 只考察赋值表达式的直接语境的有效性。

    [enter:note]
    [:en] The compilation of the expression can result in side effects such as
    the instantiation of class template specializations and function template
    specializations, the generation of implicitly-defined functions, and so on.
    [:zh_CN] 对表达式的编译可能导致的副作用包括对类模板特例和函数模板特例的实例
    化，生成隐式声明的函数，等等。

    [:en] Such side effects are not in the ["immediate context] and can result
    in the program being ill-formed.
    [:zh_CN] 这些副作用并非处于其“直接语境”，并可能导致程序非良构。
    [exit:note]
[|] [:en] [`T] and [`U] shall be complete types, (possibly cv-qualified)
    [`void], or arrays of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，（可能被 cv-限定的）[`void]，或者未知
    边界的数组。

[|]
template <class T> [br]
struct is_copy_assignable;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_assignable<T&, const T&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_assignable<T, const T&>::value] 的
    结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void],
    or an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_move_assignable;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_assignable<T&, T&&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_assignable<T, T&&>::value] 的结果
    相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void],
    or an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_destructible;
[|] [:en] For reference types, [`is_destructible<T>::value] is [`true].
    [:zh_CN] 对于引用类型，[`is_destructible<T>::value] 为 [`true]。
    [para]
    [:en] For incomplete types and function types, [`is_destructible<T>::value]
    is [`false].
    [:zh_CN] 对于不完整类型和函数类型，[`is_destructible<T>::value] 为 [`false]
    。
    [para]
    [:en] For object types and given [`U] equal to [`remove_all_extents_t<T>],
    if the expression [`std::declval<U&>().~U()] is well-formed when treated as
    an unevaluated operand (Clause [#expr]), then [`is_destructible<T>::value]
    is [`true], otherwise it is [`false].
    [:zh_CN] 对于对象类型并给定 [`U] 等于 [`remove_all_extends_t<T>]，如果表达式
    [`std::declval<U&>().~U()] 被当作免求值操作数（第 [#expr] 条）时是良构的，则
    [`is_destructible<T>::value] 为 [`true]，否则它为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void],
    or an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T, class... Args> [br]
struct
is_trivially_constructible;
[|] [:en] [`is_constructible<T, Args...>::value] is [`true] and the variable
    definition for [`is_constructible], as defined below, is known to call
    no operation that is not trivial ([#basic.types], [#special]).
    [:zh_CN] [`is_constructible<T, Args...>::value] 为 [`true]，且对于下文所定义
    的针对 [`is_constructible] 的变量定义式，已知其不会调用任何非平凡的操作
    （[#basic.types]，[#special]）。
[|] [:en] [`T] and all types in the parameter pack [`Args] shall be complete
    types, (possibly cv-qualified) [`void], or arrays of unknown bound.
    [:zh_CN] [`T] 和形参包组 [`Args] 中的所有类型均应当为完整类型，（可能被
    cv-限定的）[`void]，或者未知边界的数组。

[|]
template <class T> [br]
struct is_trivially_default_constructible;
[|] [:en] [`is_trivially_constructible<T>::value] is [`true].
    [:zh_CN] [`is_trivially_constructible<T>::value] 为 [`true]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_trivially_copy_constructible;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_trivially_constructible<T, const T&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_trivially_constructible<T,
    const T&>::value] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_trivially_move_constructible;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_trivially_constructible<T, T&&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_trivially_constructible<T,
    T&&>::value] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T, class U> [br]
struct is_trivially_assignable;
[|] [:en] [`is_assignable<T, U>::value] is [`true] and the assignment, as
    defined by [`is_assignable], is known to call no operation that is not
    trivial ([#basic.types], [#special]).
    [:zh_CN] [`is_assignable<T, U>::value] 为 [`true]，并且其赋值操作（如同对于
    [`is_assignable] 的定义）已知不会调用任何非平凡操作（[#basic.types]，
    [#special]）。
[|] [:en] [`T] and [`U] shall be complete types, (possibly cv-qualified)
    [`void], or arrays of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者
    未知边界的数组。

[|]
template <class T> [br]
struct is_trivially_copy_assignable;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_trivially_assignable<T&, const T&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_trivially_assignable<T,
    const T&>::value] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_trivially_move_assignable;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_trivially_assignable<T&, T&&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_trivially_assignable<T,
    T&&>::value] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_trivially_destructible;
[|] [:en] [`is_destructible<T>::value] is [`true] and the indicated destructor
    is known to be trivial.
    [:zh_CN] [`is_destructible<T>::value] 为 [`true]，并且所指定的析构函数已知
    是平凡的。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T, class... Args> [br]
struct is_nothrow_constructible;
[|] [:en] [`is_constructible<T, Args...>::value] is [`true] and the variable
    definition for [`is_constructible], as defined below, is known not to throw
    any exceptions ([#expr.unary.noexcept]).
    [:zh_CN] [`is_constructible<T, Args...>::value] 为 [`true]，并且如下文所定义
    的针对 [`is_constructible] 的变量定义式，已知不会抛出任何异常
    （[#expr.unary.noexcept]）。
[|] [:en] [`T] and all types in the parameter pack [`Args] shall be complete
    types, (possibly cv-qualified) [`void], or arrays of unknown bound.
    [:zh_CN] [`T] 和形参包组 [`Args] 中的所有类型均应当为完整类型，（可能被
    cv-限定的）[`void]，或者未知边界的数组。

[|]
template <class T> [br]
struct is_nothrow_default_constructible;
[|] [:en] [`is_nothrow_constructible<T>::value] is [`true].
    [:zh_CN] [`is_nothrow_constructible<T>::value] 为 [`true]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_nothrow_copy_constructible;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_nothrow_constructible<T, const T&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_nothrow_constructible<T,
    const T&>::value] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_nothrow_move_constructible;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_nothrow_constructible<T, T&&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_nothrow_constructible<T,
    T&&>::value] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T, class U> [br]
struct is_nothrow_assignable;
[|] [:en] [`is_assignable<T, U>::value] is [`true] and the assignment is known
    not to throw any exceptions ([#expr.unary.noexcept]).
    [:zh_CN] [`is_assignable<T, U>::value] 为 [`true]，并且其赋值已知不会抛出
    任何异常（[#expr.unary.noexcept]）。
[|] [:en] [`T] and [`U] shall be complete types, (possibly cv-qualified)
    [`void], or arrays of unknown bound.
    [:zh_CN] [`T] 和 [`U] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者
    未知边界的数组。

[|]
template <class T> [br]
struct is_nothrow_copy_assignable;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_nothrow_assignable<T&, const T&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_nothrow_assignable<T,
    const T&>::value] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_nothrow_move_assignable;
[|] [:en] For a referenceable type [`T], the same result as
    [`is_nothrow_assignable<T&, T&&>::value], otherwise [`false].
    [:zh_CN] 对于可被引用的类型 [`T]，与 [`is_nothrow_assignable<T,
    T&&>::value] 的结果相同，否则为 [`false]。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct is_nothrow_destructible;
[|] [:en] [`is_destructible<T>::value] is [`true] and the indicated destructor
    is known not to throw any exceptions ([#expr.unary.noexcept]).
    [:zh_CN] [`is_destructible<T>::value] 为 [`true]，并且所指定的析构函数已知
    不会抛出任何异常（[#expr.unary.noexcept]）。
[|] [:en] [`T] shall be a complete type, (possibly [$cv]-qualified) [`void], or
    an array of unknown bound.
    [:zh_CN] [`T] 应当为完整类型，（可能被 [$cv]-限定的）[`void]，或者未知边界的
    数组。

[|]
template <class T> [br]
struct has_virtual_destructor;
[|] [:en] [`T] has a virtual destructor ([#class.dtor])
    [:zh_CN] [`T] 具有虚析构函数（[#class.dtor]）
[|] [:en] If [`T] is a non-union class type, [`T] shall be a complete type.
    [:zh_CN] 当 [`T] 是非联合类类型时，[`T] 应当是完整类型。

[table:end]

[para]
[enter:example]
[codeblock]
is_const<const volatile int>::value     // true
is_const<const int*>::value             // false
is_const<const int&>::value             // false
is_const<int[3]>::value                 // false
is_const<const int[3]>::value           // true
[codeblock:end]
[exit:example]

[para]
[enter:example]
[codeblock]
remove_const_t<const volatile int>  // [`volatile int]
remove_const_t<const int* const>    // [`const int*]
remove_const_t<const int&>          // [`const int&]
remove_const_t<const int[3]>        // [`int[3`]]
[codeblock:end]
[exit:example]

[para]
[enter:example]
[codeblock]
// [:en] Given:
// [|:zh_CN] 给定：
struct P final { };
union U1 { };
union U2 final { };

// [:en] the following assertions hold:
// [|:zh_CN] 下列断言成立：
static_assert(!is_final<int>::value, "Error!");
static_assert( is_final<P>::value, "Error!");
static_assert(!is_final<U1>::value, "Error!");
static_assert( is_final<U2>::value, "Error!");
[codeblock:end]
[exit:example]

[para]
[:en]
Given the following function declaration:
[:zh_CN]
给定以下函数声明式：

[codeblock:notation]
template <class T>
  add_rvalue_reference_t<T> create() noexcept;
[codeblock:end]

[:en@~]
the predicate condition for a template specialization
[`is_constructible<T, Args...>] shall be satisfied if and only if the following
variable definition would be well-formed for some invented variable [`t]:
[:zh_CN@~]
当且仅当以下变量定义式对于某个虚构的变量 [`t] 是良构的，模板特例
[`is_constructible<T, Args...>] 的谓词条件应当被满足：

[codeblock:notation]
T t(create<Args>()...);
[codeblock:end]

[enter:note]
[:en]
These tokens are never interpreted as a function declaration.
[:zh_CN]
这些记号不会被解释成函数声明式。
[exit:note]

[:en]
Access checking is performed as if in a context unrelated to [`T] and any of the
[`Args].
[:zh_CN]
如同在与 [`T] 和任何 [`Args] 均无关的语境中那样进行访问检查。

[:en]
Only the validity of the immediate context of the variable initialization is
considered.
[:zh_CN]
只考察变量初始化的直接语境的有效性。

[enter:note]
[:en]
The evaluation of the initialization can result in side effects such as the
instantiation of class template specializations and function template
specializations, the generation of implicitly-defined functions, and so on.
[:zh_CN]
对初始化的求值可能导致的副作用包括对类模板特例和函数模板特例的实例化，生成隐式
声明的函数，等等。

[:en]
Such side effects are not in the ["immediate context] and can result in the
program being ill-formed.
[:zh_CN]
这些副作用并非处于其“直接语境”，并可能导致程序非良构。
[exit:note]
