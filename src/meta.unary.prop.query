[section#meta.unary.prop.query
    [:en] Type property queries
]

[para]
[:en]
This sub-clause contains templates that may be used to query properties of types
at compile time.

[table:listing#tab:type-traits.properties.queries
    [:en] Type property queries
    [columns
        [column@headercenter@code
            [:en] Template
        ]
        [column@headercenter
            [:en] Value
        ]
    ]
    [border:row@both]
]

[|]
template <class T> [br]
struct alignment_of;
[|] [:en] [`alignof(T)]. [br]
    [:en] [=Precondition] [`alignof(T)] shall be a valid expression
    ([#expr.alignof])

[|]
template <class T> [br]
struct rank;
[|] [:en] If [`T] names an array type, an integer value representing the number
    of dimensions of [`T]; otherwise, 0.

[|]
template <class T, [br]
unsigned I = 0> [br]
struct extent;
[|] [:en] If [`T] is not an array type, or if it has rank less than or equal to
    [`I], or if [`I] is 0 and [`T] has type ["array of unknown bound of [`U]],
    then 0; otherwise, the bound ([#dcl.array]) of the [`I][=']th dimension of
    [`T], where indexing of [`I] is zero-based

[table:end]

[para]
[:en]
Each of these templates shall be a [`UnaryTypeTrait] ([#meta.rqmts]) with a
[`BaseCharacteristic] of [`integral_constant<size_t, Value>].

[para]
[enter:example]
[codeblock]
// [:en] the following assertions hold:
assert(rank<int>::value == 0);
assert(rank<int[2]>::value == 1);
assert(rank<int[][4]>::value == 2);
[codeblock:end]
[exit:example]

[para]
[enter:example]
[codeblock]
 // [:en] the following assertions hold:
assert(extent<int>::value == 0);
assert(extent<int[2]>::value == 2);
assert(extent<int[2][4]>::value == 2);
assert(extent<int[][4]>::value == 0);
assert((extent<int, 1>::value) == 0);
assert((extent<int[2], 1>::value) == 0);
assert((extent<int[2][4], 1>::value) == 4);
assert((extent<int[][4], 1>::value) == 4);
[codeblock:end]
[exit:example]
