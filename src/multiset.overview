[section#multiset.overview
    [:en] Class template [`multiset] overview
    [:zh_CN] 类模板 [`multiset] 概要
]

[para]
[%@library multiset]
[:en] A [`multiset] is an associative container that supports equivalent keys
(possibly contains multiple copies of the same key value) and provides for fast
retrieval of the keys themselves.
[:zh_CN] [`map] 是一种关联容器，支持等价键（可能包含同一个键值的多个副本），并
提供对键自身的快速检索。

[:en] The [`multiset] class supports bidirectional iterators.
[:zh_CN] [`multiset] 类支持双向迭代器。

[para]
[:en] A [`multiset] satisfies all of the requirements of a container, of a
reversible container ([#container.requirements]), of an associative container
([#associative.reqmts]), and of an allocator-aware container (Table
[#tab:containers.allocatoraware]).
[:zh_CN] [`multiset] 符合容器的所有规定，可反向容器的所有规定
（[#container.requirements]），关联容器的所有规定（[#associative.reqmts]），以及
分配器感知容器的所有规定（表 [#tab:containers.allocatoraware]）。

[:en] [`multiset] also provides most operations described in
([#associative.reqmts]) for duplicate keys.
[:zh_CN] [`multiset] 还提供 [#associative.reqmts] 所描述的大多数重复键的操作。

[:en] This means that a [`multiset] supports the [`a_eq] operations in
([#associative.reqmts]) but not the [`a_uniq] operations.
[:zh_CN] 这意味着 [`multiset] 支持 [#associative.reqmts] 中的 [`a_eq] 的操作，但
不支持 [`a_uniq] 的操作。

[:en] For a [`multiset<Key>] both the [`key_type] and [`value_type] are [`Key].
[:zh_CN] [`multiset<Key,T>] 的 [`key_type] 和 [`value_type] 均为 [`Key]。

[:en] Descriptions are provided here only for operations on [`multiset] that are
not described in one of these tables and for operations where there is
additional semantic information.
[:zh_CN] 此处给出的说明仅包括未被这些表格之一所描述的 [`multiset] 的操作，以及
具有额外的语义信息的操作。

[codeblock:synopsis [special implementation-defined] ]
namespace std {
  template <class Key, class Compare = less<Key>,
            class Allocator = allocator<Key> >
  class multiset {
  public:
    // [:en] types:
    // [|:zh_CN] 类型：
    typedef Key                                                     key_type;
    typedef Key                                                     value_type;
    typedef Compare                                                 key_compare;
    typedef Compare                                                 value_compare;
    typedef Allocator                                               allocator_type;
    typedef value_type&                                             reference;
    typedef const value_type&                                       const_reference;
    typedef implementation-defined                iterator;       // [:en] see [#container.requirements]
                                                                  // [|:zh_CN] 参见 [#container.requirements]
    typedef implementation-defined                const_iterator; // [:en] see [#container.requirements]
                                                                  // [|:zh_CN] 参见 [#container.requirements]
    typedef implementation-defined                size_type;      // [:en] see [#container.requirements]
                                                                  // [|:zh_CN] 参见 [#container.requirements]
    typedef implementation-defined                difference_type;// [:en] see [#container.requirements]
                                                                  // [|:zh_CN] 参见 [#container.requirements]
    typedef typename allocator_traits<Allocator>::pointer           pointer;
    typedef typename allocator_traits<Allocator>::const_pointer     const_pointer;
    typedef std::reverse_iterator<iterator>       reverse_iterator;
    typedef std::reverse_iterator<const_iterator> const_reverse_iterator;

    // [:en] construct/copy/destroy:
    // [|:zh_CN] 构造/复制/销毁：
    multiset() : multiset(Compare()) { }
    explicit multiset(const Compare& comp, const Allocator& = Allocator());
    template <class InputIterator>
      multiset(InputIterator first, InputIterator last,
               const Compare& comp = Compare(), const Allocator& = Allocator());
    multiset(const multiset& x);
    multiset(multiset&& x);
    explicit multiset(const Allocator&);
    multiset(const multiset&, const Allocator&);
    multiset(multiset&&, const Allocator&);
    multiset(initializer_list<value_type>, const Compare& = Compare(),
             const Allocator& = Allocator());
    template <class InputIterator>
      multiset(InputIterator first, InputIterator last, const Allocator& a)
        : multiset(first, last, Compare(), a) { }
    multiset(initializer_list<value_type> il, const Allocator& a)
      : multiset(il, Compare(), a) { }
   ~multiset();
    multiset& operator=(const multiset& x);
    multiset& operator=(multiset&& x)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               is_nothrow_move_assignable<Compare>::value);
    multiset& operator=(initializer_list<value_type>);
    allocator_type get_allocator() const noexcept;

    // [:en] iterators:
    // [|:zh_CN] 迭代器：
    iterator               begin() noexcept;
    const_iterator         begin() const noexcept;
    iterator               end() noexcept;
    const_iterator         end() const noexcept;

    reverse_iterator       rbegin() noexcept;
    const_reverse_iterator rbegin() const noexcept;
    reverse_iterator       rend() noexcept;
    const_reverse_iterator rend() const noexcept;

    const_iterator         cbegin() const noexcept;
    const_iterator         cend() const noexcept;
    const_reverse_iterator crbegin() const noexcept;
    const_reverse_iterator crend() const noexcept;

    // [:en] capacity:
    // [|:zh_CN] 容量：
    bool      empty() const noexcept;
    size_type size() const noexcept;
    size_type max_size() const noexcept;

    // [:en] modifiers:
    // [|:zh_CN] 改动函数：
    template <class... Args> iterator emplace(Args&&... args);
    template <class... Args> iterator emplace_hint(const_iterator position, Args&&... args);
    iterator insert(const value_type& x);
    iterator insert(value_type&& x);
    iterator insert(const_iterator position, const value_type& x);
    iterator insert(const_iterator position, value_type&& x);
    template <class InputIterator>
      void insert(InputIterator first, InputIterator last);
    void insert(initializer_list<value_type>);

    iterator  erase(const_iterator position);
    size_type erase(const key_type& x);
    iterator  erase(const_iterator first, const_iterator last);
    void      swap(multiset&)
      noexcept(allocator_traits<Allocator>::is_always_equal::value &&
               noexcept(swap(declval<Compare&>(), declval<Compare&>())));
    void      clear() noexcept;

    // [:en] observers:
    // [|:zh_CN] 探察函数：
    key_compare key_comp() const;
    value_compare value_comp() const;

    // [:en] set operations:
    // [|:zh_CN] set 的操作：
    iterator       find(const key_type& x);
    const_iterator find(const key_type& x) const;
    template <class K> iterator       find(const K& x);
    template <class K> const_iterator find(const K& x) const;

    size_type      count(const key_type& x) const;
    template <class K> size_type count(const K& x) const;

    iterator       lower_bound(const key_type& x);
    const_iterator lower_bound(const key_type& x) const;
    template <class K> iterator       lower_bound(const K& x);
    template <class K> const_iterator lower_bound(const K& x) const;

    iterator       upper_bound(const key_type& x);
    const_iterator upper_bound(const key_type& x) const;
    template <class K> iterator       upper_bound(const K& x);
    template <class K> const_iterator upper_bound(const K& x) const;

    pair<iterator, iterator>               equal_range(const key_type& x);
    pair<const_iterator, const_iterator>   equal_range(const key_type& x) const;
    template <class K>
      pair<iterator, iterator>             equal_range(const K& x);
    template <class K>
      pair<const_iterator, const_iterator> equal_range(const K& x) const;
  };

  template <class Key, class Compare, class Allocator>
    bool operator==(const multiset<Key, Compare, Allocator>& x,
                    const multiset<Key, Compare, Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator< (const multiset<Key, Compare, Allocator>& x,
                    const multiset<Key, Compare, Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator!=(const multiset<Key, Compare, Allocator>& x,
                    const multiset<Key, Compare, Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator> (const multiset<Key, Compare, Allocator>& x,
                    const multiset<Key, Compare, Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator>=(const multiset<Key, Compare, Allocator>& x,
                    const multiset<Key, Compare, Allocator>& y);
  template <class Key, class Compare, class Allocator>
    bool operator<=(const multiset<Key, Compare, Allocator>& x,
                    const multiset<Key, Compare, Allocator>& y);

  // [:en] specialized algorithms:
  // [|:zh_CN] 特化的算法：
  template <class Key, class Compare, class Allocator>
    void swap(multiset<Key, Compare, Allocator>& x,
              multiset<Key, Compare, Allocator>& y)
      noexcept(noexcept(x.swap(y)));
}
[codeblock:end]
[%@library multiset[!operator==]]
[%@library multiset[!operator<]]
