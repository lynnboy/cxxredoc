[section#namespace.qual
    [:en] Namespace members
    [:zh_CN] 
]

[para]
[:en]
[%lookup[!namespace member]]
If the [~nested-name-specifier] of a [~qualified-id] nominates a namespace
(including the case where the [~nested-name-specifier] is [`::], i.e.,
nominating the global namespace), the name specified after the
[~nested-name-specifier] is looked up in the scope of the namespace.

[:en]
The names in a [~template-argument] of a [~template-id] are looked up in the
context in which the entire [~postfix-expression] occurs.

[para]
[:en]
For a namespace [`X] and name [`m], the namespace-qualified lookup set
[$S(X, m)] is defined as follows:

[:en]
Let [$S'(X, m)] be the set of all declarations of [`m] in [`X] and the inline
namespace set of [`X] ([#namespace.def]).

[:en]
If [$S'(X, m)] is not empty, [$S(X, m)] is [$S'(X, m)]; otherwise, [$S(X, m)] is
the union of [$S(N_i, m)] for all namespaces [$N[_i]] nominated by
[~using-directives] in [`X] and its inline namespace set.

[para]
[:en]
Given [`X::m] (where [`X] is a user-declared namespace), or given [`::m] (where
[`X] is the global namespace), if [$S(X, m)] is the empty set, the program is
ill-formed.

[:en]
Otherwise, if [$S(X, m)] has exactly one member, or if the context of the
reference is a [~using-declaration] ([#namespace.udecl]), [$S(X, m)] is the
required set of declarations of [`m].

[:en]
Otherwise if the use of [`m] is not one that allows a unique declaration to be
chosen from [$S(X, m)], the program is ill-formed.

[enter:example]

[codeblock]
int x;
namespace Y {
  void f(float);
  void h(int);
}

namespace Z {
  void h(double);
}

namespace A {
  using namespace Y;
  void f(int);
  void g(int);
  int i;
}

namespace B {
  using namespace Z;
  void f(char);
  int i;
}

namespace AB {
  using namespace A;
  using namespace B;
  void g();
}

void h()
{
  AB::g();          // [:en] [`g] is declared directly in [`AB,]
                    // [:en@~] therefore [`S] is { [`AB::g()] } and [`AB::g()] is chosen
  AB::f(1);         // [:en] [`f] is not declared directly in [`AB] so the rules are
                    // [:en@~] applied recursively to [`A] and [`B];
                    // [:en@~] namespace [`Y] is not searched and [`Y::f(float)]
                    // [:en@~] is not considered;
                    // [:en] [`S] is { [`A::f(int)], [`B::f(char)] } and overload
                    // [:en@~] resolution chooses [`A::f(int)]
  AB::f('c');       // [:en] as above but resolution chooses [`B::f(char)]

  AB::x++;          // [:en] [`x] is not declared directly in [`AB], and
                    // [:en@~] is not declared in [`A] or [`B] , so the rules are
                    // [:en@~] applied recursively to [`Y] and [`Z],
                    // [:en] [`S] is { } so the program is ill-formed
  AB::i++;          // [:en] [`i] is not declared directly in [`AB] so the rules are
                    // [:en@~] applied recursively to [`A] and [`B],
                    // [:en] [`S] is { [`A::i] , [`B::i] } so the use is ambiguous
                    // [:en@~] and the program is ill-formed
  AB::h(16.8);      // [:en] [`h] is not declared directly in [`AB] and
                    // [:en@~] not declared directly in [`A] or [`B] so the rules are
                    // [:en@~] applied recursively to [`Y] and [`Z],
                    // [:en] [`S] is { [`Y::h(int)], [`Z::h(double)] } and overload
                    // [:en@~] resolution chooses [`Z::h(double)]
}
[codeblock:end]

[para]
[:en]
The same declaration found more than once is not an ambiguity (because it is
still a unique declaration).

[:en]
For example:

[codeblock]
namespace A {
  int a;
}

namespace B {
  using namespace A;
}

namespace C {
  using namespace A;
}

namespace BC {
  using namespace B;
  using namespace C;
}

void f()
{
  BC::a++;          // [:en] OK: [`S] is { [`A::a], [`A::a] }
}

namespace D {
  using A::a;
}

namespace BD {
  using namespace B;
  using namespace D;
}

void g()
{
  BD::a++;          // [:en] OK: S is { [`A::a], [`A::a] }
}
[codeblock:end]

[para]
[:en]
Because each referenced namespace is searched at most once, the following is
well-defined:

[codeblock]
namespace B {
  int b;
}

namespace A {
  using namespace B;
  int a;
}

namespace B {
  using namespace A;
}

void f()
{
  A::a++;           // [:en] OK: [`a] declared directly in [`A], [`S] is {[`A::a]}
  B::a++;           // [:en] OK: both [`A] and [`B] searched (once), [`S] is {[`A::a]}
  A::b++;           // [:en] OK: both [`A] and [`B] searched (once), [`S] is {[`B::b]}
  B::b++;           // [:en] OK: [`b] declared directly in [`B], [`S] is {[`B::b]}
}
[codeblock:end]
[exit:example]

[para]
[:en]
During the lookup of a qualified namespace member name, if the lookup finds more
than one declaration of the member, and if one declaration introduces a class
name or enumeration name and the other declarations either introduce the same
variable, the same enumerator or a set of functions, the non-type name hides the
class or enumeration name if and only if the declarations are from the same
namespace; otherwise (the declarations are from different namespaces), the
program is ill-formed.

[enter:example]

[codeblock]
namespace A {
  struct x { };
  int x;
  int y;
}

namespace B {
  struct y { };
}

namespace C {
  using namespace A;
  using namespace B;
  int i = C::x;     // [:en] OK, [`A::x] (of type [`int])
  int j = C::y;     // [:en] ambiguous, [`A::y] or [`B::y]
}
[codeblock:end]
[exit:example]

[para]
[:en]
In a declaration for a namespace member in which the [~declarator-id] is a
[~qualified-id], given that the [~qualified-id] for the namespace member has the
form

[syntax:descriptive]
[~nested-name-specifier] [~unqualified-id]
[syntax:end]

[:en@~]
the [~unqualified-id] shall name a member of the namespace designated by the
[~nested-name-specifier] or of an element of the inline namespace set
([#namespace.def]) of that namespace.

[enter:example]

[codeblock]
namespace A {
  namespace B {
    void f1(int);
  }
  using namespace B;
}
void A::f1(int){ }  // [:en] ill-formed, [`f1] is not a member of [`A]
[codeblock:end]

[exit:example]

[:en]
However, in such namespace member declarations, the [~nested-name-specifier] may
rely on [~using-directive]s to implicitly provide the initial part of the
[~nested-name-specifier].

[enter:example]

[codeblock]
namespace A {
  namespace B {
    void f1(int);
  }
}

namespace C {
  namespace D {
    void f1(int);
  }
}

using namespace A;
using namespace C::D;
void B::f1(int){ }  // [:en] OK, defines [`A::B::f1(int)]
[codeblock:end]
[exit:example]
