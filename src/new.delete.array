[section#new.delete.array
    [:en] Array forms
]

[%@library new[!operator]]
[codeblock:declaration]
void* operator new[](std::size_t size);
[codeblock:end]

[enter:description]
[para:effects]
[:en]
The [+allocation function] ([#basic.stc.dynamic.allocation]) called by the array
form of a [~new-expression] ([#expr.new]) to allocate [`size] bytes of storage
suitably aligned to represent any array object of that size or smaller.

[footnote]
[:en]
It is not the direct responsibility of [`operator new[`](std::size_t)] or
[`operator delete[`](void*)] to note the repetition count or element size of the
array.

[:en]
Those operations are performed elsewhere in the array [`new] and [`delete]
expressions.

[:en]
The array [`new] expression, may, however, increase the [`size] argument to
[`operator new[`](std::size_t)] to obtain space to store supplemental
information.
[footnote:end]

[para:replaceable]
[:en]
a [=Cpp] program can define a function with this function signature that
displaces the default version defined by the [=Cpp] standard library.

[para:required]
[:en]
Same as for [`operator new(std::size_t)].

[:en]
This requirement is binding on a replacement version of this function.

[para:default]
[:en]
Returns [`operator new(size)].
[exit:description]

[%@library new[!operator]]
[codeblock:declaration]
void* operator new[](std::size_t size, const std::nothrow_t&) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en]
Same as above, except that it is called by a placement version of a
[~new-expression] when a [=Cpp] program prefers a null pointer result as an
error indication, instead of a [`bad_alloc] exception.

[para:replaceable]
[:en]
a [=Cpp] program can define a function with this function signature that
displaces the default version defined by the [=Cpp] standard library.

[para:required]
[:en]
Return a non-null pointer to suitably aligned storage ([#basic.stc.dynamic]),
or return a null pointer.

[:en]
This requirement is binding on a replacement version of this function.

[para:default]
[:en]
Calls [`operator new[`](size)]. If the call returns normally, returns the result
of that call.

[:en]
Otherwise, returns a null pointer.
[exit:description]

[%@library delete[!operator]]
[codeblock:declaration]
void operator delete[](void* ptr) noexcept;
void operator delete[](void* ptr, std::size_t size) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en]
The [+deallocation function] ([#basic.stc.dynamic.deallocation]) called by the
array form of a [~delete-expression] to render the value of [`ptr] invalid.

[para:replaceable]
[:en]
a [=Cpp] program can define a function with signature [`void operator
delete[`](void* ptr) noexcept] that displaces the default version defined by the
[=Cpp] standard library.

[:en]
If this function (without [`size] parameter) is defined, the program should also
define [`void operator delete[`](void* ptr, std::size_t size) noexcept].

[:en]
If this function with [`size] parameter is defined, the program shall also
define the version without the [`size] parameter.

[enter:note]
[:en]
The default behavior below may change in the future, which will require
replacing both deallocation functions when replacing the allocation function.
[exit:note]

[para:requires]
[:en]
[$ptr] shall be a null pointer or its value shall be the value returned by an
earlier call to [`operator new[`](std::size_t)] or [`operator
new[`](std::size_t,const std::nothrow_t&)] which has not been invalidated by an
intervening call to [`operator delete[`](void*)].

[para:requires]
[:en]
If present, the [`std::size_t size] argument must equal the size argument passed
to the allocation function that returned [`ptr].

[para:required]
[:en]
Calls to [`operator delete[`](void* ptr, std::size_t size)] may be changed to
calls to [`operator delete[`](void* ptr)] without affecting memory allocation.

[enter:note]
[:en]
A conforming implementation is for [`operator delete[`](void* ptr, std::size_t size)} to simply call
[`operator delete[](void* ptr)}. [exit:note]

[para:requires]
[:en]
If an implementation has strict pointer safety ([#basic.stc.dynamic.safety])
then [`ptr] shall be a safely-derived pointer.

[para:default]
[:en]
[`operator delete[`](void* ptr, std::size_t size)] calls [`operator
delete[`](ptr)], and [`operator delete[`](void* ptr)] calls [`operator
delete(ptr)].
[exit:description]

[%@library delete[!operator]]
[codeblock:declaration]
void operator delete[](void* ptr, const std::nothrow_t&) noexcept;
void operator delete[](void* ptr, std::size_t size, const std::nothrow_t&) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en]
The
[+deallocation function] ([#basic.stc.dynamic.deallocation]) called by the
implementation to render the value of [`ptr] invalid when the constructor
invoked from a nothrow placement version of the array [~new-expression] throws
an exception.

[para:replaceable]
[:en]
a [=Cpp] program may define a function with signature [`void operator
delete[`](void* ptr, const std::nothrow_t&) noexcept] that displaces the default
version defined by the [=Cpp] standard library.

[:en]
If this function (without [`size] parameter) is defined, the program should also
define [`void operator delete[`](void* ptr, std::size_t size, const
std::nothrow_t&) noexcept].

[:en]
If this function with [`size] parameter is defined, the program shall also
define the version without the [`size] parameter.

[enter:note]
[:en]
The default behavior below may change in the future, which will require
replacing both deallocation functions when replacing the allocation function.
[exit:note]

[para:requires]
[:en]
If an implementation has strict pointer safety ([#basic.stc.dynamic.safety])
then [`ptr] shall be a safely-derived pointer.

[para:requires]
[:en]
If present, the [`std::size_t size] argument must equal the size argument
passed to the allocation function that returned [`ptr].

[para:required]
[:en]
Calls to [`operator delete[`](void* ptr, std::size_t size, const
std::nothrow_t&)] may be changed to calls to [`operator delete[`](void* ptr,
const std::nothrow_t&)] without affecting memory allocation.

[enter:note]
[:en]
A conforming implementation is for [`operator delete[`](void* ptr, std::size_t
size, const std::nothrow_t&)} to simply call [`operator delete[`](void* ptr,
const std::nothrow_t&)].
[exit:note]

[para:default]
[:en]
[`operator delete[`](void* ptr, std::size_t size, const std::nothrow_t&)] calls
[`operator delete[`](ptr, std::nothrow)], and [`operator delete[`](void* ptr,
const std::nothrow_t&)] calls [`operator delete[`](ptr)].
[exit:description]
