[section#numeric.limits
    [:en] Class template [`numeric_limits]
    [:zh_CN] 类模板 [`numeric_limits]
]

[%@library numeric_limits]
[codeblock:synopsis]
namespace std {
  template<class T> class numeric_limits {
  public:
    static constexpr bool is_specialized = false;
    static constexpr T min() noexcept { return T(); }
    static constexpr T max() noexcept { return T(); }
    static constexpr T lowest() noexcept { return T(); }

    static constexpr int  digits = 0;
    static constexpr int  digits10 = 0;
    static constexpr int  max_digits10 = 0;
    static constexpr bool is_signed = false;
    static constexpr bool is_integer = false;
    static constexpr bool is_exact = false;
    static constexpr int  radix = 0;
    static constexpr T epsilon() noexcept { return T(); }
    static constexpr T round_error() noexcept { return T(); }

    static constexpr int  min_exponent = 0;
    static constexpr int  min_exponent10 = 0;
    static constexpr int  max_exponent = 0;
    static constexpr int  max_exponent10 = 0;

    static constexpr bool has_infinity = false;
    static constexpr bool has_quiet_NaN = false;
    static constexpr bool has_signaling_NaN = false;
    static constexpr float_denorm_style has_denorm = denorm_absent;
    static constexpr bool has_denorm_loss = false;
    static constexpr T infinity() noexcept { return T(); }
    static constexpr T quiet_NaN() noexcept { return T(); }
    static constexpr T signaling_NaN() noexcept { return T(); }
    static constexpr T denorm_min() noexcept { return T(); }

    static constexpr bool is_iec559 = false;
    static constexpr bool is_bounded = false;
    static constexpr bool is_modulo = false;

    static constexpr bool traps = false;
    static constexpr bool tinyness_before = false;
    static constexpr float_round_style round_style = round_toward_zero;
  };

  template<class T> class numeric_limits<const T>;
  template<class T> class numeric_limits<volatile T>;
  template<class T> class numeric_limits<const volatile T>;
}
[codeblock:end]

[para]
[:en]
The default [`numeric_limits<T>] template shall have all members, but with 0 or
[`false] values.
[:zh_CN]
缺省的 [`numeric_limits<T>] 模板应当带有所有的成员，但值为 0 或 [`false]。

[para]
[:en]
The value of each member of a specialization of [`numeric_limits] on a
[$cv]-qualified type [`cv T] shall be equal to the value of the corresponding
member of the specialization on the unqualified type [`T].
[:zh_CN]
[`numeric_limits] 对被 [$cv]-限定的类型 [`cv T] 的特例中的每个成员的值应当与其在
对未限定的类型 [`T] 的特例中的对应成员的值相同。
