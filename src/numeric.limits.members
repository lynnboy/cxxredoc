[section#numeric.limits.members
    [:en] [`numeric_limits] members
    [:zh_CN] [`numeric_limits] 的成员
]

[%@library min[!numeric_limits]]
[%@library numeric_limits[!min]]

[codeblock:declaration]
static constexpr T min() noexcept;
[codeblock:end]

[enter:description]
[para]
[:en]
Minimum finite value.
[:zh_CN]
最小有穷值。

[footnote]
[:en]
Equivalent to [`CHAR_MIN], [`SHRT_MIN], [`FLT_MIN], [`DBL_MIN], etc.
[:zh_CN]
等价于 [`CHAR_MIN]，[`SHRT_MIN]，[`FLT_MIN]，[`DBL_MIN]，等等。
[footnote:end]

[para]
[:en]
For floating types with denormalization, returns the minimum positive normalized
value.
[:zh_CN]
对于允许非规格化的浮点类型，返回最小规格化正数值。

[para]
[:en]
Meaningful for all specializations in which [`is_bounded != false], or
[`is_bounded == false && is_signed == false].
[:zh_CN]
对于所有 [`is_bounded != false]，或者
[`is_bounded == false && is_signed == false] 的特例有意义。
[exit:description]

[%@library max[!numeric_limits]] [%@library numeric_limits[!max]]
[codeblock:declaration]
static constexpr T max() noexcept;
[codeblock:end]

[enter:description]
[para]
[:en]
Maximum finite value.
[:zh_CN]
最大有穷值。

[footnote]
[:en]
Equivalent to [`CHAR_MAX], [`SHRT_MAX], [`FLT_MAX], [`DBL_MAX], etc.
[:zh_CN]
等价于 [`CHAR_MAX]，[`SHRT_MAX]，[`FLT_MAX]，[`DBL_MAX]，等等。
[footnote:end]

[para]
[:en]
Meaningful for all specializations in which [`is_bounded != false].
[:zh_CN]
对于所有 [`is_bounded != false] 的特例有意义。
[exit:description]

[%@library lowest[!numeric_limits]] [%@library numeric_limits[!lowest]]
[codeblock:declaration]
static constexpr T lowest() noexcept;
[codeblock:end]

[enter:description]
[para]
[:en]
A finite value [`x] such that there is no other finite value [`y] where
[`y < x].
[:zh_CN]
有穷值 [`x]，使得不存在满足 [`y < x] 的其他有穷值 [`y]。

[footnote]
[:en]
[`lowest()] is necessary because not all floating-point representations have a
smallest (most negative) value that is the negative of the largest (most
positive) finite value.
[:zh_CN]
[`lowest()] 是必要的，这是由于不是所有浮点表示的最小值（通常为负）都是其最大的
有穷值（通常为正）的相反数。
[footnote:end]

[para]
[:en]
Meaningful for all specializations in which [`is_bounded != false].
[:zh_CN]
对于所有 [`is_bounded != false] 的特例有意义。
[exit:description]

[%@library digits[!numeric_limits]] [%@library numeric_limits[!digits]]
[codeblock:declaration]
static constexpr int digits;
[codeblock:end]

[enter:description]
[para]
[:en]
Number of [`radix] digits that can be represented without change.
[:zh_CN]
以 [`radix] 为基的数字可以不改变地表示的数量。

[para]
[:en]
For integer types, the number of non-sign bits in the representation.
[:zh_CN]
对于整数类型，为其表示中非符号位的数量。

[para]
[:en]
For floating point types, the number of [`radix] digits in the mantissa.
[:zh_CN]
对于浮点类型，在其尾数中以 [`radix] 为基的数字的个数。

[footnote]
[:en]
Equivalent to [`FLT_MANT_DIG], [`DBL_MANT_DIG], [`LDBL_MANT_DIG].
[:zh_CN]
等价于 [`FLT_MANT_DIG]，[`DBL_MANT_DIG]，[`LDBL_MANT_DIG]。
[footnote:end]
[exit:description]

[%@library digits10[!numeric_limits]] [%@library numeric_limits[!digits10]]
[codeblock:declaration]
static constexpr int digits10;
[codeblock:end]

[enter:description]
[para]
[:en]
Number of base 10 digits that can be represented without change.
[:zh_CN]
以 10 为基的数字可以不改变地表示的数量。

[footnote]
[:en]
Equivalent to [`FLT_DIG], [`DBL_DIG], [`LDBL_DIG].
[:zh_CN]
等价于 [`FLT_DIG]，[`DBL_DIG]，[`LDBL_DIG]。
[footnote:end]

[para]
[:en]
Meaningful for all specializations in which [`is_bounded != false].
[:zh_CN]
对于所有 [`is_bounded != false] 的特例有意义。
[exit:description]

[%@library max_digits10[!numeric_limits]]
[%@library numeric_limits[!max_digits10]]
[codeblock:declaration]
static constexpr int max_digits10;
[codeblock:end]

[enter:description]
[para]
[:en]
Number of base 10 digits required to ensure that values which differ are always
differentiated.
[:zh_CN]
保证不同的值总能被区分开所需要的以 10 为基的数字。

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。
[exit:description]

[%@library is_signed[!numeric_limits]]
[%@library numeric_limits[!is_signed]]
[codeblock:declaration]
static constexpr bool is_signed;
[codeblock:end]

[enter:description]
[para]
[:en]
True if the type is signed.
[:zh_CN]
若该类型有符号则为真。

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[exit:description]

[%@library is_integer[!numeric_limits]]
[%@library numeric_limits[!is_integer]]
[codeblock:declaration]
static constexpr bool is_integer;
[codeblock:end]

[enter:description]
[para]
[:en]
True if the type is integer.
[:zh_CN]
若该类型为整数则为真。

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[exit:description]

[%@library is_exact[!numeric_limits]]
[%@library numeric_limits[!is_exact]]
[codeblock:declaration]
static constexpr bool is_exact;
[codeblock:end]

[enter:description]
[para]
[:en]
True if the type uses an exact representation.
[:zh_CN]
若该类型使用了精确表示则为真。

[:en]
All integer types are exact, but not all exact types are integer.
[:zh_CN]
所有整数类型都是精确的，但不是所有的精确类型都是整数。

[:en]
For example, rational and fixed-exponent representations are exact but not
integer.
[:zh_CN]
例如，有理数和固定指数表示是精确的但不是整数。

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[exit:description]

[%@library radix[!numeric_limits]]
[%@library numeric_limits[!radix]]
[codeblock:declaration]
static constexpr int radix;
[codeblock:end]

[enter:description]
[para]
[:en]
For floating types, specifies the base or radix of the exponent representation
(often 2).
[:zh_CN]
对于浮点类型，指定其指数表示的基或基数（通常为 2）。

[footnote]
[:en]
Equivalent to [`FLT_RADIX].
[:zh_CN]
等价于 [`FLT_RADIX]。
[footnote:end]

[para]
[:en]
For integer types, specifies the base of the representation.
[:zh_CN]
对于整数类型，指定其表示的基。

[footnote]
[:en]
Distinguishes types with bases other than 2 (e.g. BCD).
[:zh_CN]
区别不以 2 为基的类型（比如 BCD）。
[footnote:end]

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[exit:description]

[%@library epsilon[!numeric_limits]]
[%@library numeric_limits[!epsilon]]
[codeblock:declaration]
static constexpr T epsilon() noexcept;
[codeblock:end]

[enter:description]
[para]
[:en]
Machine epsilon: the difference between 1 and the least value greater than 1
that is representable.
[:zh_CN]
机器 [=epsilon]：1 与大于 1 的可表示的最小值的差。

[footnote]
[:en]
Equivalent to [`FLT_EPSILON], [`DBL_EPSILON], [`LDBL_EPSILON].
[:zh_CN]
等价于 [`FLT_EPSILON]，[`DBL_EPSILON]，[`LDBL_EPSILON]。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。
[exit:description]

[%@library round_error[!numeric_limits]]
[%@library numeric_limits[!round_error]]
[codeblock:declaration]
static constexpr T round_error() noexcept;
[codeblock:end]

[enter:description]
[para]
[:en]
Measure of the maximum rounding error.
[:zh_CN]
最大舍入误差的度量。

[footnote]
[:en]
Rounding error is described in ISO/IEC 10967-1 Language independent arithmetic
- Part 1 Section 5.2.8 and Annex A Rationale Section A.5.2.8
- Rounding constants.
[:zh_CN]
舍入误差在 ISO/IEC 10967-1 语言无关算术 — 第一部分，第 5.2.8 节以及附录 A 原理，
第 A.5.2.8 节—“舍入常量”中描述。
[footnote:end]
[exit:description]

[%@library min_exponent[!numeric_limits]]
[%@library numeric_limits[!min_exponent]]
[codeblock:declaration]
static constexpr int  min_exponent;
[codeblock:end]

[enter:description]
[para]
[:en]
Minimum negative integer such that [`radix] raised to the power of one less than
that integer is a normalized floating point number.
[:zh_CN]
使得以 [`radix] 为底指数比该整数小一的幂为规格化浮点数的最小负整数。

[footnote]
[:en]
Equivalent to [`FLT_MIN_EXP], [`DBL_MIN_EXP], [`LDBL_MIN_EXP].
[:zh_CN]
等价于 [`FLT_MIN_EXP]，[`DBL_MIN_EXP]，[`LDBL_MIN_EXP]。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。
[exit:description]

[%@library min_exponent10[!numeric_limits]]
[%@library numeric_limits[!min_exponent10]]
[codeblock:declaration]
static constexpr int  min_exponent10;
[codeblock:end]

[enter:description]
[para]
[:en]
Minimum negative integer such that 10 raised to that power is in the range
of normalized floating point numbers.
[:zh_CN]
使得以 10 为底的该指数的幂处于规格化浮点数的值域之中的最小负整数。

[footnote]
[:en]
Equivalent to [`FLT_MIN_10_EXP], [`DBL_MIN_10_EXP], [`LDBL_MIN_10_EXP].
[:zh_CN]
等价于 [`FLT_MIN_10_EXP]，[`DBL_MIN_10_EXP]，[`LDBL_MIN_10_EXP]。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。
[exit:description]

[%@library max_exponent[!numeric_limits]]
[%@library numeric_limits[!max_exponent]]
[codeblock:declaration]
static constexpr int  max_exponent;
[codeblock:end]

[enter:description]
[para]
[:en]
Maximum positive integer such that [`radix] raised to the power one less than
that integer is a representable finite floating point number.
[:zh_CN]
使得以 [`radix] 为底指数比该整数小一的幂为可表示的有穷的浮点数的最大正整数。

[footnote]
[:en]
Equivalent to [`FLT_MAX_EXP], [`DBL_MAX_EXP], [`LDBL_MAX_EXP].
[:zh_CN]
等价于 [`FLT_MAX_EXP]，[`DBL_MAX_EXP]，[`LDBL_MAX_EXP]。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。
[exit:description]

[%@library max_exponent10[!numeric_limits]]
[%@library numeric_limits[!max_exponent10]]
[codeblock:declaration]
static constexpr int  max_exponent10;
[codeblock:end]

[enter:description]
[para]
[:en]
Maximum positive integer such that 10 raised to that power is in the range of
representable finite floating point numbers.
[:zh_CN]
使得以 10 为底的该指数的幂处于可表示的有穷的浮点数的值域之中的最大正整数。

[footnote]
[:en]
Equivalent to [`FLT_MAX_10_EXP], [`DBL_MAX_10_EXP], [`LDBL_MAX_10_EXP].
[:zh_CN]
等价于 [`FLT_MAX_10_EXP]，[`DBL_MAX_10_EXP]，[`LDBL_MAX_10_EXP]。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。
[exit:description]

[%@library has_infinity[!numeric_limits]]
[%@library numeric_limits[!has_infinity]]
[codeblock:declaration]
static constexpr bool has_infinity;
[codeblock:end]

[enter:description]
[para]
[:en]
True if the type has a representation for positive infinity.
[:zh_CN]
若该类型具有正无穷的表示则为真。

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。

[para]
[:en]
Shall be [`true] for all specializations in which [`is_iec559 != false].
[:zh_CN]
对于所有 [`is_iec559 != false] 的特例应当为 [`true]。
[exit:description]

[%@library has_quiet_NaN[!numeric_limits]]
[%@library numeric_limits[!has_quiet_NaN]]
[codeblock:declaration]
static constexpr bool has_quiet_NaN;
[codeblock:end]

[enter:description]
[para]
[:en]
True if the type has a representation for a quiet (non-signaling) ["Not a
Number.]
[:zh_CN]
若该类型具有静默（无信号的）“非数字（NaN）”的表示则为真。

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。

[para]
[:en]
Shall be [`true] for all specializations in which [`is_iec559 != false].
[:zh_CN]
对于所有 [`is_iec559 != false] 的特例应当为 [`true]。
[exit:description]

[%@library has_signaling_NaN[!numeric_limits]]
[%@library numeric_limits[!has_signaling_NaN]]
[codeblock:declaration]
static constexpr bool has_signaling_NaN;
[codeblock:end]

[enter:description]
[para]
[:en]
True if the type has a representation for a signaling ["Not a Number.]
[:zh_CN]
若该类型具有信号“非数字（NaN）”的表示则为真。

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。

[para]
[:en]
Shall be [`true] for all specializations in which [`is_iec559 != false].
[:zh_CN]
对于所有 [`is_iec559 != false] 的特例应当为 [`true]。
[exit:description]

[%@library float_denorm_style[!numeric_limits]]
[%@library numeric_limits[!float_denorm_style]]
[codeblock:declaration]
static constexpr float_denorm_style has_denorm;
[codeblock:end]

[enter:description]
[para]
[:en]
[`denorm_present] if the type allows denormalized values (variable number of
exponent bits)
[:zh_CN]
若该类型允许非规格化值（指数位数可变）则为 [`denorm_present]

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[:en@~]
, [`denorm_absent] if the type does not allow denormalized values, and
[`denorm_indeterminate] if it is indeterminate at compile time whether the type
allows denormalized values.
[:zh_CN@~]
，若该类型不允许非规格化值则为 [`denorm_absent]，而若在编译时无法确定该类型是否
允许非规格化值则为 [`denorm_indeterminate]。

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。
[exit:description]

[%@library has_denorm_loss[!numeric_limits]]
[%@library numeric_limits[!has_denorm_loss]]
[codeblock:declaration]
static constexpr bool has_denorm_loss;
[codeblock:end]

[enter:description]
[para]
[:en]
True if loss of accuracy is detected as a denormalization loss, rather than as
an inexact result.
[:zh_CN]
若精度损失被检测为非规格化损失而不是非精确的结果则为真。

[footnote]
[:en]
See IEC 559.
[:zh_CN]
参见 IEC 559。
[footnote:end]
[exit:description]

[%@library infinity[!numeric_limits]]
[%@library numeric_limits[!infinity]]
[codeblock:declaration]
static constexpr T infinity() noexcept;
[codeblock:end]

[enter:description]
[para]
[:en]
Representation of positive infinity, if available.
[:zh_CN]
如果可用则表示正无穷。

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[para]
[:en]
Meaningful for all specializations for which [`has_infinity != false].
[:zh_CN]
对于所有 [`has_infinity != false] 的特例有意义。

[:en]
Required in specializations for which [`is_iec559 != false].
[:zh_CN]
在 [`is_iec559 != false] 的特例中是必要的。
[exit:description]

[%@library quiet_NaN[!numeric_limits]]
[%@library numeric_limits[!quiet_NaN]]
[codeblock:declaration]
static constexpr T quiet_NaN() noexcept;
[codeblock:end]

[enter:description]
[para]
[:en]
Representation of a quiet ["Not a Number,] if available.
[:zh_CN]
如果可用则表示静默“非数字（NaN）”。

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[para]
[:en]
Meaningful for all specializations for which [`has_quiet_NaN != false].
[:zh_CN]
对于所有 [`has_infinity != false] 的特例有意义。

[:en]
Required in specializations for which [`is_iec559 != false].
[:zh_CN]
在 [`is_iec559 != false] 的特例中是必要的。
[exit:description]

[%@library signaling_NaN[!numeric_limits]]
[%@library numeric_limits[!signaling_NaN]]
[codeblock:declaration]
static constexpr T signaling_NaN() noexcept;
[codeblock:end]

[enter:description]
[para]
[:en]
Representation of a signaling ["Not a Number,] if available.
[:zh_CN]
如果可用则表示信号“非数字（NaN）”。

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[para]
[:en]
Meaningful for all specializations for which [`has_signaling_NaN != false].
[:zh_CN]
对于所有 [`has_infinity != false] 的特例有意义。

[:en]
Required in specializations for which [`is_iec559 != false].
[:zh_CN]
在 [`is_iec559 != false] 的特例中是必要的。
[exit:description]

[%@library denorm_min[!numeric_limits]]
[%@library numeric_limits[!denorm_min]]
[codeblock:declaration]
static constexpr T denorm_min() noexcept;
[codeblock:end]

[enter:description]
[para]
[:en]
Minimum positive denormalized value.
[:zh_CN]
最小正数非规格化值。

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。

[para]
[:en]
In specializations for which [`has_denorm == false], returns the minimum
positive normalized value.
[:zh_CN]
对于 [`has_denorm == false] 的特例，返回最小正数规格化值。
[exit:description]

[%@library is_iec559[!numeric_limits]]
[%@library numeric_limits[!is_iec559]]
[codeblock:declaration]
static constexpr bool is_iec559;
[codeblock:end]

[enter:description]
[para]
[:en]
True if and only if the type adheres to IEC 559 standard.
[:zh_CN]
当且仅当该类型符合 IEC 559 标准时为真。

[footnote]
[:en]
International Electrotechnical Commission standard 559 is the same as IEEE 754.
[:zh_CN]
国际电子技术委员会标准 559 与 IEEE 754 相同。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。
[exit:description]

[%@library is_bounded[!numeric_limits]]
[%@library numeric_limits[!is_bounded]]
[codeblock:declaration]
static constexpr bool is_bounded;
[codeblock:end]

[enter:description]
[para]
[:en]
True if the set of values representable by the type is finite.
[:zh_CN]
若该类型可表示的值的集合是有穷的则为真。

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[enter:note]
[:en]
All fundamental types ([#basic.fundamental]) are bounded.
[:zh_CN]
所有基础类型（[#basic.fundamental]）都是有界的。

[:en]
This member would be false for arbitrary precision types.
[:zh_CN]
此成员对于任意精度类型应该为假。
[exit:note]

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[exit:description]

[%@library is_modulo[!numeric_limits]]
[%@library numeric_limits[!is_modulo]]
[codeblock:declaration]
static constexpr bool is_modulo;
[codeblock:end]

[enter:description]
[para]
[:en]
True if the type is modulo.
[:zh_CN]
若该类型按模计算则为真。

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[:en]
A type is modulo if, for any operation involving [`+], [`-], or [`*] on values
of that type whose result would fall outside the range [=crange[min(),max()],
the value returned differs from the true value by an integer multiple of
[`max() - min() + 1].
[:zh_CN]
若对于某个类型的值进行涉及 [`+]、[`-] 或 [`*] 的任何操作的结果可能超出范围
[=crange[min(),max()]，其所返回的值与真值之间相差 [`max() - min() + 1] 的整数倍
，则该类型是按模计算的。

[para]
[:en]
On most machines, this is [`false] for floating types, [`true] for unsigned
integers, and [`true] for signed integers.
[:zh_CN]
在多数机器上，它对浮点类型为 [`false]，对无符号整数为 [`true]，而对有符号整数为
[`true]。

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[exit:description]

[%@library traps[!numeric_limits]]
[%@library numeric_limits[!traps]]
[codeblock:declaration]
static constexpr bool traps;
[codeblock:end]

[enter:description]
[para]
[:en]
[`true] if, at program startup, there exists a value of the type that would
cause an arithmetic operation using that value to trap.
[:zh_CN]
在程序启动时，若存在该类型的一个值，能够导致使用该值的算术操作陷入陷阱，则为
[`true]。

[footnote]
[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[para]
[:en]
Meaningful for all specializations.
[:zh_CN]
对于所有特例有意义。
[exit:description]

[%@library tinyness_before[!numeric_limits]]
[%@library numeric_limits[!tinyness_before]]
[codeblock:declaration]
static constexpr bool tinyness_before;
[codeblock:end]

[enter:description]
[para]
[:en]
[`true] if tinyness is detected before rounding.
[:zh_CN]
若在舍入之前检测微小量则为 [`true]。

[footnote]
[:en]
Refer to IEC 559.
[:zh_CN]
参考 IEC 559。

[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。
[exit:description]

[%@library round_style[!numeric_limits]]
[%@library numeric_limits[!round_style]]
[codeblock:declaration]
static constexpr float_round_style round_style;
[codeblock:end]

[enter:description]
[para]
[:en]
The rounding style for the type.
[:zh_CN]
该类型的舍入方式。

[footnote]
[:en]
Equivalent to [`FLT_ROUNDS].
[:zh_CN]
等价于 [`FLT_ROUNDS]。

[:en]
Required by LIA-1.
[:zh_CN]
由 LIA-1 所规定。
[footnote:end]

[para]
[:en]
Meaningful for all floating point types.
[:zh_CN]
对于所有浮点类型有意义。

[:en]
Specializations for integer types shall return [`round_toward_zero].
[:zh_CN]
整数类型的特例应当返回 [`round_toward_zero]。
[exit:description]
