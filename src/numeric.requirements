[section#numeric.requirements
    [:en] Numeric type requirements
]

[% [:en] requirements[!numeric type]]

[para]
[:en] The [`complex] and [`valarray] components are parameterized by the type of
information they contain and manipulate.

[:en] A [=Cpp] program shall instantiate these components only with a type [`T]
that satisfies the following requirements:

[footnote]
[:en] In other words, value types.

[:en] These include arithmetic types, pointers, the library class [`complex],
and instantiations of [`valarray] for value types.
[footnote:end]

[list]
[item]
[:en] [`T] is not an abstract class (it has no pure virtual member functions);
[item]
[:en] [`T] is not a reference type;
[item]
[:en] [`T] is not cv-qualified;
[item]
[:en] If [`T] is a class, it has a public default constructor;
[item]
[:en] If [`T] is a class, it has a public copy constructor with the signature
[`T::T(const T&)]
[item]
[:en] If [`T] is a class, it has a public destructor;
[item]
[:en] If [`T] is a class, it has a public assignment operator whose signature is
either [`T& T::operator=(const T&)] or [`T& T::operator=(T)]
[item]
[:en] If [`T] is a class, its assignment operator, copy and default
constructors, and destructor shall correspond to each other in the following
sense:

[:en] Initialization of raw storage using the default constructor, followed by
assignment, is semantically equivalent to initialization of raw storage using
the copy constructor.

[para:~]
[:en] Destruction of an object, followed by initialization of its raw storage
using the copy constructor, is semantically equivalent to assignment to the
original object.

[para:~]
[enter:note]
[:en] This rule states that there shall not be any subtle differences in the
semantics of initialization versus assignment.

[:en] This gives an implementation considerable flexibility in how arrays are
initialized.

[para:~]
[enter:example]
[:en] An implementation is allowed to initialize a [`valarray] by allocating
storage using the [`new] operator (which implies a call to the default
constructor for each element) and then assigning each element its value.

[:en] Or the implementation can allocate raw storage and use the copy
constructor to initialize each element.
[exit:example]

[para:~]
[:en] If the distinction between initialization and assignment is important for
a class, or if it fails to satisfy any of the other conditions listed above, the
programmer should use [`vector] ([#vector]) instead of [`valarray] for that
class;
[exit:note]

[item]
[:en] If [`T] is a class, it does not overload unary [`operator&].
[list:end]

[para]
[:en] If any operation on [`T] throws an exception the effects are undefined.

[para]
[:en] In addition, many member and related functions of [`valarray<T>] can be
successfully instantiated and will exhibit well-defined behavior if and only if
[`T] satisfies additional requirements specified for each such member or related
function.

[para]
[enter:example]
[:en] It is valid to instantiate [`valarray<complex>], but [`operator>()] will
not be successfully instantiated for [`valarray<complex>] operands, since
[`complex] does not have any ordering operators.
[exit:example]
