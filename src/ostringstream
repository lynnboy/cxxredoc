[section#ostringstream
    [:en] Class template [`basic_ostringstream]
]

[%@library basic_ostringstream]
[codeblock:synopsis]
namespace std {
  template <class charT, class traits = char_traits<charT>,
        class Allocator = allocator<charT> >
  class basic_ostringstream : public basic_ostream<charT,traits> {
  public:

    // [:en] types:
    typedef charT                     char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;
    typedef traits                    traits_type;
    typedef Allocator                 allocator_type;

    // [:en] [#ostringstream.cons] Constructors/destructor:
    explicit basic_ostringstream(ios_base::openmode which = ios_base::out);
    explicit basic_ostringstream(
             const basic_string<charT,traits,Allocator>& str,
             ios_base::openmode which = ios_base::out);
    basic_ostringstream(const basic_ostringstream& rhs) = delete;
    basic_ostringstream(basic_ostringstream&& rhs);

    // [:en] [#ostringstream.assign] Assign/swap:
    basic_ostringstream& operator=(const basic_ostringstream& rhs) = delete;
    basic_ostringstream& operator=(basic_ostringstream&& rhs);
    void swap(basic_ostringstream& rhs);

    // [:en] [#ostringstream.members] Members:
    basic_stringbuf<charT,traits,Allocator>* rdbuf() const;

    basic_string<charT,traits,Allocator> str() const;
    void    str(const basic_string<charT,traits,Allocator>& s);
   private:
    basic_stringbuf<charT,traits,Allocator> sb; // [=Expos]
  };

  template <class charT, class traits, class Allocator>
  void swap(basic_ostringstream<charT, traits, Allocator>& x,
            basic_ostringstream<charT, traits, Allocator>& y);
}
[codeblock:end]

[para]
[:en] The class [`basic_ostringstream<charT, traits, Allocator>] supports
writing objects of class [`basic_string<charT, traits, Allocator>].

[:en] It uses a [`basic_stringbuf] object to control the associated storage.

[:en] For the sake of exposition, the maintained data is presented here as:

[list]
[item]
[:en] [`sb], the [`stringbuf] object.
[list:end]

[include ostringstream.cons]

[include ostringstream.assign]

[include ostringstream.members]
