[section#over.best.ics
    [:en] Implicit conversion sequences
]

[para]
[:en]
An [+implicit conversion sequence] [%sequence[!implicit conversion]]
is a sequence of conversions used to convert an argument in a function call to
the type of the corresponding parameter of the function being called.

[:en]
The sequence of conversions is an implicit conversion as defined in Clause
[#conv], which means it is governed by the rules for initialization of an object
or reference by a single expression ([#dcl.init], [#dcl.init.ref]).

[para]
[:en]
Implicit conversion sequences are concerned only with the type,
cv-qualification, and value category of the argument and how these are converted
to match the corresponding properties of the parameter.

[:en]
Other properties, such as the lifetime, storage class, alignment, accessibility
of the argument, whether the argument is a bit-field, and whether a function is
deleted ([#dcl.fct.def.delete]), are ignored.

[:en]
So, although an implicit conversion sequence can be defined for a given
argument-parameter pair, the conversion from the argument to the parameter might
still be ill-formed in the final analysis.

[para]
[:en]
A well-formed implicit conversion sequence is one of the following forms:

[list]
[item]
[:en@~] a [+standard conversion sequence] ([#over.ics.scs]),
[item]
[:en@~] a [+user-defined conversion sequence] ([#over.ics.user]), or
[item]
[:en@~] an [+ellipsis conversion sequence] ([#over.ics.ellipsis]).
[list:end]

[para]
[:en]
However, if the target is

[list]
[item]
[:en@~] the first parameter of a constructor or
[item]
[:en@~] the implicit object parameter of a user-defined conversion function
[list:end]

[:en@~]
and the constructor or user-defined conversion function is a candidate by

[list]
[item]
[:en@~] [#over.match.ctor], when the argument is the temporary in the second
step of a class copy-initialization, or
[item]
[:en@~] [#over.match.copy], [#over.match.conv], or [#over.match.ref] (in all
cases),
[list:end]

[:en@~]
user-defined conversion sequences are not considered.

[enter:note]
[:en]
These rules prevent more than one user-defined conversion from being applied
during overload resolution, thereby avoiding infinite recursion.
[exit:note]

[enter:example]
[codeblock]
  struct Y { Y(int); };
  struct A { operator int(); };
  Y y1 = A();  // [:en] error: [`A::operator int()] is not a candidate

  struct X { };
  struct B { operator X(); };
  B b;
  X x({b});    // [:en] error: [`B::operator X()] is not a candidate
[codeblock:end]
[exit:example]

[para]
[:en]
For the case where the parameter type is a reference, see [#over.ics.ref].

[para]
[:en]
When the parameter type is not a reference, the implicit conversion sequence
models a copy-initialization of the parameter from the argument expression.

[:en]
The implicit conversion sequence is the one required to convert the argument
expression to a prvalue of the type of the parameter.

[enter:note]
[:en]
When the parameter has a class type, this is a conceptual conversion defined for
the purposes of Clause [#over]; the actual initialization is defined in terms of
constructors and is not a conversion.
[exit:note]

[:en]
Any difference in top-level cv-qualification is subsumed by the initialization
itself and does not constitute a conversion.

[enter:example]
[:en]
a parameter of type [`A] can be initialized from an argument of type [`const A].

[:en]
The implicit conversion sequence for that case is the identity sequence; it
contains no ["conversion] from [`const A] to [`A].
[exit:example]

[:en]
When the parameter has a class type and the argument expression has the same
type, the implicit conversion sequence is an identity conversion.

[:en]
When the parameter has a class type and the argument expression has a derived
class type, the implicit conversion sequence is a derived-to-base
[%conversion[!derived-to-base]] Conversion from the derived class to the base
class.

[enter:note]
[:en]
There is no such standard conversion; this derived-to-base Conversion exists
only in the description of implicit conversion sequences.
[exit:note]

[:en]
A derived-to-base Conversion has Conversion rank ([#over.ics.scs]).

[para]
[:en]
In all contexts, when converting to the implicit object parameter or when
converting to the left operand of an assignment operation only standard
conversion sequences that create no temporary object for the result are allowed.

[para]
[:en]
If no conversions are required to match an argument to a parameter type, the
implicit conversion sequence is the standard conversion sequence consisting of
the identity conversion ([#over.ics.scs]).

[para]
[:en]
If no sequence of conversions can be found to convert an argument to a parameter
type, an implicit conversion sequence cannot be formed.

[para]
[:en]
If several different sequences of conversions exist that each convert the
argument to the parameter type, the implicit conversion sequence associated with
the parameter is defined to be the unique conversion sequence designated the
[%sequence[!ambiguous conversion]] [+ambiguous conversion sequence].

[:en]
For the purpose of ranking implicit conversion sequences as described in
[#over.ics.rank], the ambiguous conversion sequence is treated as a user-defined
sequence that is indistinguishable from any other user-defined conversion
sequence

[footnote]
[:en]
The ambiguous conversion sequence is ranked with user-defined conversion
sequences because multiple conversion sequences for an argument can exist only
if they involve different user-defined conversions.

[:en]
The ambiguous conversion sequence is indistinguishable from any other
user-defined conversion sequence because it represents at least two user-defined
conversion sequences, each with a different user-defined conversion, and any
other user-defined conversion sequence must be indistinguishable from at least
one of them.

[para:~]
[:en]
This rule prevents a function from becoming non-viable because of an ambiguous
conversion sequence for one of its parameters.

[:en]
Consider this example,

[codeblock]
class B;
class A { A (B&); };
class B { operator A (); };
class C { C (B&); };
void f(A) { }
void f(C) { }
B b;
f(b);                           // [:en] ambiguous because [`b] [=to] [`C] via constructor and
                                // [:en@~] [`b] [=to] [`A] via constructor or conversion function.
[codeblock:end]

[para:~]
[:en]
If it were not for this rule, [`f(A)] would be eliminated as a viable function
for the call [`f(b)] causing overload resolution to select [`f(C)] as the
function to call even though it is not clearly the best choice.

[:en]
On the other hand, if an [`f(B)] were to be declared then [`f(b)] would resolve
to that [`f(B)] because the exact match with [`f(B)] is better than any of the
sequences required to match [`f(A)].
[footnote:end]

[:en@~]
.

[:en]
If a function that uses the ambiguous conversion sequence is selected
as the best viable function, the call will be ill-formed because the conversion
of one of the arguments in the call is ambiguous.

[para]
[:en]
The three forms of implicit conversion sequences mentioned above are defined in
the following subclauses.

[include over.ics.scs]

[include over.ics.user]

[include over.ics.ellipsis]

[include over.ics.ref]

[include over.ics.list]
