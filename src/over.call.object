[section#over.call.object
    [:en] Call to object of class type
]

[para]
[:en]
If the [~primary-expression] [`E] in the function call syntax evaluates to a
class object of type ["[$cv] [`T]], then the set of candidate functions includes
at least the function call operators of [`T].

[:en]
The function call operators of [`T] are obtained by ordinary lookup of the name
[`operator()] in the context of [`(E).operator()].

[para]
[:en]
In addition, for each non-explicit conversion function declared in [`T] of the
form

[syntax:explanation]
[`operator] [~conversion-type-id] [`(] [`)] [~cv-qualifier] [~:opt ref-qualifier] [~:opt exception-specification] [~:opt attribute-specifier-seq] [`;]
[syntax:end]

[:en@~]
where [~cv-qualifier] is the same cv-qualification as, or a greater
cv-qualification than, [$cv], and where [~conversion-type-id] denotes the type
["pointer to function of ([`P1],...,[`Pn)] returning [`R]], or the type
["reference to pointer to function of ([`P1],...,[`Pn)] returning [`R]], or the
type ["reference to function of ([`P1],...,[`Pn)] returning [`R]], a [+surrogate
call function] with the unique name [~call-function] and having the form

[codeblock:notation]
R [$call-function] ( [~conversion-type-id] F, P1 a1, ... ,Pn an) { return F (a1,... ,an); }
[codeblock:end]

[:en@~]
is also considered as a candidate function.

[:en]
Similarly, surrogate call functions are added to the set of candidate functions
for each non-explicit conversion function declared in a base class of [`T]
provided the function is not hidden within [`T] by another intervening
declaration

[footnote]
[:en]
Note that this construction can yield candidate call functions that cannot be
differentiated one from the other by overload resolution because they have
identical declarations or differ only in their return type.

[:en]
The call will be ambiguous if overload resolution cannot select a match to the
call that is uniquely better than such undifferentiable functions.
[footnote:end]

[:en@~]
.

[para]
[:en]
If such a surrogate call function is selected by overload resolution, the
corresponding conversion function will be called to convert [`E] to the
appropriate function pointer or reference, and the function will then be invoked
with the arguments of the call.

[:en]
If the conversion function cannot be called (e.g., because of an ambiguity),
the program is ill-formed.

[para]
[:en]
The argument list submitted to overload resolution consists of the argument
expressions present in the function call syntax preceded by the implied object
argument [`(E)].

[enter:note]
[:en]
When comparing the call against the function call operators, the implied object
argument is compared against the implicit object parameter of the function call
operator.

[:en]
When comparing the call against a surrogate call function, the implied object
argument is compared against the first parameter of the surrogate call function.

[:en]
The conversion function from which the surrogate call function was derived will
be used in the conversion sequence for that parameter since it converts the
implied object argument to the appropriate function pointer or reference
required by that first parameter.
[exit:note]

[enter:example]
[codeblock]
int f1(int);
int f2(float);
typedef int (*fp1)(int);
typedef int (*fp2)(float);
struct A {
  operator fp1() { return f1; }
  operator fp2() { return f2; }
} a;
int i = a(1);       // [:en] calls [`f1] via pointer returned from
                    // [:en@~] conversion function
[codeblock:end]
[exit:example]
