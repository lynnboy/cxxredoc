[section#over.match.conv
    [:en] Initialization by conversion function
]

[%[:en] overloading[!resolution[!initialization]]
]

[para]
[:en]
Under the conditions specified in [#dcl.init], as part of an initialization of
an object of nonclass type, a conversion function can be invoked to convert an
initializer expression of class type to the type of the object being
initialized.

[:en]
Overload resolution is used to select the conversion function to be invoked.

[:en]
Assuming that ["[$cv1] [`T]] is the type of the object being initialized, and
["[$cv] [`S]] is the type of the initializer expression, with [`S] a class type,
the candidate functions are selected as follows:

[list]
[item]
[:en]
The conversion functions of [`S] and its base classes are considered.

[:en]
Those non-explicit conversion functions that are not hidden within [`S] and
yield type [`T] or a type that can be converted to type [`T] via a standard
conversion sequence ([#over.ics.scs]) are candidate functions.

[:en]
For direct-initialization, those explicit conversion functions that are not
hidden within [`S] and yield type [`T] or a type that can be converted to type
[`T] with a qualification conversion ([#conv.qual]) are also candidate
functions.

[:en]
Conversion functions that return a cv-qualified type are considered to yield the
cv-unqualified version of that type for this process of selecting candidate
functions.

[:en]
Conversion functions that return ["reference to [$cv2] [`X]] return lvalues or
xvalues, depending on the type of reference, of type ["[$cv2] [`X]] and are
therefore considered to yield [`X] for this process of selecting candidate
functions.
[list:end]

[para]
[:en]
The argument list has one argument, which is the initializer expression.

[enter:note]
[:en]
This argument will be compared against the implicit object parameter of the
conversion functions.
[exit:note]
