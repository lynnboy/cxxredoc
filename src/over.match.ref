[section#over.match.ref
    [:en] Initialization by conversion function for direct reference binding
]

[%[:en]overloading[!resolution[!initialization]]
]

[para]
[:en]
Under the conditions specified in [#dcl.init.ref], a reference can be bound
directly to a glvalue or class prvalue that is the result of applying a
conversion function to an initializer expression.

[:en]
Overload resolution is used to select the conversion function to be invoked.

[:en]
Assuming that ["[$cv1] [`T]] is the underlying type of the reference being
initialized, and ["[$cv] [`S]] is the type of the initializer expression, with
[`S] a class type, the candidate functions are selected as follows:

[list]
[item]
[:en]
The conversion functions of [`S] and its base classes are considered.

[:en]
Those non-explicit conversion functions that are not hidden within [`S] and
yield type ["lvalue reference to [$cv2] [`T2]] (when initializing an lvalue
reference or an rvalue reference to function) or ["[$cv2] [`T2]] or ["rvalue
reference to [$cv2] [`T2]] (when initializing an rvalue reference or an lvalue
reference to function), where ["[$cv1] [`T]] is reference-compatible
([#dcl.init.ref]) with ["[$cv2] [`T2]], are candidate functions.

[:en]
For direct-initialization, those explicit conversion functions that are not
hidden within [`S] and yield type ["lvalue reference to [$cv2] [`T2]] or
["[$cv2] [`T2]] or ["rvalue reference to [$cv2] [`T2],] respectively, where
[`T2] is the same type as [`T] or can be converted to type [`T] with a
qualification conversion ([#conv.qual]), are also candidate functions.
[list:end]

[para]
[:en]
The argument list has one argument, which is the initializer expression.

[enter:note]
[:en]
This argument will be compared against the implicit object parameter of the
conversion functions.
[exit:note]
