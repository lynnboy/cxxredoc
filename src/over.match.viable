[section#over.match.viable
    [:en] Viable functions
]
[%:begin#overloading.resolution.viable.functions
    [:en] overloading[!resolution[!viable functions]]
]

[para]
[:en]
From the set of candidate functions constructed for a given context
([#over.match.funcs]), a set of viable functions is chosen, from which the best
function will be selected by comparing argument conversion sequences for the
best fit ([#over.match.best]).

[:en]
The selection of viable functions considers relationships between arguments and
function parameters other than the ranking of conversion sequences.

[para]
[:en]
[%ellipsis[!overload resolution and]]
[%default argument[!overload resolution and]]
First, to be a viable function, a candidate function shall have enough
parameters to agree in number with the arguments in the list.

[list]
[item]
[:en]
If there are [$m] arguments in the list, all candidate functions having exactly
[$m] parameters are viable.

[item]
[:en]
A candidate function having fewer than [$m] parameters is viable only if it has
an ellipsis in its parameter list ([#dcl.fct]).

[:en]
For the purposes of overload resolution, any argument for which there is no
corresponding parameter is considered to ["match the ellipsis]
([#over.ics.ellipsis]) .

[item]
[:en]
A candidate function having more than [$m] parameters is viable only if the
[$(m+1)]-st parameter has a default argument ([#dcl.fct.default]).

[footnote]
[:en]
According to [#dcl.fct.default], parameters following the [$(m+1)]-st parameter
must also have default arguments.
[footnote:end]

[:en]
For the purposes of overload resolution, the parameter list is truncated on the
right, so that there are exactly [$m] parameters.
[list:end]

[para]
[:en]
Second, for [`F] to be a viable function, there shall exist for each argument an
[+implicit conversion sequence] ([#over.best.ics]) that converts that argument
to the corresponding parameter of [`F].

[:en]
If the parameter has reference type, the implicit conversion sequence includes
the operation of binding the reference, and the fact that an lvalue reference to
non-[`const] cannot be bound to an rvalue and that an rvalue reference cannot be
bound to an lvalue can affect the viability of the function (see
[#over.ics.ref]).
