[section#partial.sum
    [:en] Partial sum
]

[%@library partial_sum]
[codeblock:declaration]
template <class InputIterator, class OutputIterator>
  OutputIterator partial_sum(
    InputIterator first, InputIterator last,
    OutputIterator result);
template
  <class InputIterator, class OutputIterator, class BinaryOperation>
    OutputIterator partial_sum(
      InputIterator first, InputIterator last,
      OutputIterator result, BinaryOperation binary_op);
[codeblock:end]

[enter:description]
[para:effects]
[:en] For a non-empty range, the function creates an accumulator [`acc] whose
type is [`InputIterator][=']s value type, initializes it with [`*first], and
assigns the result to [`*result].

[:en] For every iterator [`i] in [=range[first + 1,last)] in order, [`acc] is
then modified by [`acc = acc + *i] or [`acc = binary_op(acc, *i)] and the result
is assigned to [`*(result + (i - first))].

[para:returns]
[:en] [`result + (last - first)].

[para:complexity]
[:en] Exactly [`(last - first) - 1] applications of the binary operation.

[para:requires]
[:en] [`InputIterator][=']s value type shall be constructible from the type of
[`*first].

[:en] The result of the expression [`acc + *i] or [`binary_op(acc, *i)] shall be
implicitly convertible to [`InputIterator][=']s value type.

[:en] [`acc] shall be writable to the [`result] output iterator.

[:en] In the ranges [=crange[first,last)] and
[=crange[result,result + (last - first))] [`binary_op] shall neither modify
elements nor invalidate iterators or subranges.

[footnote]
[:en] The use of fully closed ranges is intentional.
[footnote:end]

[para:notes]
[:en] [`result] may be equal to [`first].
[exit:description]
