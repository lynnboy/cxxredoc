[section#quoted.manip
    [:en] Quoted manipulators
]

[para]
[enter:note]
[:en] Quoted manipulators provide string insertion and extraction of quoted
strings (for example, XML and CSV formats).

[:en] Quoted manipulators are useful in ensuring that the content of a string
with embedded spaces remains unchanged if inserted and then extracted via stream
I/O.
[exit:note]

[%@library quoted]
[codeblock:declaration [special unspecified] ]
template <class charT>
  unspecified quoted(const charT* s, charT delim=charT('"'), charT escape=charT('\\'));
template <class charT, class traits, class Allocator>
  unspecified quoted(const basic_string<charT, traits, Allocator>& s,
                      charT delim=charT('"'), charT escape=charT('\\'));
[codeblock:end]

[enter:description]
[para:returns]
[:en] An object of unspecified type such that if [`out] is an instance of
[`basic_ostream] with member type [`char_type] the same as [`charT] and with
member type [`traits_type], which in the second form is the same as [`traits],
then the expression [`out << quoted(s, delim, escape)] behaves as a formatted
output function ([#ostream.formatted.reqmts]) of [`out].

[:en] This forms a character sequence [`seq], initially consisting of the
following elements:

[list]
[item]
[:en] [`delim].
[item]
[:en] Each character in [`s]. If the character to be output is equal to
[`escape] or [`delim], as determined by [`traits_type::eq], first output
[`escape].
[item]
[:en] [`delim].
[list:end]

[:en] Let [`x] be the number of elements initially in [`seq].

[:en] Then padding is determined for [`seq] as described in
[#ostream.formatted.reqmts], [`seq] is inserted as if by calling
[`out.rdbuf()->sputn(seq, n)], where [`n] is the larger of [`out.width()] and
[`x], and [`out.width(0)] is called.

[:en] The expression [`out << quoted(s, delim, escape)] shall have type
[`basic_ostream<charT, traits>&] and value [`out].
[exit:description]

[%@library quoted]
[codeblock:declaration [special unspecified] ]
template <class charT, class traits, class Allocator>
  unspecified quoted(basic_string<charT, traits, Allocator>& s,
                      charT delim=charT('"'), charT escape=charT('\\'));
[codeblock:end]

[enter:description]
[para:returns]
[:en] An object of unspecified type such that:

[list]
[item]
[:en] If [`in] is an instance of [`basic_istream] with member types [`char_type]
and [`traits_type] the same as [`charT] and [`traits], respectively, then the
expression [`in >> quoted(s, delim, escape)] behaves as if it extracts the
following characters from [`in] using [`basic_istream::operator>>]
([#istream::extractors]) which may throw [`ios_base::failure] ([#ios::failure]):

[list]
[item]
[:en] If the first character extracted is equal to [`delim], as determined by
[`traits_type::eq], then:

[list]
[item]
[:en] Turn off the [`skipws] flag.
[item]
[:en] [`s.clear()]
[item]
[:en] Until an unescaped [`delim] character is reached or [`!in], extract
characters from [`in] and append them to [`s], except that if an [`escape] is
reached, ignore it and append the next character to [`s].
[item]
[:en] Discard the final [`delim] character.
[item]
[:en] Restore the [`skipws] flag to its original value.
[list:end]

[item]
[:en] Otherwise, [`in >> s].
[list:end]

[item]
[:en] If [`out] is an instance of [`basic_ostream] with member types
[`char_type] and [`traits_type] the same as [`charT] and [`traits],
respectively, then the expression [`out << quoted(s, delim, escape)] behaves as
specified for the [`const basic_string<charT, traits, Allocator>&] overload of
the [`quoted] function.
[list:end]

[:en] The expression [`in >> quoted(s, delim, escape)] shall have type
[`basic_istream<charT, traits>&] and value [`in]. The expression
[`out << quoted(s, delim, escape)] shall have type
[`basic_ostream<charT, traits>&] and value [`out].
[exit:description]
