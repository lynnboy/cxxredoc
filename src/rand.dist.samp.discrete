[/
% ----------------------------------------------------------------------
% Class template discrete_distribution
% ----------------------------------------------------------------------
/]

[section#rand.dist.samp.discrete
    [:en] Class template [`discrete_distribution]
]

[%@library discrete_distribution]
[%[:en]random number distribution [![`discrete_distribution]]]

[para]
[:en] A [`discrete_distribution] random number distribution produces random
integers [$i], [$0 [=leq] i < n], distributed according to the discrete
probability function

[:en]
[%discrete probability function[![`discrete_distribution]]]
[%[`discrete_distribution][!discrete probability function]]
[math]
p(i | p[_0], [=dots], p[_n-1]) = p[_i] .
[math:end]

[para]
[:en] Unless specified otherwise, the distribution parameters are calculated as:
[$p[_k] = w[_k] / S] for [$k = 0, [=ldots], n-1], in which the values [$w[_k]],
commonly known as the [+weights]
[%[`discrete_distribution][!weights]]
[%weights[![`discrete_distribution]]]
, shall be non-negative, non-NaN, and non-infinity.

[:en] Moreover, the following relation shall hold:
[$0 < S = w[_0] + [=cdots] + w[_n-1]].

[codeblock:synopsis [special unspecified] ]
template<class IntType = int>
 class discrete_distribution
{
public:
 // [:en] types
 typedef IntType result_type;
 typedef unspecified param_type;

 // [:en] constructor and reset functions
 discrete_distribution();
 template<class InputIterator>
   discrete_distribution(InputIterator firstW, InputIterator lastW);
 discrete_distribution(initializer_list<double> wl);
 template<class UnaryOperation>
   discrete_distribution(size_t nw, double xmin, double xmax, UnaryOperation fw);
 explicit discrete_distribution(const param_type& parm);
 void reset();

 // [:en] generating functions
 template<class URNG>
   result_type operator()(URNG& g);
 template<class URNG>
   result_type operator()(URNG& g, const param_type& parm);

 // [:en] property functions
 vector<double> probabilities() const;
 param_type param() const;
 void param(const param_type& parm);
 result_type min() const;
 result_type max() const;
};
[codeblock:end]

[%@library discrete_distribution[![:en]constructor]]
[codeblock:declaration]
discrete_distribution();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`discrete_distribution] object with [$n = 1] and
[$p[_0] = 1].

[enter:note]
[:en] Such an object will always deliver the value 0.
[exit:note]
[exit:description]

[%@library discrete_distribution[![:en]constructor]]
[codeblock:declaration]
template<class InputIterator>
  discrete_distribution(InputIterator firstW, InputIterator lastW);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`InputIterator] shall satisfy the requirements of an input iterator
(Table [#tab:iterator.input.requirements]) type.

[:en] Moreover, [`iterator_traits<InputIterator>::value_type] shall denote a
type that is convertible to [`double].

[:en] If [`firstW == lastW], let [$n = 1] and [$w[_0] = 1].

[:en] Otherwise, [[`firstW], [`lastW]) shall form a sequence [$w] of length
[$n > 0].

[para:effects]
[:en] Constructs a [`discrete_distribution] object with probabilities given by
the formula above.
[exit:description]

[%@library discrete_distribution[![:en]constructor]]
[codeblock:declaration]
discrete_distribution(initializer_list<double> wl);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Same as [`discrete_distribution(wl.begin(), wl.end())].
[exit:description]

[%@library discrete_distribution[![:en]constructor]]
[codeblock:declaration]
template<class UnaryOperation>
  discrete_distribution(size_t nw, double xmin, double xmax, UnaryOperation fw);
[codeblock:end]

[enter:description]
[para:requires]
[:en] Each instance of type [`UnaryOperation] shall be a function object
([#function.objects]) whose return type shall be convertible to [`double].

[:en] Moreover, [`double] shall be convertible to the type of
[`UnaryOperation][=']s sole parameter.

[:en] If [`nw] = 0, let [$n] = 1, otherwise let [$n] = [`nw].

[:en] The relation [$0 < [=delta] = ([`xmax] - [`xmin]) / n] shall hold.

[para:effects]
[:en] Constructs a [`discrete_distribution] object with probabilities given by
the formula above, using the following values:

[:en] If [`nw] = 0, let [$w[_0] = 1].

[:en] Otherwise, let [$w[_k] = [`fw]([`xmin] + k [=cdot] [=delta] + [=delta]/2)]
for [$k = 0, [=ldots], n-1].

[para:complexity]
[:en] The number of invocations of [`fw] shall not exceed [$n].
[exit:description]

[%@library discrete_distribution[!probabilities]]
[%@library probabilities[!discrete_distribution]]
[codeblock:declaration]
vector<double> probabilities() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`vector<double>] whose [`size] member returns [$n] and whose
[`operator[`]] member returns [$p[_k]] when invoked with argument [$k] for
[$k = 0, [=ldots], n-1].
[exit:description]
