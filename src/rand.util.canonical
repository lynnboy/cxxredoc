[/
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% generate_canonical function template:
/]

[section#rand.util.canonical
    [:en] Function template [`generate_canonical]
]

[%@library generate_canonical]

[para]
[:en] Each function instantiated from the template described in this section
[#rand.util.canonical] maps the result of one or more invocations of a supplied
uniform random number generator [`g] to one member of the specified [`RealType]
such that, if the values [$g[_i]] produced by [`g] are uniformly distributed,
the instantiation[=']s results [$t[_j]], [$0 [=leq] t[_j] < 1], are distributed
as uniformly as possible as specified below.

[para]
[enter:note]
[:en] Obtaining a value in this way can be a useful step in the process of
transforming a value generated by a uniform random number generator into a value
that can be delivered by a random number distribution.
[exit:note]

[%@library generate_canonical]
[codeblock:declaration]
template<class RealType, size_t bits, class URNG>
 RealType generate_canonical(URNG& g);
[codeblock:end]

[enter:description]
[para:complexity]
[:en] Exactly [$k = [=max](1, [=lceil]b/[=log][_2] R[=rceil])] invocations of
[`g], where [$b]

[footnote]
[:en] [$b] is introduced to avoid any attempt to produce more bits of randomness
than can be held in [`RealType].
[footnote:end]

[:en@~] is the lesser of [`numeric_limits<RealType>::digits] and [`bits], and
[$R] is the value of [`g.max()] - [`g.min()] + 1.

[para:effects]
[:en] Invokes [`g()] [$k] times to obtain values [$g[_0], [=ldots], g[_k-1]],
respectively.

[:en] Calculates a quantity

[math]
S = [=sum@i=0@k-1](g[_i] - [`g.min()]) [=cdot] R[^i]
[math:end]

[:en@~] using arithmetic of type [`RealType].

[para:returns]
[:en] [$S/R[^k]].

[para:throws]
[:en] What and when [`g] throws.
[exit:description]
