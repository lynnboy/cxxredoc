[section#ratio.arithmetic
    [:en] Arithmetic on [`ratio]s
]

[para]
[:en]
Each of the alias templates [`ratio_add], [`ratio_subtract], [`ratio_multiply],
and [`ratio_divide] denotes the result of an arithmetic computation on two
[`ratio]s [`R1] and [`R2]. With [`X] and [`Y] computed (in the absence of
arithmetic overflow) as specified by Table [#tab:ratio.arithmetic], each alias
denotes a [`ratio<U, V>] such that [`U] is the same as [`ratio<X, Y>::num] and
[`V] is the same as [`ratio<X, Y>::den].

[para]
[:en]
If it is not possible to represent [`U] or [`V] with [`intmax_t], the program is
ill-formed.

[:en]
Otherwise, an implementation should yield correct values of [`U] and [`V].

[:en]
If it is not possible to represent [`X] or [`Y] with [`intmax_t], the program is
ill-formed unless the implementation yields correct values of [`U] and [`V].

[table:listing#tab:ratio.arithmetic
    [:en] Expressions used to perform ratio arithmetic
    [columns
        [column@code@headercenter
            [:en] Type
        ]
        [column@code@headercenter
            [:en] Value of [`X]
        ]
        [column@code@headercenter
            [:en] Value of [`Y]
        ]
    ]
]

[|] ratio_add<R1, R2>
[|] R1::num * R2::den + R2::num * R1::den
[|] R1::den * R2::den

[|] ratio_subtract<R1, R2>
[|] R1::num * R2::den - R2::num * R1::den
[|] R1::den * R2::den

[|] ratio_multiply<R1, R2>
[|] R1::num * R2::num
[|] R1::den * R2::den

[|] ratio_divide<R1, R2>
[|] R1::num * R2::den
[|] R1::den * R2::num

[table:end]

[para]
[enter:example]

[codeblock]
static_assert(ratio_add<ratio<1,3>, ratio<1,6>>::num == 1, "1/3+1/6 == 1/2");
static_assert(ratio_add<ratio<1,3>, ratio<1,6>>::den == 2, "1/3+1/6 == 1/2");
static_assert(ratio_multiply<ratio<1,3>, ratio<3,2>>::num == 1, "1/3*3/2 == 1/2");
static_assert(ratio_multiply<ratio<1,3>, ratio<3,2>>::den == 2, "1/3*3/2 == 1/2");

  // [:en] The following cases may cause the program to be ill-formed under some implementations
static_assert(ratio_add<ratio<1,INT_MAX>, ratio<1,INT_MAX>>::num == 2,
  "1/MAX+1/MAX == 2/MAX");
static_assert(ratio_add<ratio<1,INT_MAX>, ratio<1,INT_MAX>>::den == INT_MAX,
  "1/MAX+1/MAX == 2/MAX");
static_assert(ratio_multiply<ratio<1,INT_MAX>, ratio<INT_MAX,2>>::num == 1,
  "1/MAX * MAX/2 == 1/2");
static_assert(ratio_multiply<ratio<1,INT_MAX>, ratio<INT_MAX,2>>::den == 2,
  "1/MAX * MAX/2 == 1/2");
[codeblock:end]

[exit:example]
