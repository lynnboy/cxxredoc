[section#re.alg.replace
    [:en] [`regex_replace]
]

[%@library regex_replace]]
[codeblock:declaration]
template <class OutputIterator, class BidirectionalIterator,
    class traits, class charT, class ST, class SA>
  OutputIterator
  regex_replace(OutputIterator out,
                BidirectionalIterator first, BidirectionalIterator last,
                const basic_regex<charT, traits>& e,
                const basic_string<charT, ST, SA>& fmt,
                regex_constants::match_flag_type flags =
                  regex_constants::match_default);
template <class OutputIterator, class BidirectionalIterator,
    class traits, class charT>
  OutputIterator
  regex_replace(OutputIterator out,
                BidirectionalIterator first, BidirectionalIterator last,
                const basic_regex<charT, traits>& e,
                const charT* fmt,
                regex_constants::match_flag_type flags =
                  regex_constants::match_default);
[codeblock:end]

[enter:description]
[para:effects]
[%@library format_no_copy]
[%@library format_first_only]
[:en] Constructs a [`regex_iterator] object [`i] as if by

[codeblock:notation]
regex_iterator<BidirectionalIterator, charT, traits> i(first, last, e, flags)
[codeblock:end]

[:en@~] and uses [`i] to enumerate through all of the matches [`m] of type
[`match_results<BidirectionalIterator>] that occur within the sequence
[=range[first,last)].

[:en] If no such matches are found and
[`!(flags & regex_constants::format_no_copy)] then calls

[codeblock:notation]
out = std::copy(first, last, out)
[codeblock:end]

[:en] If any matches are found then, for each such match:

[list]
[item]
[:en] If [`!(flags & regex_constants::format_no_copy)], calls

[codeblock:notation]
out = std::copy(m.prefix().first, m.prefix().second, out)
[codeblock:end]

[item]
[:en] Then calls

[codeblock:notation]
out = m.format(out, fmt, flags)
[codeblock:end]

[:en@~] for the first form of the function and

[codeblock:notation]
out = m.format(out, fmt, fmt + char_traits<charT>::length(fmt), flags)
[codeblock:end]

[:en@~] for the second.

[list:end]

[:en] Finally, if such a match is found and
[`!(flags & regex_constants::format_no_copy)], calls

[codeblock:notation]
out = std::copy(last_m.suffix().first, last_m.suffix().second, out)
[codeblock:end]

[:en@~] where [`last_m] is a copy of the last match found.

[:en] If [`flags & regex_constants::format_first_only] is non-zero then only the
first match found is replaced.

[para:returns]
[:en] [`out].
[exit:description]

[%@library regex_replace]
[codeblock:declaration]
template <class traits, class charT, class ST, class SA, class FST, class FSA>
  basic_string<charT, ST, SA>
  regex_replace(const basic_string<charT, ST, SA>& s,
                const basic_regex<charT, traits>& e,
                const basic_string<charT, FST, FSA>& fmt,
                regex_constants::match_flag_type flags =
                  regex_constants::match_default);
template <class traits, class charT, class ST, class SA>
  basic_string<charT, ST, SA>
  regex_replace(const basic_string<charT, ST, SA>& s,
                const basic_regex<charT, traits>& e,
                const charT* fmt,
                regex_constants::match_flag_type flags =
                  regex_constants::match_default);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an empty string [`result] of type
[`basic_string<charT, ST, SA>] and calls
[`regex_replace(back_inserter(result), s.begin(), s.end(), e, fmt, flags)].

[para:returns]
[:en] [`result].
[exit:description]

[%@library regex_replace]
[codeblock:declaration]
template <class traits, class charT, class ST, class SA>
  basic_string<charT>
  regex_replace(const charT* s,
                const basic_regex<charT, traits>& e,
                const basic_string<charT, ST, SA>& fmt,
                regex_constants::match_flag_type flags =
                  regex_constants::match_default);
template <class traits, class charT>
  basic_string<charT>
  regex_replace(const charT* s,
                const basic_regex<charT, traits>& e,
                const charT* fmt,
                regex_constants::match_flag_type flags =
                  regex_constants::match_default);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an empty string [`result] of type [`basic_string<charT>] and
calls [`regex_replace(back_inserter(result), s,
s + char_traits<charT>::length(s), e, fmt, flags)].

[para:returns]
[:en] [`result].
[exit:description]
