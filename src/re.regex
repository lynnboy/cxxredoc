[section#re.regex
    [:en] Class template [`basic_regex]
]
[%@library basic_regex]

[para]
[:en] For a char-like type [`charT], specializations of class template
[`basic_regex] represent regular expressions constructed from character
sequences of [`charT] characters.

[:en] In the rest of [#re.regex], [`charT] denotes a given char-like type.

[:en] Storage for a regular expression is allocated and freed as necessary by
the member functions of class [`basic_regex].

[para]
[:en] Objects of type specialization of [`basic_regex] are responsible for
converting the sequence of [`charT] objects to an internal representation.

[:en] It is not specified what form this representation takes, nor how it is
accessed by algorithms that operate on regular expressions.

[enter:note]
[:en] Implementations will typically declare some function templates as friends
of [`basic_regex] to achieve this
[exit:note]

[para]
[%@library regex_error]
[:en] The functions described in this Clause report errors by throwing
exceptions of type [`regex_error].

[%@library basic_regex]
[codeblock:synopsis]
namespace std {
  template <class charT,
            class traits = regex_traits<charT> >
  class basic_regex {
  public:
    // [:en] types:
    typedef          charT                                value_type;
    typedef          traits                               traits_type;
    typedef typename traits::string_type                  string_type;
    typedef          regex_constants::syntax_option_type  flag_type;
    typedef typename traits::locale_type                  locale_type;

    // [:en] [#re.regex.const], constants:
    static constexpr regex_constants::syntax_option_type
      icase = regex_constants::icase;
    static constexpr regex_constants::syntax_option_type
      nosubs = regex_constants::nosubs;
    static constexpr regex_constants::syntax_option_type
      optimize = regex_constants::optimize;
    static constexpr regex_constants::syntax_option_type
      collate = regex_constants::collate;
    static constexpr regex_constants::syntax_option_type
      ECMAScript = regex_constants::ECMAScript;
    static constexpr regex_constants::syntax_option_type
      basic = regex_constants::basic;
    static constexpr regex_constants::syntax_option_type
      extended = regex_constants::extended;
    static constexpr regex_constants::syntax_option_type
      awk = regex_constants::awk;
    static constexpr regex_constants::syntax_option_type
      grep = regex_constants::grep;
    static constexpr regex_constants::syntax_option_type
      egrep = regex_constants::egrep;

    // [:en] [#re.regex.construct], construct/copy/destroy:
    basic_regex();
    explicit basic_regex(const charT* p,
      flag_type f = regex_constants::ECMAScript);
    basic_regex(const charT* p, size_t len, flag_type f = regex_constants::ECMAScript);
    basic_regex(const basic_regex&);
    basic_regex(basic_regex&&) noexcept;
    template <class ST, class SA>
      explicit basic_regex(const basic_string<charT, ST, SA>& p,
                           flag_type f = regex_constants::ECMAScript);
    template <class ForwardIterator>
      basic_regex(ForwardIterator first, ForwardIterator last,
                  flag_type f = regex_constants::ECMAScript);
    basic_regex(initializer_list<charT>,
      flag_type = regex_constants::ECMAScript);

    ~basic_regex();

    basic_regex& operator=(const basic_regex&);
    basic_regex& operator=(basic_regex&&) noexcept;
    basic_regex& operator=(const charT* ptr);
    basic_regex& operator=(initializer_list<charT> il);
    template <class ST, class SA>
      basic_regex& operator=(const basic_string<charT, ST, SA>& p);

    // [:en] [#re.regex.assign], assign:
    basic_regex& assign(const basic_regex& that);
    basic_regex& assign(basic_regex&& that) noexcept;
    basic_regex& assign(const charT* ptr,
      flag_type f = regex_constants::ECMAScript);
    basic_regex& assign(const charT* p, size_t len, flag_type f);
    template <class string_traits, class A>
      basic_regex& assign(const basic_string<charT, string_traits, A>& s,
                          flag_type f = regex_constants::ECMAScript);
    template <class InputIterator>
      basic_regex& assign(InputIterator first, InputIterator last,
                          flag_type f = regex_constants::ECMAScript);
    basic_regex& assign(initializer_list<charT>,
                        flag_type = regex_constants::ECMAScript);

    // [:en] [#re.regex.operations], const operations:
    unsigned mark_count() const;
    flag_type flags() const;

    // [:en] [#re.regex.locale], locale:
    locale_type imbue(locale_type loc);
    locale_type getloc() const;

    // [:en] [#re.regex.swap], swap:
    void swap(basic_regex&);
  };
}
[codeblock:end]

[include re.regex.const]

[include re.regex.construct]

[include re.regex.assign]

[include re.regex.operations]

[include re.regex.locale]

[include re.regex.swap]

[include re.regex.nonmemb]
