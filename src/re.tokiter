[section#re.tokiter
    [:en] Class template [`regex_token_iterator]
]

[para]
[%@library regex_token_iterator]
[:en] The class template [`regex_token_iterator] is an iterator adaptor; that
is to say it represents a new view of an existing iterator sequence, by
enumerating all the occurrences of a regular expression within that sequence,
and presenting one or more sub-expressions for each match found.

[:en] Each position enumerated by the iterator is a [`sub_match] class template
instance that represents what matched a particular sub-expression within the
regular expression.

[para]
[:en] When class [`regex_token_iterator] is used to enumerate a single
sub-expression with index -1 the iterator performs field splitting: that is to
say it enumerates one sub-expression for each section of the character container
sequence that does not match the regular expression specified.

[para]
[%@library match_results]
[:en] After it is constructed, the iterator finds and stores a value
[`regex_iterator<BidirectionalIterator> position] and sets the internal count
[`N] to zero.

[:en] It also maintains a sequence [`subs] which contains a list of the
sub-expressions which will be enumerated.

[:en] Every time [`operator++] is used the count [`N] is incremented; if [`N]
exceeds or equals [`subs.size()], then the iterator increments member
[`position] and sets count [`N] to zero.

[para]
[%[`regex_token_iterator][!end-of-sequence]]
[:en] If the end of sequence is reached ([`position] is equal to the end of
sequence iterator), the iterator becomes equal to the end-of-sequence iterator
value, unless the sub-expression being enumerated has index -1, in which case
the iterator enumerates one last sub-expression that contains all the characters
from the end of the last regular expression match to the end of the input
sequence being enumerated, provided that this would not be an empty
sub-expression.

[para]
[%@library regex_token_iterator[![:en]end-of-sequence]]
[:en] The default constructor constructs an end-of-sequence iterator object,
which is the only legitimate iterator to be used for the end condition.

[:en] The result of [`operator*] on an end-of-sequence iterator is not defined.

[:en] For any other iterator value a [`const sub_match<BidirectionalIterator>&]
is returned.

[:en] The result of [`operator->] on an end-of-sequence iterator is not defined.

[:en] For any other iterator value a [`const sub_match<BidirectionalIterator>*]
is returned.

[para]
[%@library regex_token_iterator[!operator==]]
[%@library operator==[!regex_token_iterator]]
[:en] It is impossible to store things into [`regex_token_iterator]s.

[:en] Two end-of-sequence iterators are always equal.

[:en] An end-of-sequence iterator is not equal to a non-end-of-sequence
iterator.

[:en] Two non-end-of-sequence iterators are equal when they are constructed from
the same arguments.

[codeblock:synopsis]
namespace std {
  template <class BidirectionalIterator,
            class charT = typename iterator_traits<
              BidirectionalIterator>::value_type,
              class traits = regex_traits<charT> >
  class regex_token_iterator  {
  public:
    typedef basic_regex<charT, traits>       regex_type;
    typedef sub_match<BidirectionalIterator> value_type;
    typedef std::ptrdiff_t                   difference_type;
    typedef const value_type*                pointer;
    typedef const value_type&                reference;
    typedef std::forward_iterator_tag        iterator_category;

    regex_token_iterator();
    regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                        const regex_type& re,
                        int submatch = 0,
                        regex_constants::match_flag_type m =
                          regex_constants::match_default);
    regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                        const regex_type& re,
                        const std::vector<int>& submatches,
                        regex_constants::match_flag_type m =
                          regex_constants::match_default);
    regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                        const regex_type& re,
                        initializer_list<int> submatches,
                        regex_constants::match_flag_type m =
                          regex_constants::match_default);
    template <std::size_t N>
      regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                        const regex_type& re,
                        const int (&submatches)[N],
                        regex_constants::match_flag_type m =
                          regex_constants::match_default);
    regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                         const regex_type&& re,
                         int submatch = 0,
                         regex_constants::match_flag_type m =
                           regex_constants::match_default) = delete;
    regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                         const regex_type&& re,
                         const std::vector<int>& submatches,
                         regex_constants::match_flag_type m =
                           regex_constants::match_default) = delete;
    regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                         const regex_type&& re,
                         initializer_list<int> submatches,
                         regex_constants::match_flag_type m =
                           regex_constants::match_default) = delete;
    template <std::size_t N>
    regex_token_iterator(BidirectionalIterator a, BidirectionalIterator b,
                         const regex_type&& re,
                         const int (&submatches)[N],
                         regex_constants::match_flag_type m =
                           regex_constants::match_default) = delete;
    regex_token_iterator(const regex_token_iterator&);
    regex_token_iterator& operator=(const regex_token_iterator&);
    bool operator==(const regex_token_iterator&) const;
    bool operator!=(const regex_token_iterator&) const;
    const value_type& operator*() const;
    const value_type* operator->() const;
    regex_token_iterator& operator++();
    regex_token_iterator operator++(int);
  private:
    typedef
      regex_iterator<BidirectionalIterator, charT, traits> position_iterator; // [=Expos]
    position_iterator position;                                               // [=Expos]
    const value_type* result;                                                 // [=Expos]
    value_type suffix;                                                        // [=Expos]
    std::size_t N;                                                            // [=Expos]
    std::vector<int> subs;                                                    // [=Expos]
  };
}
[codeblock:end]

[para]
[:en] A [+suffix iterator] is a [`regex_token_iterator] object that points to a
final sequence of characters at the end of the target sequence.

[:en] In a suffix iterator the member [`result] holds a pointer to the data
member [`suffix], the value of the member [`suffix.match] is [`true],
[`suffix.first] points to the beginning of the final sequence, and
[`suffix.second] points to the end of the final sequence.

[para]
[enter:note]
[:en] For a suffix iterator, data member [`suffix.first] is the same as the end
of the last match found, and [`suffix.second] is the same as the end of the
target sequence
[exit:note]

[para]
[:en] The [+current match] is [`(*position).prefix()] if [`subs[N`] == -1], or
[`(*position)[subs[N`]`]] for any other value of [`subs[N`]].

[include re.tokiter.cnstr]

[include re.tokiter.comp]

[include re.tokiter.deref]

[include re.tokiter.incr]
