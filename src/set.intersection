[section#set.intersection
    [:en] [`set_intersection]
]

[%@library set_intersection]
[codeblock:declaration]
template<class InputIterator1, class InputIterator2,
         class OutputIterator>
  OutputIterator
    set_intersection(InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2, InputIterator2 last2,
                     OutputIterator result);

template<class InputIterator1, class InputIterator2,
         class OutputIterator, class Compare>
  OutputIterator
    set_intersection(InputIterator1 first1, InputIterator1 last1,
                     InputIterator2 first2, InputIterator2 last2,
                     OutputIterator result, Compare comp);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a sorted intersection of the elements from the two ranges;
that is, the set of elements that are present in both of the ranges.

[para:requires]
[:en] The resulting range shall not overlap with either of the original ranges.

[para:returns]
[:en] The end of the constructed range.

[para:complexity]
[:en] At most [`2 * ((last1 - first1) + (last2 - first2)) - 1] comparisons.

[para:notes]
[:en] If [=range[first1,last1)] contains [$m] elements that are equivalent to
each other and [=range[first2,last2)] contains [$n] elements that are equivalent
to them, the first min([$m], [$n]) elements shall be copied from the first range
to the output range, in order.
[exit:description]
