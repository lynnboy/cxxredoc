[section#streambuf.virt.pback
    [:en] Putback
]

[%@library pbackfail[!basic_streambuf]]
[codeblock:declaration]
int_type pbackfail(int_type c = traits::eof());
[codeblock:end]

[enter:description]
[para:notes]
[:en] The public functions of [`basic_streambuf] call this virtual function only
when [`gptr()] is null, [`gptr() == eback()], or
[`traits::eq(traits::to_char_type(c),gptr()[-1`])] returns [`false].

[:en] Other calls shall also satisfy that constraint.

[:en] The [+pending sequence] is defined as for [`underflow()], with the
modifications that

[list]
[item]
[:en] If [`traits::eq_int_type(c,traits::eof())] returns [`true], then the input
sequence is backed up one character before the pending sequence is determined.

[item]
[:en] If [`traits::eq_int_type(c,traits::eof())] returns [`false], then [`c] is
prepended.

[:en] Whether the input sequence is backed up or modified in any other way is
unspecified.
[list:end]

[para:postcondition]
[:en] On return, the constraints of [`gptr()], [`eback()], and [`pptr()] are the
same as for [`underflow()].

[para:returns]
[:en] [`traits::eof()] to indicate failure.

[:en] Failure may occur because the input sequence could not be backed up, or if
for some other reason the pointers could not be set consistent with the
constraints.

[:en] [`pbackfail()] is called only when put back has really failed.

[para]
[:en] Returns some value other than [`traits::eof()] to indicate success.

[para:default]
[:en] Returns [`traits::eof()].
[exit:description]
