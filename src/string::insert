[section#string::insert
    [`basic_string::insert]
]

[%@library basic_string[!insert]]
[%@library insert[!basic_string]]
[codeblock:declaration]
basic_string&
  insert(size_type pos1,
         const basic_string& str);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`pos <= size()].
[:zh_CN] [`pos <= size()]。

[para:throws]
[:en] [`out_of_range] if [`pos > size()].
[:zh_CN] 当 [`pos > size()] 时抛出 [`out_of_range]。

[para:effects]
[:en] Calls [`insert(pos, str.data(), str.size())].
[:zh_CN] 调用 [`insert(pos, str.data(), str.size())]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
basic_string&
  insert(size_type pos1,
         const basic_string& str,
         size_type pos2, size_type n = npos);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`pos1 <= size()] and [`pos2 <= str.size()]
[:zh_CN] [`pos1 <= size()] 并且 [`pos2 <= str.size()]

[para:throws]
[:en] [`out_of_range] if [`pos1 > size()] or [`pos2 > str.size()].
[:zh_CN] 当 [`pos1 > size()] 或者 [`pos2 > str.size()] 时抛出 [`out_of_range]。

[para:effects]
[:en] Determines the effective length [`rlen] of the string to insert as the
smaller of [`n] and [`str.size() - pos2] and calls [`insert(pos1, str.data() +
pos2, rlen)].
[:zh_CN] 确定所要插入的字符串的有效长度 [`rlen] 为 [`n] 和 [`str.size() - pos2]
中的较小值，并调用 [`insert(pos1, str.data() + pos2, rlen)]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
basic_string&
  insert(size_type pos, const charT* s, size_type n);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`s] points to an array of at least [`n] elements of [`charT] and
[`pos <= size()].
[:zh_CN] [`s] 指向 [`charT] 的至少 [`n] 个元素的数组，并且 [`pos <= size()]。

[para:throws]
[:en] [`out_of_range] if [`pos > size()] or [`length_error] if [`size() + n >
max_size()].
[:zh_CN] 当 [`pos > size()] 时抛出 [`out_of_range]，或者当 [`size() + n >
max_size()] 时抛出 [`length_error]。

[para:effects]
[:en] Replaces the string controlled by [`*this] with a string of length
[`size() + n] whose first [`pos] elements are a copy of the initial elements of
the original string controlled by [`*this] and whose next [`n] elements are a
copy of the elements in [`s] and whose remaining elements are a copy of the
remaining elements of the original string controlled by [`*this].
[:zh_CN] 将由 [`*this] 所控制的字符串替换为长度为 [`size() + n] 的字符串，其前
[`pos] 个元素为由 [`*this] 所控制的原字符串的开头元素的副本，接下来 [`n] 个元素
为 [`s] 中的元素的副本，而剩余元素为由 [`*this] 所控制的原字符串的剩余元素的副本
。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
basic_string&
  insert(size_type pos, const charT* s);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`pos <= size()] and [`s] points to an array of at least
[`traits::length(s) + 1] elements of [`charT].
[:zh_CN] [`pos <= size()]，并且 [`s] 指向 [`charT] 的至少
[`traits::length(s) + 1] 个元素的数组。

[para:effects]
[:en] Equivalent to [`insert(pos, s, traits::length(s))].
[:zh_CN] 等价于 [`insert(pos, s, traits::length(s))]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library basic_string[!insert]]
[%@library insert[!basic_string]]
[codeblock:declaration]
basic_string&
  insert(size_type pos, size_type n, charT c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`insert(pos, basic_string(n, c))].
[:zh_CN] 等价于 [`insert(pos, basic_string(n, c))]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
iterator insert(const_iterator p, charT c);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] is a valid iterator on [`*this].
[:zh_CN] [`p] 为 [`*this] 的有效迭代器。

[para:effects]
[:en] inserts a copy of [`c] before the character referred to by [`p].
[:zh_CN] 在由 [`p] 所指代的字符之前插入一个 [`c] 的副本。

[para:returns]
[:en] An iterator which refers to the copy of the inserted character.
[:zh_CN] 指代所插入的字符的副本的迭代器。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
iterator insert(const_iterator p, size_type n, charT c);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] is a valid iterator on [`*this].
[:zh_CN] [`p] 为 [`*this] 的有效迭代器。

[para:effects]
[:en] inserts [`n] copies of [`c] before the character referred to by [`p].
[:zh_CN] 在由 [`p] 所指代的字符之前插入 [`n] 个 [`c] 的副本。

[para:returns]
[:en] An iterator which refers to the copy of the first inserted character, or
[`p] if [`n == 0].
[:zh_CN] 指代所插入的第一个字符的副本的迭代器，或者当 [`n == 0] 时为 [`p]。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
template<class InputIterator>
  iterator insert(const_iterator p, InputIterator first, InputIterator last);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] is a valid iterator on [`*this].
[:zh_CN] [`p] 为 [`*this] 的有效迭代器。

[:en] [`[first,last)] is a valid range.
[:zh_CN] [`[first,last)] 为有效的范围。

[para:effects]
[:en] Equivalent to [`insert(p - begin(), basic_string(first, last))].
[:zh_CN] 等价于 [`insert(p - begin(), basic_string(first, last))]。

[para:returns]
[:en] An iterator which refers to the copy of the first inserted character, or
[`p] if [`first == last].
[:zh_CN] 指代所插入的第一个字符的副本的迭代器，或者当 [`first == last] 时为 [`p]
。
[exit:description]

[%@library insert[!basic_string]]
[%@library basic_string[!insert]]
[codeblock:declaration]
iterator insert(const_iterator p, initializer_list<charT> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`insert(p, il.begin(), il.end())].
[:zh_CN] [`insert(p, il.begin(), il.end())]。

[para:returns]
[:en] An iterator which refers to the copy of the first inserted character, or
[`p] if [`i1] is empty.
[:zh_CN] 指代所插入的第一个字符的副本的迭代器，或者当 [`i1] 为空时为 [`p]。
[exit:description]
