[section#string::replace
    [:en] [`basic_string::replace]
]

[%@library basic_string[!replace]]
[%@library replace[!basic_string]]
[codeblock:declaration]
basic_string&
  replace(size_type pos1, size_type n1,
          const basic_string& str);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`pos1 <= size()].

[para:throws]
[:en] [`out_of_range] if [`pos1 > size()].

[para:effects]
[:en] Calls [`replace(pos1, n1, str.data(), str.size())].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
basic_string&
  replace(size_type pos1, size_type n1,
          const basic_string& str,
          size_type pos2, size_type n2 = npos);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`pos1 <= size()] and [`pos2 <= str.size()].

[para:throws]
[:en] [`out_of_range] if [`pos1 > size()] or [`pos2 > str.size()].

[para:effects]
[:en] Determines the effective length [`rlen] of the string to be inserted
as the smaller of [`n2] and [`str.size() - pos2] and calls
[`replace(pos1, n1, str.data() + pos2, rlen)].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
basic_string&
  replace(size_type pos1, size_type n1, const charT* s, size_type n2);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`pos1 <= size()] and [`s] points to an array of at least [`n2] elements
of [`charT].

[para:throws]
[:en] [`out_of_range] if [`pos1 > size()] or [`length_error] if the length of
the resulting string would exceed [`max_size()] (see below).

[para:effects]
[:en] Determines the effective length [`xlen] of the string to be removed as the
smaller of [`n1] and [`size() - pos1].

[:en] If [`size() - xlen >= max_size() - n2] throws [`length_error].

[:en] Otherwise, the function replaces the string controlled by *[`this] with a
string of length [`size() - xlen + n2] whose first [`pos1] elements are a copy
of the initial elements of the original string controlled by [`*this], whose
next [`n2] elements are a copy of the initial [`n2] elements of [`s], and whose
remaining elements are a copy of the elements of the original string controlled
by [`*this] beginning at position [`pos + xlen].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
basic_string&
  replace(size_type pos, size_type n, const charT* s);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`pos <= size()] and [`s] points to an array of at least
[`traits::length(s) + 1] elements of [`charT].

[para:effects]
[:en] Calls [`replace(pos, n, s, traits::length(s))].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library basic_string[!replace]]
[%@library replace[!basic_string]]
[codeblock:declaration]
basic_string&
  replace(size_type pos1, size_type n1,
          size_type n2, charT c);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`replace(pos1, n1, basic_string(n2, c))].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
basic_string& replace(const_iterator i1, const_iterator i2, const basic_string& str);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [=range[begin(),i1)] and [=range[i1,i2)] are valid ranges.

[para:effects]
[:en] Calls [`replace(i1 - begin(), i2 - i1, str)].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
basic_string&
  replace(const_iterator i1, const_iterator i2, const charT* s, size_type n);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [=range[begin(),i1)] and [=range[i1,i2)] are valid ranges and [`s] points
to an array of at least [`n] elements of [`charT].

[para:effects]
[:en] Calls [`replace(i1 - begin(), i2 - i1, s, n)].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
basic_string& replace(const_iterator i1, const_iterator i2, const charT* s);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [=range[begin(),i1)] and [=range[i1,i2)] are valid ranges and [`s] points
to an array of at least [`traits::length(s) + 1] elements of [`charT].

[para:effects]
[:en] Calls [`replace(i1 - begin(), i2 - i1, s, traits::length(s))].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
basic_string& replace(const_iterator i1, const_iterator i2, size_type n,
                      charT c);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [=range[begin(),i1)] and [=range[i1,i2)] are valid ranges.

[para:effects]
[:en] Calls [`replace(i1 - begin(), i2 - i1, basic_string(n, c))].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
template<class InputIterator>
  basic_string& replace(const_iterator i1, const_iterator i2,
                        InputIterator j1, InputIterator j2);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [=range[begin(),i1)], [=range[i1,i2)] and [=range[j1,j2)] are valid
ranges.

[para:effects]
[:en] Calls [`replace(i1 - begin(), i2 - i1, basic_string(j1, j2))].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library replace[!basic_string]]
[%@library basic_string[!replace]]
[codeblock:declaration]
basic_string& replace(const_iterator i1, const_iterator i2,
                      initializer_list<charT> il);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [=range[begin(),i1)] and [=range[i1,i2)] are valid ranges.

[para:effects]
[:en] Calls [`replace(i1 - begin(), i2 - i1, il.begin(), il.size())].

[para:returns]
[:en] [`*this].
[exit:description]
