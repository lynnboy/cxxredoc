[section#stringbuf
    [:en] Class template [`basic_stringbuf]
]

[%@library basic_stringbuf]
[codeblock:synopsis]
namespace std {
  template <class charT, class traits = char_traits<charT>,
      class Allocator = allocator<charT> >
  class basic_stringbuf : public basic_streambuf<charT,traits> {
  public:
    typedef charT                     char_type;
    typedef typename traits::int_type int_type;
    typedef typename traits::pos_type pos_type;
    typedef typename traits::off_type off_type;
    typedef traits                    traits_type;
    typedef Allocator                 allocator_type;

    // [:en] [#stringbuf.cons] Constructors:
    explicit basic_stringbuf(ios_base::openmode which
                               = ios_base::in | ios_base::out);
    explicit basic_stringbuf
    (const basic_string<charT,traits,Allocator>& str,
     ios_base::openmode which = ios_base::in | ios_base::out);
    basic_stringbuf(const basic_stringbuf& rhs) = delete;
    basic_stringbuf(basic_stringbuf&& rhs);

    // [:en] [#stringbuf.assign] Assign and swap:
    basic_stringbuf& operator=(const basic_stringbuf& rhs) = delete;
    basic_stringbuf& operator=(basic_stringbuf&& rhs);
    void swap(basic_stringbuf& rhs);

    // [:en] [#stringbuf.members] Get and set:
    basic_string<charT,traits,Allocator> str() const;
    void str(const basic_string<charT,traits,Allocator>& s);

  protected:
    // [:en] [#stringbuf.virtuals] Overridden virtual functions:
    virtual int_type   underflow();
    virtual int_type   pbackfail(int_type c = traits::eof());
    virtual int_type   overflow (int_type c = traits::eof());
    virtual  basic_streambuf<charT,traits>* setbuf(charT*, streamsize);


    virtual pos_type seekoff(off_type off, ios_base::seekdir way,
                             ios_base::openmode which
                               = ios_base::in | ios_base::out);
    virtual pos_type seekpos(pos_type sp,
                             ios_base::openmode which
                               = ios_base::in | ios_base::out);

  private:
    ios_base::openmode mode;  // [=Expos]
  };

  template <class charT, class traits, class Allocator>
  void swap(basic_stringbuf<charT, traits, Allocator>& x,
            basic_stringbuf<charT, traits, Allocator>& y);
}
[codeblock:end]

[para]
[:en] The class [`basic_stringbuf] is derived from [`basic_streambuf] to
associate possibly the input sequence and possibly the output sequence with a
sequence of arbitrary [+characters].

[:en] The sequence can be initialized from, or made available as, an object of
class [`basic_string].

[para]
[:en] For the sake of exposition, the maintained data is presented here as:

[list]
[item]
[:en] [`ios_base::openmode mode], has [`in] set if the input sequence can be
read, and [`out] set if the output sequence can be written.
[list:end]

[include stringbuf.cons]

[include stringbuf.assign]

[include stringbuf.members]

[include stringbuf.virtuals]
