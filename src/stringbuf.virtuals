[section#stringbuf.virtuals
    [:en] Overriden virtual functions
]

[%@library underflow[!basic_stringbuf]]
[codeblock:declaration]
int_type underflow();
[codeblock:end]

[enter:description]
[para:returns]
[:en] If the input sequence has a read position available, returns
[`traits::to_int_type(*gptr())].

[:en] Otherwise, returns [`traits::eof()].

[:en] Any character in the underlying buffer which has been initialized is
considered to be part of the input sequence.
[exit:description]

[%@library pbackfail[!basic_stringbuf]]
[codeblock:declaration]
int_type pbackfail(int_type c = traits::eof());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Puts back the character designated by [`c] to the input sequence, if
possible, in one of three ways:

[list]
[item]
[:en] If [`traits::eq_int_type(c,traits::eof())] returns [`false] and if the
input sequence has a putback position available, and if
[`traits::eq(to_char_type(c),gptr()[-1`])] returns [`true], assigns
[`gptr() - 1] to [`gptr()].

[para:~]
[:en] Returns: [`c].

[item]
[:en] If [`traits::eq_int_type(c,traits::eof())] returns [`false] and if the
input sequence has a putback position available, and if [`mode & ios_base::out]
is nonzero, assigns [`c] to [`*--gptr()].

[para:~]
[:en] Returns: [`c].

[item]
[:en] If [`traits::eq_int_type(c,traits::eof())] returns [`true] and if the
input sequence has a putback position available, assigns [`gptr() - 1] to
[`gptr()].

[para:~]
[:en] Returns: [`traits::not_eof(c)].
[list:end]

[para:returns]
[:en] [`traits::eof()] to indicate failure.

[para:notes]
[:en] If the function can succeed in more than one of these ways, it is
[%unspecified] unspecified which way is chosen.
[exit:description]

[%@library overflow[!basic_stringbuf]]
[codeblock:declaration]
int_type overflow(int_type c = traits::eof());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Appends the character designated by [`c] to the output sequence, if
possible, in one of two ways:

[list]
[item]
[:en] If [`traits::eq_int_type(c,traits::eof())] returns [`false] and if either
the output sequence has a write position available or the function makes a write
position available (as described below), the function calls [`sputc(c)].

[para:~]
[:en] Signals success by returning [`c].

[item]
[:en] If [`traits::eq_int_type(c,traits::eof())] returns [`true], there is no
character to append.

[para:~]
[:en] Signals success by returning a value other than [`traits::eof()].
[list:end]

[para:notes]
[:en] The function can alter the number of write positions available as a result
of any call.

[para:returns]
[:en] [`traits::eof()] to indicate failure.

[para]
[:en] The function can make a write position available only if
[`(mode & ios_base::out) != 0].

[:en] To make a write position available, the function reallocates (or initially
allocates) an array object with a sufficient number of elements to hold the
current array object (if any), plus at least one additional write position.

[:en] If [`(mode & ios_base::in) != 0], the function alters the read end pointer
[`egptr()] to point just past the new write position.
[exit:description]

[%@library seekoff[!basic_stringbuf]]
[codeblock:declaration]
pos_type seekoff(off_type off, ios_base::seekdir way,
                 ios_base::openmode which
                   = ios_base::in | ios_base::out);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Alters the stream position within one of the controlled sequences, if
possible, as indicated in Table [#tab:iostreams.seekoff.positioning].

[table:listing#tab:iostreams.seekoff.positioning
    [:en] [`seekoff] positioning
    [columns
        [column#headercenter
            [:en] Conditions
        ]
        [column#headercenter
            [:en] Result
        ]
    ]
    [border:row@both
]

[|] [`(which & ios_base::in) == ios_base::in]
[|] [:en] positions the input sequence

[|] [`(which & ios_base::out) == ios_base::out]
[|] [:en] positions the output sequence

[|]
[`(which & (ios_base::in | ios_base::out)) == (ios_base::in) | ios_base::out))]
    [br]
    [:en] and [`way ==] either [`ios_base::beg] or [`ios_base::end]
[|] [:en] positions both the input and the output sequences

[|] [:en] Otherwise
[|] [:en] the positioning operation fails.

[table:end]

[para]
[:en] For a sequence to be positioned, if its next pointer (either [`gptr()] or
[`pptr()]) is a null pointer and the new offset [`newoff] is nonzero, the
positioning operation fails.

[:en] Otherwise, the function determines [`newoff] as indicated in Table
[#tab:iostreams.newoff.values].

[table:listing#tab:iostreams.newoff.values
    [:en] [`newoff] values
    [columns
        [column#headercenter@code
            [:en] Condition
        ]
        [column#headercenter
            [:en] [`newoff] Value
        ]
    ]
    [border:row@both
]

[|] way == ios_base::beg
[|] 0

[|] way == ios_base::cur
[|] [:en] the next pointer minus the beginning pointer ([`xnext - xbeg]).

[|] way == ios_base::end
[|] [:en] the high mark pointer minus the beginning pointer
    ([`high_mark - xbeg]).

[table:end]

[para]
[:en] If [`(newoff + off) < 0], or if [`newoff + off] refers to an uninitialized
character (as defined in [#stringbuf.members] paragraph 1), the positioning
operation fails.

[:en] Otherwise, the function assigns [`xbeg + newoff + off] to the next pointer
[`xnext].

[para:returns]
[:en] [`pos_type(newoff)], constructed from the resultant offset [`newoff] (of
type [`off_type]), that stores the resultant stream position, if possible.

[:en] If the positioning operation fails, or if the constructed object cannot
represent the resultant stream position, the return value is
[`pos_type(off_type(-1))].
[exit:description]

[%@library seekpos[!basic_stringbuf]]
[codeblock:declaration]
pos_type seekpos(pos_type sp, ios_base::openmode which
                   = ios_base::in | ios_base::out);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`seekoff(off_type(sp), ios_base::beg, which)].

[para:returns]
[:en] [`sp] to indicate success, or [`pos_type(off_type(-1))] to indicate
failure.
[exit:description]

[%@library setbuf[!basic_streambuf]]
[%@library basic_streambuf[!setbuf]]
[codeblock:declaration]
basic_streambuf<charT,traits>* setbuf(charT* s, streamsize n);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [%implementation-defined] [%@impldef effect of calling
[`basic_streambuf::setbuf] with non-zero arguments] implementation-defined,
except that [`setbuf(0,0)] has no effect.

[para:returns]
[:en] [`this].
[exit:description]
