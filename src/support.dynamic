[section#support.dynamic
    [:en] Dynamic memory management
]

[para]
[:en]
The header [`<new>] defines several functions that manage the allocation of
dynamic storage in a program.

[:en]
It also defines components for reporting storage management errors.

[para:synopsis]
[:en]
Header [`<new>] synopsis

[%[`<new>][sortas new]] [%@library <new> [sortas new]]

[codeblock:synopsis]
namespace std {
  class bad_alloc;
  class bad_array_new_length;
  struct nothrow_t {};
  extern const nothrow_t nothrow;
  typedef void (*new_handler)();
  new_handler get_new_handler() noexcept;
  new_handler set_new_handler(new_handler new_p) noexcept;
}

void* operator new(std::size_t size);
void* operator new(std::size_t size, const std::nothrow_t&) noexcept;
void  operator delete(void* ptr) noexcept;
void  operator delete(void* ptr, const std::nothrow_t&) noexcept;
void  operator delete(void* ptr, std::size_t size) noexcept;
void  operator delete(void* ptr, std::size_t size,
                      const std::nothrow_t&) noexcept;
void* operator new[](std::size_t size);
void* operator new[](std::size_t size, const std::nothrow_t&) noexcept;
void  operator delete[](void* ptr) noexcept;
void  operator delete[](void* ptr, const std::nothrow_t&) noexcept;
void  operator delete[](void* ptr, std::size_t size) noexcept;
void  operator delete[](void* ptr, std::size_t size,
                        const std::nothrow_t&) noexcept;

void* operator new  (std::size_t size, void* ptr) noexcept;
void* operator new[](std::size_t size, void* ptr) noexcept;
void  operator delete  (void* ptr, void*) noexcept;
void  operator delete[](void* ptr, void*) noexcept;
[codeblock:end]

[para:xref]
[:en]
[#intro.memory], [#basic.stc.dynamic], [#expr.new], [#expr.delete],
[#class.free], [#memory].

[include new.delete]

[include alloc.errors]
