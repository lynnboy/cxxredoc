[section#syserr.errcat.overview
    [:en] Class [`error_category] overview
]

[para]
[:en]
The class [`error_category] serves as a base class for types used to identify
the source and encoding of a particular category of error code.

[:en]
Classes may be derived from [`error_category] to support categories of errors in
addition to those defined in this International Standard.

[:en]
Such classes shall behave as specified in this subclause.

[enter:note]
[:en]
[`error_category] objects are passed by reference, and two such objects are
equal if they have the same address.

[:en]
This means that applications using custom [`error_category] types should create
a single object of each such type.
[exit:note]

[%@library error_category]
[%@library generic_category]
[%@library system_category]
[codeblock:synopsis]
namespace std {
  class error_category {
  public:
    constexpr error_category() noexcept;
    virtual ~error_category();
    error_category(const error_category&) = delete;
    error_category& operator=(const error_category&) = delete;
    virtual const char* name() const noexcept = 0;
    virtual error_condition default_error_condition(int ev) const noexcept;
    virtual bool equivalent(int code, const error_condition& condition) const noexcept;
    virtual bool equivalent(const error_code& code, int condition) const noexcept;
    virtual string message(int ev) const = 0;
    
    bool operator==(const error_category& rhs) const noexcept;
    bool operator!=(const error_category& rhs) const noexcept;
    bool operator<(const error_category& rhs) const noexcept;
  };

  const error_category& generic_category() noexcept;
  const error_category& system_category() noexcept;

}   // namespace std
[codeblock:end]
