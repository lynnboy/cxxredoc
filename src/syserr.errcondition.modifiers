[section#syserr.errcondition.modifiers
    [:en] Class [`error_condition] modifiers
]

[%@library assign[!error_condition]]
[%@library error_condition[!assign]]
[codeblock:declaration]
void assign(int val, const error_category& cat) noexcept;
[codeblock:end]

[enter:description]
[para:postconditions]
[:en] [`val_ == val] and [`cat_ == &cat].
[exit:description]

[%@library operator=[!error_condition]]
[%@library error_condition[!operator=]]
[codeblock:declaration]
template <class ErrorConditionEnum>
    error_condition& operator=(ErrorConditionEnum e) noexcept;
[codeblock:end]

[enter:description]
[para:postcondition]
[:en] [`*this == make_error_condition(e)].

[para:returns]
[:en] [`*this].

[para:remarks]
[:en] This operator shall not participate in overload resolution unless
[`is_error_condition_enum<ErrorConditionEnum>::value] is [`true].
[exit:description]

[%@library clear[!error_condition]]
[%@library error_condition[!clear]]
[codeblock:declaration]
void clear() noexcept;
[codeblock:end]

[enter:description]
[para:postconditions]
[:en] [`value() == 0] and [`category() == generic_category()].
[exit:description]
