[section#temp.arg.explicit
    [:en] Explicit template argument specification
]

[para]
[:en]
[%specification[!template argument]]
Template arguments can be specified when referring to a function template
specialization by qualifying the function template name with the list of
[~template-argument]s in the same way as [~template-argument]s are specified in
uses of a class template specialization.

[enter:example]
[codeblock]
template<class T> void sort(Array<T>& v);
void f(Array<dcomplex>& cv, Array<int>& ci) {
  sort<dcomplex>(cv);           // [`sort(Array<dcomplex>&)]
  sort<int>(ci);                // [`sort(Array<int>&)]
}
[codeblock:end]

[:en]
and

[codeblock]
template<class U, class V> U convert(V v);

void g(double d) {
  int i = convert<int,double>(d);       // [`int convert(double)]
  char c = convert<char,double>(d);     // [`char convert(double)]
}
[codeblock:end]
[exit:example]

[para]
[:en]
A template argument list may be specified when referring to a specialization of
a function template

[list]
[item]
[:en] when a function is called,
[item]
[:en] when the address of a function is taken, when a function initializes a
reference to function, or when a pointer to member function is formed,
[item]
[:en] in an explicit specialization,
[item]
[:en] in an explicit instantiation, or
[item]
[:en] in a friend declaration.
[list:end]

[para]
[:en]
Trailing template arguments that can be deduced ([#temp.deduct]) or obtained
from default [~template-argument]s may be omitted from the list of explicit
[~template-argument]s.

[:en]
A trailing template parameter pack ([#temp.variadic]) not otherwise deduced will
be deduced to an empty sequence of template arguments.

[:en]
If all of the template arguments can be deduced, they may all be omitted; in
this case, the empty template argument list [`<>] itself may also be omitted.

[:en]
In contexts where deduction is done and fails, or in contexts where deduction is
not done, if a template argument list is specified and it, along with any
default template arguments, identifies a single function template
specialization, then the [~template-id] is an lvalue for the function template
specialization.

[enter:example]
[codeblock]
template<class X, class Y> X f(Y);
template<class X, class Y, class ... Z> X g(Y);
void h() {
  int i = f<int>(5.6);          // [:en] [`Y] is deduced to be [`double]
  int j = f(5.6);               // [:en] ill-formed: [`X] cannot be deduced
  f<void>(f<int, bool>);        // [:en] [`Y] for outer [`f] deduced to be
                                // [:en@~] [`int (*)(bool)]
  f<void>(f<int>);              // [:en] ill-formed: [`f<int>] does not denote a
                                // [:en@~] single function template specialization
  int k = g<int>(5.6);          // [:en] [`Y] is deduced to be double, [`Z] is deduced to an empty sequence
  f<void>(g<int, bool>);        // [:en] [`Y] for outer [`f] is deduced to be
                                // [:en@~] [`int (*)(bool)], [`Z] is deduced to an empty sequence
}
[codeblock:end]
[exit:example]

[para]
[enter:note]
[:en]
An empty template argument list can be used to indicate that a given use refers
to a specialization of a function template even when a non-template function
([#dcl.fct]) is visible that would otherwise be used.

[:en]
For example:

[codeblock]
template <class T> int f(T);    // #1
int f(int);                     // #2
int k = f(1);                   // [:en] uses #2
int l = f<>(1);                 // [:en] uses #1
[codeblock:end]
[exit:note]

[para]
[:en]
Template arguments that are present shall be specified in the declaration
order of their corresponding [~template-parameter]s.

[:en]
The template argument list shall not specify more [~template-argument]s than
there are corresponding [~template-parameter]s unless one of the
[~template-parameter]s is a template parameter pack.

[enter:example]
[codeblock]
template<class X, class Y, class Z> X f(Y,Z);
template<class ... Args> void f2();
void g() {
  f<int,const char*,double>("aa",3.0);
  f<int,const char*>("aa",3.0);       // [:en] [`Z] is deduced to be [`double]
  f<int>("aa",3.0);             // [:en] [`Y] is deduced to be [`const char*], and
                                // [:en@~] [`Z] is deduced to be [`double]
  f("aa",3.0);                  // [:en] error: [`X] cannot be deduced
  f2<char, short, int, long>(); // OK
}
[codeblock:end]
[exit:example]

[para]
[:en]
Implicit conversions (Clause [#conv]) will be performed on a function argument
to convert it to the type of the corresponding function parameter if the
parameter type contains no [~template-parameter]s that participate in template
argument deduction.

[enter:note]
[:en]
Template parameters do not participate in template argument deduction if they
are explicitly specified.

[:en]
For example,

[codeblock]
template<class T> void f(T);

class Complex {
  Complex(double);
};

void g() {
  f<Complex>(1);                // [:en] OK, means [`f<Complex>(Complex(1))]
}
[codeblock:end]
[exit:note]

[para]
[enter:note]
[:en]
Because the explicit template argument list follows the function template name,
and because conversion member function templates and constructor member function
templates are called without using a function name, there is no way to provide
an explicit template argument list for these function templates.
[exit:note]

[/
% L7048 USA Core3 1.18 / 14.8.1 [temp.arg.explicit]
% WG21 decided not to address this issue except to document that
% argument-dependent lookup does not apply in this context.
/]

[para]
[enter:note]
[:en]
For simple function names, argument dependent lookup ([#basic.lookup.argdep])
applies even when the function name is not visible within the scope of the call.

[:en]
This is because the call still has the syntactic form of a function call
([#basic.lookup.unqual]).

[:en]
But when a function template with explicit template arguments is used, the call
does not have the correct syntactic form unless there is a function template
with that name visible at the point of the call.

[:en]
If no such name is visible, the call is not syntactically well-formed and
argument-dependent lookup does not apply.

[:en]
If some such name is visible, argument dependent lookup applies and additional
function templates may be found in other namespaces.

[enter:example]
[/% Argument added to f per Usenet posting from martin von Loewis, 6 Sep 1998/]
[codeblock]
namespace A {
  struct B { };
  template<int X> void f(B);
}
namespace C {
  template<class T> void f(T t);
}
void g(A::B b) {
  f<3>(b);                      // [:en] ill-formed: not a function call
  A::f<3>(b);                   // [:en] well-formed
  C::f<3>(b);                   // [:en] ill-formed; argument dependent lookup
                                // [:en@~] applies only to unqualified names
  using C::f;
  f<3>(b);                      // [:en] well-formed because [`C::f] is visible; then
                                // [:en@~] [`A::f] is found by argument dependent lookup
}
[codeblock:end]
[exit:example]
[exit:note]

[para]
[:en]
Template argument deduction can extend the sequence of template arguments
corresponding to a template parameter pack, even when the sequence contains
explicitly specified template arguments.

[enter:example]
[codeblock]
template<class ... Types> void f(Types ... values);

void g() {
  f<int*, float*>(0, 0, 0);     // [:en] [`Types] is deduced to the sequence [`int*], [`float*], [`int]
}
[codeblock:end]
[exit:example]
