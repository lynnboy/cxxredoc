[section#temp.arg.template
    [:en] Template template arguments
    [:zh_CN] 模板的模板实参
]

[para]
[:en]
A [~template-argument] for a template [~template-parameter] shall be the name of
a class template or an alias template, expressed as [~id-expression].
[:zh_CN]
模板[~模板形参]的[~模板实参]应当为类模板或别名模板的名字，表示为[~标识表达式]。

[:en]
When the [~template-argument] names a class template, only primary class
templates are considered when matching the template template argument with the
corresponding parameter; partial specializations are not considered even if
their parameter lists match that of the template template parameter.
[:zh_CN]
若[~模板实参]指名类模板，则将模板模板实参与其对应形参进行匹配时只考虑主类模板；
即使部分特化式的形参列表与其模板模板形参匹配也不会被考虑。

[para]
[:en]
Any partial specializations ([#temp.class.spec]) associated with the primary
class template or primary variable template are considered when a specialization
based on the template [~template-parameter] is instantiated.
[:zh_CN]
当基于模板[~模板形参]对某个特例进行实例化时，与主类模板相关联的任何部分特化式
都要考虑（[#temp.class.spec]）。

[:en]
If a specialization is not visible at the point of instantiation, and it would
have been selected had it been visible, the program is ill-formed; no diagnostic
is required.
[:zh_CN]
如果某个特化式在实例化点不可见，而假若它可见就会选择它，则程序是非良构的；无须
诊断。

[enter:example]
[codeblock]
template<class T> class A {     // [:en] primary template
                                // [|:zh_CN] 主模板
  int x;
};
template<class T> class A<T*> { // [:en] partial specialization
                                // [|:zh_CN] 部分特化式
  long x;
};
template<template<class U> class V> class C {
  V<int>  y;
  V<int*> z;
};
C<A> c;                         // [:en] [`V<int>] within [`C<A>] uses the primary template,
                                // [|:zh_CN] [`C<A>] 中的 [`V<int>] 使用了主模板，
                                // [:en@~] so [`c.y.x] has type [`int]
                                // [|:zh_CN@~] 故 [`c.y.x] 类型为 [`int]
                                // [:en] [`V<int*>] within [`C<A>] uses the partial specialization,
                                // [|:zh_CN] [`C<A>] 中的 [`V<int*>] 使用了部分特化式，
                                // [:en@~] so [`c.z.x] has type [`long]
                                // [|:zh_CN@~] 故 [`c.x.x] 类型为 [`long]
[codeblock:end]
[exit:example]

[para]
[:en]
A [~template-argument] matches a template [~template-parameter] [`P] when each
of the template parameters in the [~template-parameter-list] of the
[~template-argument][=']s corresponding class template or alias template [`A]
matches the corresponding template parameter in the [~template-parameter-list]
of [`P]. 
[:zh_CN]
如果[~模板实参]的对应类模板或别名模板（称为 [`A]）的[~模板形参列表]中的每个模板
形参，与模板[~模板形参]（称为 [`P]）的[~模板形参列表]中的对应模板形参相匹配，则
该[~模板实参]与该模板[~模板形参]相匹配。

[:en]
Two template parameters match if they are of the same kind (type, non-type,
template), for non-type [~template-parameter]s, their types are equivalent
([#temp.over.link]), and for template [~template-parameter]s, each of their
corresponding [~template-parameter]s matches, recursively.
[:zh_CN]
当两个模板形参具有相同种类（类型、非类型或模板），且对于非类型[~模板形参]它们的
类型等价（[#temp.over.link]），以及对于模板[~模板形参]它们的每个对应[~模板形参]
都递归地相匹配时，它们相匹配。

[:en]
When [`P][=']s [~template-parameter-list] contains a template parameter pack
([#temp.variadic]), the template parameter pack will match zero or more template
parameters or template parameter packs in the [~template-parameter-list] of [`A]
with the same type and form as the template parameter pack in [`P] (ignoring
whether those template parameters are template parameter packs).
[:zh_CN]
若 [`P] 的[~模板形参列表]包含模板形参包组（[#temp.variadic]），则该模板形参包组
将与 [`A] 的[~模板形参列表]中，与 [`P] 中的模板形参包组类型和形式相同的零个或
多个模板形参或模板形参包组相匹配（忽略这些模板形参是否为模板形参包组）。

[para:~]
[enter:example]
[codeblock]
template<class T> class A { /* ... */ };
template<class T, class U = T> class B { /* ... */ };
template <class ... Types> class C { /* ... */ };

template<template<class> class P> class X { /* ... */ };
template<template<class ...> class Q> class Y { /* ... */ };

X<A> xa;            // OK
X<B> xb;            // [:en] ill-formed: default arguments for the parameters of a template argument are ignored
                    // [|:zh_CN] 非良构：忽略了模板实参的形参的默认实参
X<C> xc;            // [:en] ill-formed: a template parameter pack does not match a template parameter
                    // [|:zh_CN] 非良构：模板形参包组并不与模板形参匹配

Y<A> ya;            // OK
Y<B> yb;            // OK
Y<C> yc;            // OK
[codeblock:end]
[exit:example]

[para:~]
[enter:example]
[codeblock]
template <class T> struct eval;

template <template <class, class...> class TT, class T1, class... Rest>
struct eval<TT<T1, Rest...>> { };

template <class T1> struct A;
template <class T1, class T2> struct B;
template <int N> struct C;
template <class T1, int N> struct D;
template <class T1, class T2, int N = 17> struct E;

eval<A<int>> eA;                // [:en] OK: matches partial specialization of [`eval]
                                // [|:zh_CN] OK：匹配 [`eval] 的部分特化式
eval<B<int, float>> eB;         // [:en] OK: matches partial specialization of [`eval]
                                // [|:zh_CN] OK：匹配 [`eval] 的部分特化式
eval<C<17>> eC;                 // [:en] error: [`C] does not match [`TT] in partial specialization
                                // [|:zh_CN] 错误：[`C] 并不与部分特化式中的 [`TT] 相匹配
eval<D<int, 17>> eD;            // [:en] error: [`D] does not match [`TT] in partial specialization
                                // [|:zh_CN] 错误：[`D] 并不与部分特化式中的 [`TT] 相匹配
eval<E<int, float>> eE;         // [:en] error: [`E] does not match [`TT] in partial specialization
                                // [|:zh_CN] 错误：[`E] 并不与部分特化式中的 [`TT] 相匹配
[codeblock:end]
[exit:example]
