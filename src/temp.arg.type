[section#temp.arg.type
    [:en] Template type arguments
    [:zh_CN] 模板的类型实参
]

[para]
[:en]
A [~template-argument] for a [~template-parameter] which is a type shall be a
[~type-id].
[:zh_CN]
类型[~模板形参]的[~模板实参]应该为[~类型标识]。

[para]
[enter:example]
[codeblock]
template <class T> class X { };
template <class T> void f(T t) { }
struct { } unnamed_obj;

void f() {
  struct A { };
  enum { e1 };
  typedef struct { } B;
  B b;
  X<A> x1;          // OK
  X<A*> x2;         // OK
  X<B> x3;          // OK
  f(e1);            // OK
  f(unnamed_obj);   // OK
  f(b);             // OK
}
[codeblock:end]
[exit:example]

[enter:note]
[:en]
A template type argument may be an incomplete type ([#basic.types]).
[:zh_CN]
模板类型实参可以是不完整类型（[#basic.types]）。
[exit:note]

[para]
[:en]
If a declaration acquires a function type through a type dependent on a
[~template-parameter] and this causes a declaration that does not use the
syntactic form of a function declarator to have function type, the program is
ill-formed.
[:zh_CN]
如果声明式中通过依存于某个[~模板形参]的类型获得了函数类型，由此导致某个并未使用
函数声明符的语法形式的声明式具有了函数类型，则程序非良构。

[enter:example]
[codeblock]
template<class T> struct A {
  static T t;
};
typedef int function();
A<function> a;                  // [:en] ill-formed: would declare [`A<function>::t]
                                // [|:zh_CN] 非良构：将 [`A<function>::t]
                                // [:en@~] as a static member function
                                // [|:zh_CN@~] 声明为静态成员函数
[codeblock:end]
[exit:example]
