[section#temp.inst
    [:en] Implicit instantiation
]

[para]
[:en]
[%instantiation[!template implicit]]
Unless a class template specialization has been explicitly instantiated
([#temp.explicit]) or explicitly specialized ([#temp.expl.spec]), the class
template specialization is implicitly instantiated when the specialization is
referenced in a context that requires a completely-defined object type or when
the completeness of the class type affects the semantics of the program.

[enter:note]
[:en]
Within a template declaration, a local class or enumeration and the members of
a local class are never considered to be entities that can be separately
instantiated (this includes their default arguments,
[~exception-specification]s, and non-static data member initializers, if any).

[:en]
As a result, the dependent names are looked up, the semantic constraints are
checked, and any templates used are instantiated as part of the instantiation of
the entity within which the local class or enumeration is declared.
[exit:note]

[:en]
The implicit instantiation of a class template specialization causes the
implicit instantiation of the declarations, but not of the definitions, default
arguments, or [~exception-specification]s of the class member functions, member
classes, scoped member enumerations, static data members and member templates;
and it causes the implicit instantiation of the definitions of unscoped member
enumerations and member anonymous unions.

[:en]
However, for the purpose of determining whether an instantiated redeclaration
of a member is valid according to [#class.mem], a declaration that corresponds
to a definition in the template is considered to be a definition.

[enter:example]
[codeblock]
template<class T, class U>
struct Outer {
  template<class X, class Y> struct Inner;
  template<class Y> struct Inner<T, Y>;         // #1a
  template<class Y> struct Inner<T, Y> { };     // [:en] #1b; OK: valid redeclaration of #1a
  template<class Y> struct Inner<U, Y> { };     // #2
};

Outer<int, int> outer;                          // [:en] error at #2
[codeblock:end]

[:en]
[`Outer<int, int>::Inner<int, Y>] is redeclared at #1b.

[:en]
(It is not defined but noted as being associated with a definition in
[`Outer<T, U>].)

[:en]
#2 is also a redeclaration of #1a.

[:en]
It is noted as associated with a definition, so it is an invalid redeclaration
of the same partial specialization.
[exit:example]

[para]
[:en]
Unless a member of a class template or a member template has been explicitly
instantiated or explicitly specialized, the specialization of the member is
implicitly instantiated when the specialization is referenced in a context that
requires the member definition to exist; in particular, the initialization (and
any associated side-effects) of a static data member does not occur unless the
static data member is itself used in a way that requires the definition of the
static data member to exist.

[para]
[:en]
Unless a function template specialization has been explicitly instantiated or
explicitly specialized, the function template specialization is implicitly
instantiated when the specialization is referenced in a context that requires a
function definition to exist.

[:en]
Unless a call is to a function template explicit specialization or to a member
function of an explicitly specialized class template, a default argument for a
function template or a member function of a class template is implicitly
instantiated when the function is called in a context that requires the value of
the default argument.

[para]
[enter:example]
[codeblock]
template<class T> struct Z {
  void f();
  void g();
};

void h() {
  Z<int> a;         // [:en] instantiation of class [`Z<int>] required
  Z<char>* p;       // [:en] instantiation of class [`Z<char>] not required
  Z<double>* q;     // [:en] instantiation of class [`Z<double>] not required

  a.f();            // [:en] instantiation of [`Z<int>::f()] required
  p->g();           // [:en] instantiation of class [`Z<char>] required, and
                    // [:en] instantiation of [`Z<char>::g()] required
}
[codeblock:end]

[:en]
Nothing in this example requires [`class Z<double>], [`Z<int>::g()], or
[`Z<char>::f()] to be implicitly instantiated.
[exit:example]

[para]
[:en]
Unless a variable template specialization has been explicitly instantiated or
explicitly specialized, the variable template specialization is implicitly
instantiated when the specialization is used.

[:en]
A default template argument for a variable template is implicitly instantiated
when the variable template is referenced in a context that requires the value of
the default argument.

[para]
[:en]
A class template specialization is implicitly instantiated if the class type is
used in a context that requires a completely-defined object type or if the
completeness of the class type might affect the semantics of the program.

[enter:note]
[:en]
In particular, if the semantics of an expression depend on the member or base
class lists of a class template specialization, the class template
specialization is implicitly generated.

[:en]
For instance, deleting a pointer to class type depends on whether or not the
class declares a destructor, and conversion between pointer to class types
depends on the inheritance relationship between the two classes involved.
[exit:note]

[enter:example]
[codeblock]
template<class T> class B { /* ... */ };
template<class T> class D : public B<T> { /* ... */ };

void f(void*);
void f(B<int>*);

void g(D<int>* p, D<char>* pp, D<double>* ppp) {
  f(p);             // [:en] instantiation of [`D<int>] required: call [`f(B<int>*)]
  B<char>* q = pp;  // [:en] instantiation of [`D<char>] required:
                    // [:en@~] convert [`D<char>*] to [`B<char>*]
  delete ppp;       // [:en] instantiation of [`D<double>] required
}
[codeblock:end]
[exit:example]

[para]
[:en]
If the overload resolution process can determine the correct function to call
without instantiating a class template definition, it is unspecified whether
that instantiation actually takes place.

[enter:example]
[codeblock]
template <class T> struct S {
  operator int();
};

void f(int);
void f(S<int>&);
void f(S<float>);

void g(S<int>& sr) {
  f(sr);            // [:en] instantiation of [`S<int>] allowed but not required
                    // [:en] instantiation of [`S<float>] allowed but not required
};
[codeblock:end]
[exit:example]

[para]
[:en]
If an implicit instantiation of a class template specialization is required and
the template is declared but not defined, the program is ill-formed.

[enter:example]
[codeblock]
template<class T> class X;

X<char> ch;         // [:en] error: definition of [`X] required
[codeblock:end]
[exit:example]

[para]
[:en]
The implicit instantiation of a class template does not cause any static data
members of that class to be implicitly instantiated.

[para]
[:en]
If a function template or a member function template specialization is used in
a way that involves overload resolution, a declaration of the specialization is
implicitly instantiated ([#temp.over]).

[para]
[:en]
An implementation shall not implicitly instantiate a function template,
a variable template, a member template, a non-virtual member function, a member
class, or a static data member of a class template that does not require
instantiation.

[:en]
It is unspecified whether or not an implementation implicitly instantiates a
virtual member function of a class template if the virtual member function would
not otherwise be instantiated.

[:en]
The use of a template specialization in a default argument shall not cause the
template to be implicitly instantiated except that a class template may be
instantiated where its complete type is needed to determine the correctness of
the default argument.

[:en]
The use of a default argument in a function call causes specializations in the
default argument to be implicitly instantiated.

[para]
[:en]
Implicitly instantiated class, function, and variable template specializations
are placed in the namespace where the template is defined.

[:en]
Implicitly instantiated specializations for members of a class template are
placed in the namespace where the enclosing class template is defined.

[:en]
Implicitly instantiated member templates are placed in the namespace where the
enclosing class or class template is defined.

[enter:example]
[codeblock]
namespace N {
  template<class T> class List {
  public:
    T* get();
  };
}

template<class K, class V> class Map {
public:
  N::List<V> lt;
  V get(K);
};

void g(Map<const char*,int>& m) {
  int i = m.get("Nicholas");
}
[codeblock:end]

[:en]
a call of [`lt.get()] from [`Map<const char*,int>::get()] would place
[`List<int>::get()] in the namespace [`N] rather than in the global namespace.
[exit:example]

[para]
[:en]
If a function template [`f] is called in a way that requires a default argument
to be used, the dependent names are looked up, the semantics constraints are
checked, and the instantiation of any template used in the default argument is
done as if the default argument had been an initializer used in a function
template specialization with the same scope, the same template parameters and
the same access as that of the function template [`f] used at that point, except
that the scope in which a closure type is declared ([#expr.prim.lambda]) [=-]
and therefore its associated namespaces [=-] remain as determined from the
context of the definition for the default argument.

[:en]
This analysis is called [+default argument instantiation].

[:en]
The instantiated default argument is then used as the argument of [`f].

[para]
[:en]
Each default argument is instantiated independently.

[enter:example]
[codeblock]
template<class T> void f(T x, T y = ydef(T()), T z = zdef(T()));

class  A { };

A zdef(A);

void g(A a, A b, A c) {
  f(a, b, c);       // [:en] no default argument instantiation
  f(a, b);          // [:en] default argument [`z = zdef(T())] instantiated
  f(a);             // [:en] ill-formed; [`ydef] is not declared
}
[codeblock:end]
[exit:example]

[para]
[:en]
The [~exception-specification] of a function template specialization is not
instantiated along with the function declaration; it is instantiated when needed
([#except.spec]).

[:en]
If such an [~exception-specification] is needed but has not yet been
instantiated, the dependent names are looked up, the semantics constraints are
checked, and the instantiation of any template used in the
[~exception-specification] is done as if it were being done as part
of instantiating the declaration of the specialization at that point.

[para]
[enter:note]
[:en]
[#temp.point] defines the point of instantiation of a template specialization.
[exit:note]

[para]
[:en]
There is an implementation-defined quantity that specifies the limit on the
total depth of recursive instantiations, which could involve more than one
template.

[:en]
The result of an infinite recursion in instantiation is undefined.
[enter:example]

[codeblock]
template<class T> class X {
  X<T>* p;          // OK
  X<T*> a;          // [:en] implicit generation of [`X<T>] requires
                    // [:en@~] the implicit instantiation of [`X<T*>] which requires
                    // [:en@~] the implicit instantiation of [`X<T**>] which ...
};
[codeblock:end]
[exit:example]
