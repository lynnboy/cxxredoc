[section#temp.type
    [:en] Type equivalence
]

[para]
[:en]
[%equivalence[!template type]]
Two [~template-id]s refer to the same class, function, or variable if

[list]
[item]
[:en] their [~template-name]s, [~operator-function-id]s, or
[~literal-operator-id]s refer to the same template and
[item]
[:en] their corresponding type [~template-argument]s are the same type and
[item]
[:en] their corresponding non-type template arguments of integral or enumeration
type have identical values and
[item]
[:en] their corresponding non-type [~template-argument]s of pointer type refer
to the same object or function or are both the null pointer value and
[item]
[:en] their corresponding non-type [~template-argument]s of pointer-to-member
type refer to the same class member or are both the null member pointer value
and
[item]
[:en] their corresponding non-type [~template-argument]s of reference type refer
to the same object or function and
[item]
[:en] their corresponding template [~template-argument]s refer to the same
template.
[list:end]

[enter:example]
[codeblock]
template<class E, int size> class buffer { /* ... */ };
buffer<char,2*512> x;
buffer<char,1024> y;
[codeblock:end]

[:en]
declares [`x] and [`y] to be of the same type, and

[codeblock]
template<class T, void(*err_fct)()> class list { /* ... */ };
list<int,&error_handler1> x1;
list<int,&error_handler2> x2;
list<int,&error_handler2> x3;
list<char,&error_handler2> x4;
[codeblock:end]

[:en]
declares [`x2] and [`x3] to be of the same type.

[:en]
Their type differs from the types of [`x1] and [`x4].

[codeblock]
template<class T> struct X { };
template<class> struct Y { };
template<class T> using Z = Y<T>;
X<Y<int> > y;
X<Z<int> > z;
[codeblock:end]

[:en]
declares [`y] and [`z] to be of the same type.
[exit:example]

[para]
[:en]
If an expression [$e] involves a template parameter, [`decltype(][$e][`)]
denotes a unique dependent type.

[:en]
Two such [~decltype-specifier]s refer to the same type only if their
[~expression]s are equivalent ([#temp.over.link]).

[enter:note]
[:en]
however, it may be aliased, e.g., by a [~typedef-name].
[exit:note]
