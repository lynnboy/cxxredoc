[section#template.bitset
    [:en] Class template [`bitset]
]

[%@library bitset]

[para:synopsis]
[:en] Header [`<bitset>] synopsis

[%@library <bitset> [sortas bitset]]

[codeblock:synopsis]
#include <string>
#include <iosfwd>               // [:en] for [`istream], [`ostream]
namespace std {
  template <size_t N> class bitset;

  // [:en] [#bitset.operators] bitset operators:
  template <size_t N>
    bitset<N> operator&(const bitset<N>&, const bitset<N>&) noexcept;
  template <size_t N>
    bitset<N> operator|(const bitset<N>&, const bitset<N>&) noexcept;
  template <size_t N>
    bitset<N> operator^(const bitset<N>&, const bitset<N>&) noexcept;
  template <class charT, class traits, size_t N>
    basic_istream<charT, traits>&
    operator>>(basic_istream<charT, traits>& is, bitset<N>& x);
  template <class charT, class traits, size_t N>
    basic_ostream<charT, traits>&
    operator<<(basic_ostream<charT, traits>& os, const bitset<N>& x);
}
[codeblock:end]

[para]
[:en]
The header [`<bitset>] defines a class template and several related functions
for representing and manipulating fixed-size sequences of bits.

[codeblock:synopsis]
namespace std {
  template<size_t N> class bitset {
  public:
    // [:en] bit reference:
    class reference {
      friend class bitset;
      reference() noexcept;
    public:
     ~reference() noexcept;
      reference& operator=(bool x) noexcept;             // [:en] for [`b[i`] = x;]
      reference& operator=(const reference&) noexcept;   // [:en] for [`b[i`] = b[j`];]
      bool operator~() const noexcept;                   // [:en] flips the bit
      operator bool() const noexcept;                    // [:en] for [`x = b[i`];]
      reference& flip() noexcept;                        // [:en] for [`b[i`].flip();]
    };

    // [:en] [#bitset.cons] constructors:
    constexpr bitset() noexcept;
    constexpr bitset(unsigned long long val) noexcept;
    template<class charT, class traits, class Allocator>
      explicit bitset(
        const basic_string<charT,traits,Allocator>& str,
        typename basic_string<charT,traits,Allocator>::size_type pos = 0,
        typename basic_string<charT,traits,Allocator>::size_type n =
          basic_string<charT,traits,Allocator>::npos,
          charT zero = charT('0'), charT one = charT('1'));
    template <class charT>
      explicit bitset(
        const charT* str,
        typename basic_string<charT>::size_type n = basic_string<charT>::npos,
        charT zero = charT('0'), charT one = charT('1'));

    // [:en] [#bitset.members] bitset operations:
    bitset<N>& operator&=(const bitset<N>& rhs) noexcept;
    bitset<N>& operator|=(const bitset<N>& rhs) noexcept;
    bitset<N>& operator^=(const bitset<N>& rhs) noexcept;
    bitset<N>& operator<<=(size_t pos) noexcept;
    bitset<N>& operator>>=(size_t pos) noexcept;
    bitset<N>& set() noexcept;
    bitset<N>& set(size_t pos, bool val = true);
    bitset<N>& reset() noexcept;
    bitset<N>& reset(size_t pos);
    bitset<N>  operator~() const noexcept;
    bitset<N>& flip() noexcept;
    bitset<N>& flip(size_t pos);

    // [:en] element access:
    constexpr bool operator[](size_t pos) const;       // [:en] for [`b[i`];]
    reference operator[](size_t pos);                  // [:en] for [`b[i`];]

    unsigned long to_ulong() const;
    unsigned long long to_ullong() const;
    template <class charT = char,
        class traits = char_traits<charT>,
        class Allocator = allocator<charT> >
      basic_string<charT, traits, Allocator>
      to_string(charT zero = charT('0'), charT one = charT('1')) const;
    size_t count() const noexcept;
    constexpr size_t size() const noexcept;
    bool operator==(const bitset<N>& rhs) const noexcept;
    bool operator!=(const bitset<N>& rhs) const noexcept;
    bool test(size_t pos) const;
    bool all() const noexcept;
    bool any() const noexcept;
    bool none() const noexcept;
    bitset<N> operator<<(size_t pos) const noexcept;
    bitset<N> operator>>(size_t pos) const noexcept;
  };

  // [:en] [#bitset.hash] hash support
  template <class T> struct hash;
  template <size_t N> struct hash<bitset<N> >;
}
[codeblock:end]

[para]
[:en]
The class template [`bitset<N>] describes an object that can store a sequence
consisting of a fixed number of bits, [`N].

[para]
[:en]
Each bit represents either the value zero (reset) or one (set).

[:en]
To [+toggle] a bit is to change the value zero to one, or the value one to zero.

[:en]
Each bit has a non-negative position [`pos].

[:en]
When converting between an object of class [`bitset<N>] and a value of some
integral type, bit position [`pos] corresponds to the [+bit value] [`1 << pos].

[:en]
The integral value corresponding to two or more bits is the sum of their bit
values.

[para]
[:en]
The functions described in this subclause can report three kinds of errors,
each associated with a distinct exception:

[list]
[item]
[:en] an [+invalid-argument] error is associated with exceptions of type
[%@library invalid_argument] [`invalid_argument] ([#invalid.argument]);
[item]
[:en] an [+out-of-range] error is associated with exceptions of type
[%@library out_of_range] [`out_of_range] ([#out.of.range]);
[item]
[:en] an [+overflow] error is associated with exceptions of type
[%@library overflow_error] [`overflow_error] ([#overflow.error]).
[list:end]

[include bitset.cons]

[include bitset.members]

[include bitset.hash]

[include bitset.operators]
