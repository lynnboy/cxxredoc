[section#template.slice.array.overview
    [:en] Class template [`slice_array] overview
]

[%@library slice_array]
[codeblock:synopsis]
namespace std {
  template <class T> class slice_array {
  public:
    typedef T value_type;

    void operator=  (const valarray<T>&) const;
    void operator*= (const valarray<T>&) const;
    void operator/= (const valarray<T>&) const;
    void operator%= (const valarray<T>&) const;
    void operator+= (const valarray<T>&) const;
    void operator-= (const valarray<T>&) const;
    void operator^= (const valarray<T>&) const;
    void operator&= (const valarray<T>&) const;
    void operator|= (const valarray<T>&) const;
    void operator<<=(const valarray<T>&) const;
    void operator>>=(const valarray<T>&) const;

    slice_array(const slice_array&);
    ~slice_array();
    const slice_array& operator=(const slice_array&) const;
  void operator=(const T&) const;

    slice_array() = delete;       // [:en] as implied by declaring copy constructor above
  };
}
[codeblock:end]

[para]
[:en] The [`slice_array] template is a helper template used by the [`slice]
subscript operator

[codeblock:notation]
slice_array<T> valarray<T>::operator[](slice);
[codeblock:end]

[:en] It has reference semantics to a subset of an array specified by a [`slice]
object.

[para]
[enter:example]
[:en] The expression [`a[slice(1, 5, 3)`] = b;] has the effect of assigning the
elements of [`b] to a slice of the elements in [`a].

[:en] For the slice shown, the elements selected from [`a] are 1, 4, ..., 13.
[exit:example]
