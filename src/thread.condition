[section#thread.condition
    [:en] Condition variables
]

[para]
[:en] Condition variables provide synchronization primitives used to block a
thread until notified by some other thread that some condition is met or until a
system time is reached.

[:en] Class [`condition_variable] provides a condition variable that can only
wait on an object of type [`unique_lock<mutex>], allowing maximum efficiency on
some platforms.

[:en] Class [`condition_variable_any] provides a general condition variable that
can wait on objects of user-supplied lock types.

[para]
[:en] Condition variables permit concurrent invocation of the [`wait],
[`wait_for], [`wait_until], [`notify_one] and [`notify_all] member functions.

[para]
[:en] The execution of [`notify_one] and [`notify_all] shall be atomic.

[:en] The execution of [`wait], [`wait_for], and [`wait_until] shall be
performed in three atomic parts:

[list:ol@ndot]
[item]
[:en] the release of the mutex and entry into the waiting state;
[item]
[:en] the unblocking of the wait; and
[item]
[:en] the reacquisition of the lock.
[list:end]

[para]
[:en] The implementation shall behave as if all executions of [`notify_one],
[`notify_all], and each part of the [`wait], [`wait_for], and [`wait_until]
executions are executed in a single unspecified total order consistent with the
["happens before] order.

[para]
[:en] Condition variable construction and destruction need not be synchronized.

[para:synopsis]
[:en] Header [`condition_variable] synopsis

[%@library <condition_variable> [sortas condition_variable]]

[codeblock:synopsis]
namespace std {
  class condition_variable;
  class condition_variable_any;

  void notify_all_at_thread_exit(condition_variable& cond, unique_lock<mutex> lk);

  enum class cv_status { no_timeout, timeout };
}
[codeblock:end]

[%@library notify_all_at_thread_exit]
[codeblock:declaration]
void notify_all_at_thread_exit(condition_variable& cond, unique_lock<mutex> lk);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`lk] is locked by the calling thread and either

[list]
[item]
[:en] no other thread is waiting on [`cond], or
[item]
[:en] [`lk.mutex()] returns the same value for each of the lock arguments
supplied by all concurrently waiting (via [`wait], [`wait_for], or
[`wait_until]) threads.
[list:end]

[para:effects]
[:en] transfers ownership of the lock associated with [`lk] into internal
storage and schedules [`cond] to be notified when the current thread exits,
after all objects of thread storage duration associated with the current thread
have been destroyed.

[:en] This notification shall be as if

[codeblock:notation]
lk.unlock();
cond.notify_all();
[codeblock:end]

[para:sync]
[:en] The implied [`lk.unlock()] call is sequenced after the destruction of all
objects with thread storage duration associated with the current thread.

[para:realnote]
[:en] The supplied lock will be held until the thread exits, and care must be
taken to ensure that this does not cause deadlock due to lock ordering issues.

[:en] After calling [`notify_all_at_thread_exit] it is recommended that the
thread should be exited as soon as possible, and that no blocking or
time-consuming tasks are run on that thread.

[para:realnote]
[:en] It is the user[=']s responsibility to ensure that waiting threads do not
erroneously assume that the thread has finished if they experience spurious
wakeups.

[:en] This typically requires that the condition being waited for is satisfied
while holding the lock on [`lk], and that this lock is not released and
reacquired prior to calling [`notify_all_at_thread_exit].
[exit:description]

[include thread.condition.condvar]

[include thread.condition.condvarany]
