[section#thread.lock.shared.cons
    [:en] [`shared_lock] constructors, destructor, and assignment
]

[%@library shared_lock[![:en]constructor]]
[codeblock:declaration]
shared_lock() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`shared_lock].

[para:postconditions]
[:en] [`pm == nullptr] and [`owns == false].
[exit:description]

[%@library shared_lock[![:en]constructor]]
[codeblock:declaration]
explicit shared_lock(mutex_type& m);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The calling thread does not own the mutex for any ownership mode.

[para:effects]
[:en] Constructs an object of type [`shared_lock] and calls [`m.lock_shared()].

[para:postconditions]
[:en] [`pm == &m] and [`owns == true].
[exit:description]

[%@library shared_lock[![:en]constructor]]
[codeblock:declaration]
shared_lock(mutex_type& m, defer_lock_t) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`shared_lock].

[para:postconditions]
[:en] [`pm == &m] and [`owns == false].
[exit:description]

[%@library shared_lock[![:en]constructor]]
[codeblock:declaration]
shared_lock(mutex_type& m, try_to_lock_t);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The calling thread does not own the mutex for any ownership mode.

[para:effects]
[:en] Constructs an object of type [`shared_lock] and calls
[`m.try_lock_shared()].

[para:postconditions]
[:en] [`pm == &m] and [`owns == res] where [`res] is the value returned by the
call to [`m.try_lock_shared()].
[exit:description]

[%@library shared_lock[![:en]constructor]]
[codeblock:declaration]
shared_lock(mutex_type& m, adopt_lock_t);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The calling thread has shared ownership of the mutex.

[para:effects]
[:en] Constructs an object of type [`shared_lock].

[para:postconditions]
[:en] [`pm == &m] and [`owns == true].
[exit:description]

[%@library shared_lock[![:en]constructor]]
[codeblock:declaration]
template <class Clock, class Duration>
  shared_lock(mutex_type& m,
              const chrono::time_point<Clock, Duration>& abs_time);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The calling thread does not own the mutex for any ownership mode.

[para:effects]
[:en] Constructs an object of type [`shared_lock] and calls
[`m.try_lock_shared_until(abs_time)].

[para:postconditions]
[:en] [`pm == &m] and [`owns == res] where [`res] is the value returned by the
call to [`m.try_lock_shared_until(abs_time)].
[exit:description]

[%@library shared_lock[![:en]constructor]]
[codeblock:declaration]
template <class Rep, class Period>
  shared_lock(mutex_type& m,
              const chrono::duration<Rep, Period>& rel_time);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The calling thread does not own the mutex for any ownership mode.

[para:effects]
[:en] Constructs an object of type [`shared_lock] and calls
[`m.try_lock_shared_for(rel_time)].

[para:postconditions]
[:en] [`pm == &m] and [`owns == res] where [`res] is the value returned by the
call to [`m.try_lock_shared_for(rel_time)].
[exit:description]

[%@library shared_lock[![:en]destructor]]
[codeblock:declaration]
~shared_lock();
[codeblock:end]

[enter:description]
[para:effects]
[:en] If [`owns] calls [`pm->unlock_shared()].
[exit:description]

[%@library shared_lock[![:en]constructor]]
[codeblock:declaration]
shared_lock(shared_lock&& sl) noexcept;
[codeblock:end]

[enter:description]
[para:postconditions]
[:en] [`pm == sl_p.pm] and [`owns == sl_p.owns] (where [`sl_p] is the state of
[`sl] just prior to this construction), [`sl.pm == nullptr] and
[`sl.owns == false].
[exit:description]

[%@library shared_lock[!operator=]]
[codeblock:declaration]
shared_lock& operator=(shared_lock&& sl) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] If [`owns] calls [`pm->unlock_shared()].

[para:postconditions]
[:en] [`pm == sl_p.pm] and [`owns == sl_p.owns] (where [`sl_p] is the state of
[`sl] just prior to this assignment), [`sl.pm == nullptr] and
[`sl.owns == false].
[exit:description]
