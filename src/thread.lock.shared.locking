[section#thread.lock.shared.locking
    [:en] [`shared_lock] locking
]

[%@library shared_lock[!lock]]
[%@library lock[!shared_lock]]
[codeblock:declaration]
void lock();
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`pm->lock_shared()].

[para:postconditions]
[:en] [`owns == true].

[para:throws]
[:en] Any exception thrown by [`pm->lock_shared()].

[:en] [`system_error] if an exception is required ([#thread.req.exception]).

[:en] [`system_error] with an error condition of [`operation_not_permitted] if
[`pm] is [`nullptr].

[:en] [`system_error] with an error condition of
[`resource_deadlock_would_occur] if on entry [`owns] is [`true].
[exit:description]

[%@library shared_lock[!try_lock]]
[%@library try_lock[!shared_lock]]
[codeblock:declaration]
bool try_lock();
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`pm->try_lock_shared()].

[para:returns]
[:en] The value returned by the call to [`pm->try_lock_shared()].

[para:postconditions]
[:en] [`owns == res], where [`res] is the value returned by the call to
[`pm->try_lock_shared()].

[para:throws]
[:en] Any exception thrown by [`pm->try_lock_shared()].

[:en] [`system_error] if an exception is required ([#thread.req.exception]).

[:en] [`system_error] with an error condition of [`operation_not_permitted] if
[`pm] is [`nullptr].

[:en] [`system_error] with an error condition of
[`resource_deadlock_would_occur] if on entry [`owns] is [`true].
[exit:description]

[%@library shared_lock[!try_lock_until]]
[%@library try_lock_until[!shared_lock]]
[codeblock:declaration]
template <class Clock, class Duration>
  bool
  try_lock_until(const chrono::time_point<Clock, Duration>& abs_time);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`pm->try_lock_shared_until(abs_time)].

[para:returns]
[:en] The value returned by the call to [`pm->try_lock_shared_until(abs_time)].

[para:postconditions]
[:en] [`owns == res], where [`res] is the value returned by the call to
[`pm->try_lock_shared_until(abs_time)].

[para:throws]
[:en] Any exception thrown by [`pm->try_lock_shared_until(abs_time)].

[:en] [`system_error] if an exception is required ([#thread.req.exception]).

[:en] [`system_error] with an error condition of [`operation_not_permitted] if
[`pm] is [`nullptr].

[:en] [`system_error] with an error condition of
[`resource_deadlock_would_occur] if on entry [`owns] is [`true].
[exit:description]

[%@library shared_lock[!try_lock_for]]
[%@library try_lock_for[!shared_lock]]
[codeblock:declaration]
template <class Rep, class Period>
  bool try_lock_for(const chrono::duration<Rep, Period>& rel_time);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`pm->try_lock_shared_for(rel_time)].

[para:returns]
[:en] The value returned by the call to [`pm->try_lock_shared_for(rel_time)].

[para:postconditions]
[:en] [`owns == res], where [`res] is the value returned by the call to
[`pm->try_lock_shared_for(rel_time)].

[para:throws]
[:en] Any exception thrown by [`pm->try_lock_shared_for(rel_time)].

[:en] [`system_error] if an exception is required ([#thread.req.exception]).

[:en] [`system_error] with an error condition of [`operation_not_permitted] if
[`pm] is [`nullptr].

[:en] [`system_error] with an error condition of
[`resource_deadlock_would_occur] if on entry [`owns] is [`true].
[exit:description]

[%@library shared_lock[!unlock]]
[%@library unlock[!shared_lock]]
[codeblock:declaration]
void unlock();
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`pm->unlock_shared()].

[para:postconditions]
[:en] [`owns == false].

[para:throws]
[:en] [`system_error] when an exception is required ([#thread.req.exception]).

[para:errors]
[list]
[item]
[:en] [`operation_not_permitted] [=--] if on entry [`owns] is [`false].
[list:end]
[exit:description]
