[section#thread.once.callonce
    [:en] Function [`call_once]
]

[%@library call_once]
[codeblock:declaration]
template<class Callable, class ...Args>
  void call_once(once_flag& flag, Callable&& func, Args&&... args);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`Callable] and each [`Ti] in [`Args] shall satisfy the
[`MoveConstructible] requirements.

[:en] [`[$INVOKE]([$DECAY_COPY](std::forward<Callable>(func)),
[$DECAY_COPY](std::forward<Args>(args))...)] ([#func.require]) shall be a valid
expression.

[para:effects]
[:en] An execution of [`call_once] that does not call its [`func] is a
[+passive] execution.

[:en] An execution of [`call_once] that calls its [`func] is an [+active]
execution.

[:en] An active execution shall call
[`[$INVOKE]([$DECAY_COPY](std::forward<Callable>(func)),
[$DECAY_COPY](std::forward<Args>(args))...)].

[:en] If such a call to [`func] throws an exception the execution is
[+exceptional], otherwise it is [+returning].

[:en] An exceptional execution shall propagate the exception to the caller of
[`call_once].

[:en] Among all executions of [`call_once] for any given [`once_flag]: at most
one shall be a returning execution; if there is a returning execution, it shall
be the last active execution; and there are passive executions only if there is
a returning execution.

[enter:note]
[:en] passive executions allow other threads to reliably observe the results
produced by the earlier returning execution.
[exit:note]

[para:sync]
[:en] For any given [`once_flag]: all active executions occur in a total order;
completion of an active execution synchronizes with ([#intro.multithread]) the
start of the next one in this total order; and the returning execution
synchronizes with the return from all passive executions.

[para:throws]
[:en] [`system_error] when an exception is required ([#thread.req.exception]),
or any exception thrown by [`func].

[para]
[enter:example]
[codeblock:synopsis]
// [:en] global flag, regular function
void init();
std::once_flag flag;

void f() {
  std::call_once(flag, init);
}

// [:en] function static flag, function object
struct initializer {
  void operator()();
};

void g() {
  static std::once_flag flag2;
  std::call_once(flag2, initializer());
}

// [:en] object flag, member function
class information {
  std::once_flag verified;
  void verifier();
public:
  void verify() { std::call_once(verified, &information::verifier, *this); }
};
[codeblock:end]
[exit:example]
[exit:description]
