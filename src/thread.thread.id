[section#thread.thread.id
    [:en] Class [`thread::id]
]

[codeblock:synopsis]
namespace std {
  class thread::id {
  public:
      id() noexcept;
  };

  bool operator==(thread::id x, thread::id y) noexcept;
  bool operator!=(thread::id x, thread::id y) noexcept;
  bool operator<(thread::id x, thread::id y) noexcept;
  bool operator<=(thread::id x, thread::id y) noexcept;
  bool operator>(thread::id x, thread::id y) noexcept;
  bool operator>=(thread::id x, thread::id y) noexcept;

  template<class charT, class traits>
    basic_ostream<charT, traits>&
      operator<< (basic_ostream<charT, traits>& out, thread::id id);

  // [:en] Hash support
  template <class T> struct hash;
  template <> struct hash<thread::id>;
}
[codeblock:end]

[para]
[:en] An object of type [`thread::id] provides a unique identifier for each
thread of execution and a single distinct value for all [`thread] objects that
do not represent a thread of execution ([#thread.thread.class]).

[:en] Each thread of execution has an associated [`thread::id] object that is
not equal to the [`thread::id] object of any other thread of execution and that
is not equal to the [`thread::id] object of any [`std::thread] object that does
not represent threads of execution.

[para]
[:en] [`thread::id] shall be a trivially copyable class (Clause [#class]).

[:en] The library may reuse the value of a [`thread::id] of a terminated thread
that can no longer be joined.

[para]
[enter:note]
[:en] Relational operators allow [`thread::id] objects to be used as keys in
associative containers.
[exit:note]

[%@library thread::id[![:en]constructor]]
[codeblock:declaration]
id() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of type [`id].

[para:postconditions]
[:en] The constructed object does not represent a thread of execution.
[exit:description]

[%@library thread::id[!operator==]]
[%@library operator==[!thread::id]]
[codeblock:declaration]
bool operator==(thread::id x, thread::id y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`true] only if [`x] and [`y] represent the same thread of execution or
neither [`x] nor [`y] represents a thread of execution.
[exit:description]

[%@library thread::id[!operator!=]]
[%@library operator!=[!thread::id]]
[codeblock:declaration]
bool operator!=(thread::id x, thread::id y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!(x == y)]
[exit:description]

[%@library thread::id[!operator<]]
[%@library operator<[!thread::id]]
[codeblock:declaration]
bool operator<(thread::id x, thread::id y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A value such that [`operator<] is a total ordering as described in
[#alg.sorting].
[exit:description]

[%@library thread::id[!operator<=]]
[%@library operator<=[!thread::id]]
[codeblock:declaration]
bool operator<=(thread::id x, thread::id y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!(y < x)]
[exit:description]

[%@library thread::id[!operator>]]
[%@library operator>[!thread::id]]
[codeblock:declaration]
bool operator>(thread::id x, thread::id y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`y < x]
[exit:description]

[%@library thread::id[!operator>=]]
[%@library operator>=[!thread::id]]
[codeblock:declaration]
bool operator>=(thread::id x, thread::id y) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!(x < y)]
[exit:description]

[%@library thread::id[!operator<<]]
[%@library operator<<[!thread::id]]
[codeblock:declaration]
template<class charT, class traits>
  basic_ostream<charT, traits>&
    operator<< (basic_ostream<charT, traits>&& out, thread::id id);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Inserts an unspecified text representation of [`id] into [`out].

[:en] For two objects of type [`thread::id] [`x] and [`y], if [`x == y] the
[`thread::id] objects shall have the same text representation and if [`x != y]
the [`thread::id] objects shall have distinct text representations.

[para:returns]
[:en] [`out]
[exit:description]

[codeblock:declaration]
template <> struct hash<thread::id>;
[codeblock:end]

[enter:description]
[para]
[:en] The template specialization shall meet the requirements of class template
[`hash] ([#unord.hash]).
[exit:description]
