[section#time.clock.system
    [:en] Class [`system_clock]
]

[para]
[:en]
Objects of class [`system_clock] represent wall clock time from the system-wide
realtime clock.

[codeblock:synopsis [special unspecified] ]
class system_clock {
public:
  typedef [=Seebelow]                           rep;
  typedef ratio<unspecified, unspecified>     period;
  typedef chrono::duration<rep, period>       duration;
  typedef chrono::time_point<system_clock>    time_point;
  static constexpr bool is_steady =           unspecified;

  static time_point now() noexcept;

  // [:en] Map to C API
  static time_t      to_time_t  (const time_point& t) noexcept;
  static time_point  from_time_t(time_t t) noexcept;
};
[codeblock:end]

[%@library rep[!system_clock]]
[%@library system_clock[!rep]]
[codeblock:declaration [special unspecified] ]
typedef unspecified system_clock::rep;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`system_clock::duration::min() < system_clock::duration::zero()] shall be
[`true].

[enter:note]
[:en] This implies that [`rep] is a signed type.
[exit:note]
[exit:description]

[%@library to_time_t]
[codeblock:declaration]
static time_t to_time_t(const time_point& t) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`time_t] object that represents the same point in time as [`t] when
both values are restricted to the coarser of the precisions of [`time_t] and
[`time_point].

[:en] [%@impldef whether values are rounded or truncated to the required
precision when converting between [`time_t] values and [`time_point] objects.]
[:en] It is implementation defined whether values are rounded or truncated to
the required precision.

[exit:description]
[%@library from_time_t]
[codeblock:declaration]
static time_point from_time_t(time_t t) noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] A [`time_point] object that represents the same point in time as [`t] when
both values are restricted to the coarser of the precisions of [`time_t] and
[`time_point].

[:en] [%@impldef whether values are rounded or truncated to the required
precision when converting between [`time_t] values and [`time_point] objects.]
[:en] It is implementation defined whether values are rounded or truncated to
the required precision.
[exit:description]
