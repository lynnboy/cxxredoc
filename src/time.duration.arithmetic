[section#time.duration.arithmetic
    [:en] [`duration] arithmetic
    [:zh_CN] [`duration] 算术
]

[%@library operator+[!duration]]
[%@library duration[!operator+]]
[codeblock:declaration]
constexpr duration operator+() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator-[!duration]]
[%@library duration[!operator-]]
[codeblock:declaration]
constexpr duration operator-() const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`duration(-rep_);].
[:zh_CN] [`duration(-rep_);]。
[exit:description]

[%@library operator++[!duration]]
[%@library duration[!operator++]]
[codeblock:declaration]
duration& operator++();
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`++rep_].
[:zh_CN] [`++rep_]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator++[!duration]]
[%@library duration[!operator++]]
[codeblock:declaration]
duration operator++(int);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`duration(rep_++);].
[:zh_CN] [`duration(rep_++);]。
[exit:description]

[%@library operator--[!duration]]
[%@library duration[!operator--]]
[codeblock:declaration]
duration& operator--();
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`--rep_].
[:zh_CN] [`--rep_]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator--[!duration]]
[%@library duration[!operator--]]
[codeblock:declaration]
duration operator--(int);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`duration(rep_--);].
[:zh_CN] [`duration(rep_--);]。
[exit:description]

[%@library operator+=[!duration]]
[%@library duration[!operator+=]]
[codeblock:declaration]
duration& operator+=(const duration& d);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`rep_ += d.count()].
[:zh_CN] [`rep_ += d.cound()]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator-=[!duration]]
[%@library duration[!operator-=]]
[codeblock:declaration]
duration& operator-=(const duration& d);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`rep_ -= d.count()].
[:zh_CN] [`rep_ -= d.count()]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator*=[!duration]]
[%@library duration[!operator*=]]
[codeblock:declaration]
duration& operator*=(const rep& rhs);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`rep_ *= rhs].
[:zh_CN] [`rep_ *= rhs]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator/=[!duration]]
[%@library duration[!operator/=]]
[codeblock:declaration]
duration& operator/=(const rep& rhs);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`rep_ /= rhs].
[:zh_CN] [`rep_ /= rhs]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator%=[!duration]]
[%@library duration[!operator%=]]
[codeblock:declaration]
duration& operator%=(const rep& rhs);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`rep_ %= rhs].
[:zh_CN] [`rep_ %= rhs]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]

[%@library operator%=[!duration]]
[%@library duration[!operator%=]]
[codeblock:declaration]
duration& operator%=(const duration& rhs);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`rep_ %= rhs.count()].
[:zh_CN] [`rep_ %= rhs.cound()]。

[para:returns]
[:en] [`*this].
[:zh_CN] [`*this]。
[exit:description]
