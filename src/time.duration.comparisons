[section#time.duration.comparisons
    [:en] [`duration] comparisons
]

[para]
[:en]
In the function descriptions that follow, [`CT] represents [`common_type_t<A,
B>], where [`A] and [`B] are the types of the two arguments to the function.

[%@library operator==[!duration]]
[%@library duration[!operator==]]
[codeblock:declaration]
template <class Rep1, class Period1, class Rep2, class Period2>
  constexpr bool operator==(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`CT(lhs).count() == CT(rhs).count()].
[exit:description]

[%@library operator!=[!duration]]
[%@library duration[!operator!=]]
[codeblock:declaration]
template <class Rep1, class Period1, class Rep2, class Period2>
  constexpr bool operator!=(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!(lhs == rhs)].
[exit:description]

[%@library operator<[!duration]]
[%@library duration[!operator<]]
[codeblock:declaration]
template <class Rep1, class Period1, class Rep2, class Period2>
  constexpr bool operator<(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`CT(lhs).count() < CT(rhs).count()].
[exit:description]

[%@library operator<=[!duration]]
[%@library duration[!operator<=]]
[codeblock:declaration]
template <class Rep1, class Period1, class Rep2, class Period2>
  constexpr bool operator<=(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!(rhs < lhs)].
[exit:description]

[%@library operator>[!idxl]]
[%@library idxl[!operator>]]
[codeblock:declaration]
template <class Rep1, class Period1, class Rep2, class Period2>
  constexpr bool operator>(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`rhs < lhs].
[exit:description]

[%@library operator>=[!duration]]
[%@library duration[!operator>=]]
[codeblock:declaration]
template <class Rep1, class Period1, class Rep2, class Period2>
  constexpr bool operator>=(const duration<Rep1, Period1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`!(lhs < rhs)].
[exit:description]
