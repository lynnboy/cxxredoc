[section#time.point.nonmember
    [:en] [`time_point] non-member arithmetic
]

[%@library operator+[!time_point]]
[%@library time_point[!operator+]]
[%@library operator+[!duration]]
[%@library duration[!operator+]]
[codeblock:declaration]
template <class Clock, class Duration1, class Rep2, class Period2>
  constexpr time_point<Clock, common_type_t<Duration1, duration<Rep2, Period2>>>
  operator+(const time_point<Clock, Duration1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`CT(lhs.time_since_epoch() + rhs)], where [`CT] is the type of the return
value.
[exit:description]

[%@library operator+[!time_point]]
[%@library time_point[!operator+]]
[%@library operator+[!duration]]
[%@library duration[!operator+]]
[codeblock:declaration]
template <class Rep1, class Period1, class Clock, class Duration2>
  constexpr time_point<Clock, common_type_t<duration<Rep1, Period1>, Duration2>>
  operator+(const duration<Rep1, Period1>& lhs, const time_point<Clock, Duration2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`rhs + lhs].
[exit:description]

[%@library operator-[!time_point]]
[%@library time_point[!operator-]]
[%@library operator-[!duration]]
[%@library duration[!operator-]]
[codeblock:declaration]
template <class Clock, class Duration1, class Rep2, class Period2>
  constexpr time_point<Clock, common_type_t<Duration1, duration<Rep2, Period2>>>
  operator-(const time_point<Clock, Duration1>& lhs, const duration<Rep2, Period2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs + (-rhs)].
[exit:description]

[%@library operator-[!time_point]]
[%@library time_point[!operator-]]
[codeblock:declaration]
template <class Clock, class Duration1, class Duration2>
  constexpr common_type_t<Duration1, Duration2>
  operator-(const time_point<Clock, Duration1>& lhs, const time_point<Clock, Duration2>& rhs);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`lhs.time_since_epoch() - rhs.time_since_epoch()].
[exit:description]
