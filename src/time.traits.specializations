[section#time.traits.specializations
    [:en] Specializations of [`common_type]
]

[%@library common_type]
[codeblock:declaration]
template <class Rep1, class Period1, class Rep2, class Period2>
struct common_type<chrono::duration<Rep1, Period1>, chrono::duration<Rep2, Period2>> {
  typedef chrono::duration<common_type_t<Rep1, Rep2>, [=Seebelow]> type;
};
[codeblock:end]

[para]
[:en]
The [`period] of the [`duration] indicated by this specialization of
[`common_type] shall be the greatest common divisor of [`Period1] and
[`Period2].

[enter:note]
[:en]
This can be computed by forming a ratio of the greatest common divisor of
[`Period1::num] and [`Period2::num] and the least common multiple of
[`Period1::den] and [`Period2::den].
[exit:note]

[para]
[enter:note]
[:en]
The [`typedef] name [`type] is a synonym for the [`duration] with the largest
tick [`period] possible where both [`duration] arguments will convert to it
without requiring a division operation.

[:en]
The representation of this type is intended to be able to hold any value
resulting from this conversion with no truncation error, although floating-point
durations may have round-off errors.
[exit:note]

[%@library common_type]
[codeblock:declaration]
template <class Clock, class Duration1, class Duration2>
struct common_type<chrono::time_point<Clock, Duration1>, chrono::time_point<Clock, Duration2>> {
  typedef chrono::time_point<Clock, common_type_t<Duration1, Duration2>> type;
};
[codeblock:end]

[para]
[:en]
The common type of two [`time_point] types is a [`time_point] with the same
clock as the two types and the common type of their two [`duration]s.
