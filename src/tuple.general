[section#tuple.general
    [:en] In general
    [:zh_CN] 综述
]

[para]
[%@library tuple]
[:en]
This subclause describes the tuple library that provides a tuple type as the
class template [`tuple] that can be instantiated with any number of arguments.
[:zh_CN]
本子条款描述的元组库提供类模板 [`tuple] 作为元组类型并可以任意数量的实参对其
实例化。

[:en]
Each template argument specifies the type of an element in the [`tuple].
[:zh_CN]
每个模板实参指定了 [`tuple] 的一个元素的类型。

[:en]
Consequently, tuples are heterogeneous, fixed-size collections of values.
[:zh_CN]
由此可得，元组为异质的、确定大小的值的集合。

[:en]
An instantiation of [`tuple] with two arguments is similar to an instantiation
of [`pair] with the same two arguments.
[:zh_CN]
以两个实参实例化的 [`tuple] 与以相同的两个实参实例化的 [`pair] 相似。

[:en]
See [#pairs].
[:zh_CN]
参见 [#pairs]。

[para:synopsis]
[:en] Header [`<tuple>] synopsis
[:zh_CN] 头文件 [`<tuple>] 纲要

[%@library <tuple>[sortas tuple]]
[codeblock:synopsis [special unspecified VTypes Ctypes] ]
namespace std {
  // [:en] [#tuple.tuple], class template [`tuple]:
  // [|:zh_CN] [#tuple.tuple]，类模板 [`tuple]：
  template <class... Types> class tuple;

  // [:en] [#tuple.creation], tuple creation functions:
  // [|:zh_CN] [#tuple.creation]，tuple 创建函数：
  const unspecified ignore;

  template <class... Types>
    constexpr tuple<VTypes...> make_tuple(Types&&...);
  template <class... Types>
    constexpr tuple<Types&&...> forward_as_tuple(Types&&...) noexcept;

  template<class... Types>
    constexpr tuple<Types&...> tie(Types&...) noexcept;

  template <class... Tuples>
    constexpr tuple<Ctypes...> tuple_cat(Tuples&&...);

  // [:en] [#tuple.helper], tuple helper classes:
  // [|:zh_CN] [#tuple.helper]，tuple 辅助类：
  template <class T> class tuple_size;  // [:en] undefined
                                        // [|:zh_CN] 未定义
  template <class T> class tuple_size<const T>;
  template <class T> class tuple_size<volatile T>;
  template <class T> class tuple_size<const volatile T>;

  template <class... Types> class tuple_size<tuple<Types...> >;

  template <size_t I, class T> class tuple_element;    // [:en] undefined
                                                       // [|:zh_CN] 未定义
  template <size_t I, class T> class tuple_element<I, const T>;
  template <size_t I, class T> class tuple_element<I, volatile T>;
  template <size_t I, class T> class tuple_element<I, const volatile T>;

  template <size_t I, class... Types> class tuple_element<I, tuple<Types...> >;

  template <size_t I, class T>
    using tuple_element_t = typename tuple_element<I, T>::type;

  // [:en] [#tuple.elem], element access:
  // [|:zh_CN] [#tuple.elem]，元素访问：
  template <size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>&
      get(tuple<Types...>&) noexcept;
  template <size_t I, class... Types>
    constexpr tuple_element_t<I, tuple<Types...>>&&
      get(tuple<Types...>&&) noexcept;
  template <size_t I, class... Types>
    constexpr const tuple_element_t<I, tuple<Types...>>&
      get(const tuple<Types...>&) noexcept;
  template <class T, class... Types>
    constexpr T& get(tuple<Types...>& t) noexcept;
  template <class T, class... Types>
    constexpr T&& get(tuple<Types...>&& t) noexcept;
  template <class T, class... Types>
    constexpr const T& get(const tuple<Types...>& t) noexcept;

  // [:en] [#tuple.rel], relational operators:
  // [|:zh_CN] [#tuple.rel]，关系运算符：
  template<class... TTypes, class... UTypes>
    constexpr bool operator==(const tuple<TTypes...>&, const tuple<UTypes...>&);
  template<class... TTypes, class... UTypes>
    constexpr bool operator<(const tuple<TTypes...>&, const tuple<UTypes...>&);
  template<class... TTypes, class... UTypes>
    constexpr bool operator!=(const tuple<TTypes...>&, const tuple<UTypes...>&);
  template<class... TTypes, class... UTypes>
    constexpr bool operator>(const tuple<TTypes...>&, const tuple<UTypes...>&);
  template<class... TTypes, class... UTypes>
    constexpr bool operator<=(const tuple<TTypes...>&, const tuple<UTypes...>&);
  template<class... TTypes, class... UTypes>
    constexpr bool operator>=(const tuple<TTypes...>&, const tuple<UTypes...>&);

  // [:en] [#tuple.traits], allocator-related traits
  // [|:zh_CN] [#tuple.traits]，分配器相关的特征
  template <class... Types, class Alloc>
    struct uses_allocator<tuple<Types...>, Alloc>;

  // [:en] [#tuple.special], specialized algorithms:
  // [|:zh_CN] [#tuple.special]，特化的算法：
  template <class... Types>
    void swap(tuple<Types...>& x, tuple<Types...>& y) noexcept([=Seebelow]);
}
[codeblock:end]
