[section#type.info
    [:en] Class [`type_info]
]

[%@library type_info]
[codeblock:synopsis]
namespace std {
  class type_info {
  public:
    virtual ~type_info();
    bool operator==(const type_info& rhs) const noexcept;
    bool operator!=(const type_info& rhs) const noexcept;
    bool before(const type_info& rhs) const noexcept;
    size_t hash_code() const noexcept;
    const char* name() const noexcept;

    type_info(const type_info& rhs) = delete;            // [:en] cannot be copied
    type_info& operator=(const type_info& rhs) = delete; // [:en] cannot be copied
  };
}
[codeblock:end]

[para]
[:en]
The class [`type_info] describes type information generated by the
implementation.

[:en]
Objects of this class effectively store a pointer to a name for the type, and an
encoded value suitable for comparing two types for equality or collating order.

[:en]
The names, encoding rule, and collating sequence for types are all unspecified
[%unspecified] and may differ between programs.

[%@library operator==[!type_info]]
[codeblock:declaration]
bool operator==(const type_info& rhs) const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en]
Compares the current object with [`rhs].

[para:returns]
[:en]
[`true] if the two values describe the same type.
[exit:description]

[%@library operator!=[type_info]]
[codeblock:declaration]
bool operator!=(const type_info& rhs) const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en]
[`!(*this == rhs)].
[exit:description]

[%@library before[!type_info]]
[codeblock:declaration]
bool before(const type_info& rhs) const noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en]
Compares the current object with [`rhs].

[para:returns]
[:en]
[`true] if [`*this] precedes [`rhs] in the implementation[=']s collation order.
[exit:description]

[%@library hash_code[!type_info]]
[codeblock:declaration]
size_t hash_code() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en]
An unspecified value, except that within a single execution of the program, it
shall return the same value for any two [`type_info] objects which compare
equal.

[para:remark]
[:en]
an implementation should return different values for two [`type_info] objects
which do not compare equal.
[exit:description]

[%@library name[!type_info]]
[codeblock:declaration]
const char* name() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
An [%@impldef return value of [`type_info::name()]] implementation-defined
[em@sc ntbs].

[:en]
[%@library type_info::name[!implementation-defined]]

[para:notes]
[:en]
The message may be a null-terminated multibyte string ([#multibyte.strings]),
suitable for conversion and display as a [`wstring] ([#string.classes],
[#locale.codecvt])
[exit:description]
