[section#unique.ptr.single.ctor
    [:en] [`unique_ptr] constructors
]

[%@library unique_ptr[!unique_ptr]]
[codeblock:declaration]
constexpr unique_ptr() noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`D] shall satisfy the requirements of [`DefaultConstructible] (Table
[#defaultconstructible]), and that construction shall not throw an exception.

[para:effects]
[:en] Constructs a [`unique_ptr] object that owns nothing, value-initializing
the stored pointer and the stored deleter.

[para:postconditions]
[:en] [`get() == nullptr].

[:en] [`get_deleter()] returns a reference to the stored deleter.

[para:notes]
[:en] If this constructor is instantiated with a pointer type or reference type
for the template argument [`D], the program is ill-formed.
[exit:description]

[%@library unique_ptr[!unique_ptr]]
[codeblock:declaration]
explicit unique_ptr(pointer p) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`D] shall satisfy the requirements of [`DefaultConstructible] (Table
[#defaultconstructible]), and that construction shall not throw an exception.

[para:effects]
[:en] Constructs a [`unique_ptr] which owns [`p], initializing the stored
pointer with [`p] and value-initializing the stored deleter.

[para:postconditions]
[:en] [`get() == p].

[:en] [`get_deleter()] returns a reference to the stored deleter.

[para:notes]
[:en] If this constructor is instantiated with a pointer type or reference type
for the template argument [`D], the program is ill-formed.
[exit:description]

[%@library unique_ptr[!unique_ptr]]
[codeblock:declaration]
unique_ptr(pointer p, [=Seebelow] d1) noexcept;
unique_ptr(pointer p, [=Seebelow] d2) noexcept;
[codeblock:end]

[enter:description]
[para]
[:en] The signature of these constructors depends upon whether [`D] is a
reference type.

[:en] If [`D] is non-reference type [`A], then the signatures are:

[codeblock:notation]
unique_ptr(pointer p, const A& d);
unique_ptr(pointer p, A&& d);
[codeblock:end]

[para]
[:en] If [`D] is an lvalue reference type [`A&], then the signatures are:

[codeblock:notation]
unique_ptr(pointer p, A& d);
unique_ptr(pointer p, A&& d);
[codeblock:end]

[para]
[:en] If [`D] is an lvalue reference type [`const A&], then the signatures are:

[codeblock:notation]
unique_ptr(pointer p, const A& d);
unique_ptr(pointer p, const A&& d);
[codeblock:end]

[para:requires]
[list]
[item]
[:en] If [`D] is not an lvalue reference type then

[list]
[item]
[:en] If [`d] is an lvalue or [`const] rvalue then the first constructor of this
pair will be selected.

[:en] [`D] shall satisfy the requirements of [`CopyConstructible] (Table
[#copyconstructible]), and the copy constructor of [`D] shall not throw an
exception.

[:en] This [`unique_ptr] will hold a copy of [`d].

[item]
[:en] Otherwise, [`d] is a non-const rvalue and the second constructor of this
pair will be selected.

[:en] [`D] shall satisfy the requirements of [`MoveConstructible] (Table
[#moveconstructible]), and the move constructor of [`D] shall not throw an
exception.

[:en] This [`unique_ptr] will hold a value move constructed from [`d].
[list:end]

[item]
[:en] Otherwise [`D] is an lvalue reference type.

[:en] [`d] shall be reference-compatible with one of the constructors.

[:en] If [`d] is an rvalue, it will bind to the second constructor of this pair
and the program is ill-formed.

[enter:note]
[:en] The diagnostic could be implemented using a [`static_assert] which assures
that [`D] is not a reference type.
[exit:note]

[:en] Else [`d] is an lvalue and will bind to the first constructor of this
pair.

[:en] The type which [`D] references need not be [`CopyConstructible] nor
[`MoveConstructible].

[:en] This [`unique_ptr] will hold a [`D] which refers to the lvalue [`d].

[enter:note]
[:en] [`D] may not be an rvalue reference type.
[exit:note]
[list:end]

[para:effects]
[:en] Constructs a [`unique_ptr] object which owns [`p], initializing the stored
pointer with [`p] and initializing the deleter as described above.

[para:postconditions]
[:en] [`get() == p].

[:en] [`get_deleter()] returns a reference to the stored deleter.

[:en] If [`D] is a reference type then [`get_deleter()] returns a reference to
the lvalue [`d].

[para:~]
[enter:example]

[codeblock]
D d;
unique_ptr<int, D> p1(new int, D());        // [:en] [`D] must be [`MoveConstructible]
unique_ptr<int, D> p2(new int, d);          // [:en] [`D] must be [`CopyConstructible]
unique_ptr<int, D&> p3(new int, d);         // [:en] [`p3] holds a reference to [`d]
unique_ptr<int, const D&> p4(new int, D()); // [:en] error: rvalue deleter object combined
                                            // [:en@~] with reference deleter type
[codeblock:end]

[exit:example]

[exit:description]

[%@library unique_ptr[!constructor]]
[codeblock:declaration]
unique_ptr(unique_ptr&& u) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] If [`D] is not a reference type, [`D] shall satisfy the requirements of
[`MoveConstructible] (Table [#moveconstructible]).

[:en] Construction of the deleter from an rvalue of type [`D] shall not throw an
exception.

[para:effects]
[:en] Constructs a [`unique_ptr] by transferring ownership from [`u] to
[`*this].

[:en] If [`D] is a reference type, this deleter is copy constructed from
[`u][=']s deleter; otherwise, this deleter is move constructed from [`u][=']s
deleter.

[enter:note]
[:en] The deleter constructor can be implemented with [`std::forward<D>].
[exit:note]

[para:postconditions]
[:en] [`get()] yields the value [`u.get()] yielded before the construction.

[:en] [`get_deleter()] returns a reference to the stored deleter that was
constructed from [`u.get_deleter()].

[:en] If [`D] is a reference type then [`get_deleter()] and [`u.get_deleter()]
both reference the same lvalue deleter.
[exit:description]

[%@library unique_ptr[!constructor]]
[codeblock:declaration]
template <class U, class E> unique_ptr(unique_ptr<U, E>&& u) noexcept;
[codeblock:end]

[enter:description]
[para:requires]
[:en] If [`E] is not a reference type, construction of the deleter from an
rvalue of type [`E] shall be well formed and shall not throw an exception.

[:en] Otherwise, [`E] is a reference type and construction of the deleter from
an lvalue of type [`E] shall be well formed and shall not throw an exception.

[para:remarks]
[:en] This constructor shall not participate in overload resolution unless:

[list]
[item]
[:en] [`unique_ptr<U, E>::pointer] is implicitly convertible to [`pointer],
[item]
[:en] [`U] is not an array type, and
[item]
[:en] either [`D] is a reference type and [`E] is the same type as [`D], or
[`D] is not a reference type and [`E] is implicitly convertible to [`D].
[list:end]

[para:effects]
[:en] Constructs a [`unique_ptr] by transferring ownership from [`u] to
[`*this].

[:en] If [`E] is a reference type, this deleter is copy constructed from
[`u][=']s deleter; otherwise, this deleter is move constructed from [`u][=']s
deleter.

[enter:note]
[:en] The deleter constructor can be implemented with [`std::forward<E>].
[exit:note]

[para:postconditions]
[:en] [`get()] yields the value [`u.get()] yielded before the construction.

[:en] [`get_deleter()] returns a reference to the stored deleter that was
constructed from [`u.get_deleter()].
[exit:description]
