[section#unord.map.modifiers
    [:en] [`unordered_map] modifiers
]

[%@library unordered_map[!insert]]
[%@library insert[!unordered_map]]
[codeblock:declaration]
template <class P>
  pair<iterator, bool> insert(P&& obj);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`return emplace(std::forward<P>(obj))]. 

[para:remarks]
[:en] This signature shall not participate in overload resolution unless
[`std::is_constructible<value_type, P&&>::value] is [`true].
[exit:description]

[%@library unordered_map[!insert]]
[%@library insert[!unordered_map]]
[codeblock:declaration]
template <class P>
  iterator insert(const_iterator hint, P&& obj);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to  [`return emplace_hint(hint, std::forward<P>(obj))].

[para:remarks]
[:en] This signature shall not participate in overload resolution unless
[`std::is_constructible<value_type, P&&>::value] is [`true].
[exit:description]

[%@library try_emplace[!unordered_map]]
[%@library unordered_map[!try_emplace]]
[codeblock:declaration]
template <class... Args> pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);
template <class... Args> pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);
template <class... Args> iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args);
template <class... Args> iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);
[codeblock:end]

[enter:description]
[para:effects]
[:en] If the key [`k] already exists in the map, there is no effect.

[:en] Otherwise, inserts an element into the map.

[:en] In the first and third forms, the element is constructed from the
arguments as [`value_type(k, std::forward<Args>(args)...)].

[:en] In the second and fourth forms, the element is constructed from the
arguments as [`value_type(std::move(k), std::forward<Args>(args)...)].

[:en] In the first two overloads, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.

[:en] The returned [`iterator] points to the element of the map whose key is
equivalent to [`k].

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[exit:description]

[%@library insert_or_assign[!unordered_map]]
[%@library unordered_map[!insert_or_assign]]
[codeblock:declaration]
template <class M> pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);
template <class M> pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);
template <class M> iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);
template <class M> iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);
[codeblock:end]

[enter:description]
[para:effects]
[:en] If the key [`k] does not exist in the map, inserts an element into the
map.

[:en] In the first and third forms, the element is constructed from the
arguments as [`value_type(k, std::forward<Args>(args)...)].

[:en] In the second and fourth forms, the element is constructed from the
arguments as [`value_type(std::move(k), std::forward<Args>(args)...)].

[:en] If the key already exists, [`std::forward<M>(obj)] is assigned to the
[`mapped_type] corresponding to the key.

[:en] In the first two overloads, the [`bool] component of the returned value is
[`true] if and only if the insertion took place.

[:en] The returned [`iterator] points to the element that was inserted or
updated.

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[exit:description]
