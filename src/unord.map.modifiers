[section#unord.map.modifiers
    [:en] [`unordered_map] modifiers
    [:zh_CN] [`unordered_map] 的改动函数
]

[%@library unordered_map[!insert]]
[%@library insert[!unordered_map]]
[codeblock:declaration]
template <class P>
  pair<iterator, bool> insert(P&& obj);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`return emplace(std::forward<P>(obj))].
[:zh_CN] 等价于 [`return emplace(std::forward<P>(obj))]。

[para:remarks]
[:en] This signature shall not participate in overload resolution unless
[`std::is_constructible<value_type, P&&>::value] is [`true].
[:zh_CN] 除非 [`std::is_constructible<value_type, P&&>::value] 为 [`true]，否则
这个签名不能参与重载决议。
[exit:description]

[%@library unordered_map[!insert]]
[%@library insert[!unordered_map]]
[codeblock:declaration]
template <class P>
  iterator insert(const_iterator hint, P&& obj);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Equivalent to [`return emplace_hint(hint, std::forward<P>(obj))].
[:zh_CN] 等价于 [`return emplace_hint(hint, std::forward<P>(obj))]。

[para:remarks]
[:en] This signature shall not participate in overload resolution unless
[`std::is_constructible<value_type, P&&>::value] is [`true].
[:zh_CN] 除非 [`std::is_constructible<value_type, P&&>::value] 为 [`true]，否则
这个签名不能参与重载决议。
[exit:description]

[%@library try_emplace[!unordered_map]]
[%@library unordered_map[!try_emplace]]
[codeblock:declaration]
template <class... Args> pair<iterator, bool> try_emplace(const key_type& k, Args&&... args);
template <class... Args> pair<iterator, bool> try_emplace(key_type&& k, Args&&... args);
template <class... Args> iterator try_emplace(const_iterator hint, const key_type& k, Args&&... args);
template <class... Args> iterator try_emplace(const_iterator hint, key_type&& k, Args&&... args);
[codeblock:end]

[enter:description]
[para:effects]
[:en] If the key [`k] already exists in the map, there is no effect.
[:zh_CN] 如果 [`unordered_map] 中已经存在键 [`k]，则没有效果。

[:en] Otherwise, inserts an element into the map.
[:zh_CN] 否则，向 [`unordered_map] 中插入一个元素。

[:en] In the first and third forms, the element is constructed from the
arguments as [`value_type(k, std::forward<Args>(args)...)].
[:zh_CN] 第一种和第三种形式中，该元素是以其各个形参通过
[`value_type(k, std::forward<Args>(args)...)] 进行构造的。

[:en] In the second and fourth forms, the element is constructed from the
arguments as [`value_type(std::move(k), std::forward<Args>(args)...)].
[:zh_CN] 第二种和第四种形式中，该元素是以其各个形参通过
[`value_type(std::move(k), std::forward<Args>(args)...)] 进行构造的。

[:en] In the first two overloads, the [`bool] component of the returned pair is
[`true] if and only if the insertion took place.
[:zh_CN] 前两个重载中，当且仅当发生了插入，其返回的 [`pair] 的 [`bool] 成分为
[`true]。

[:en] The returned [`iterator] points to the element of the map whose key is
equivalent to [`k].
[:zh_CN] 返回的 [`iterator] 指向具有等价于 [`k] 的键的元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[exit:description]

[%@library insert_or_assign[!unordered_map]]
[%@library unordered_map[!insert_or_assign]]
[codeblock:declaration]
template <class M> pair<iterator, bool> insert_or_assign(const key_type& k, M&& obj);
template <class M> pair<iterator, bool> insert_or_assign(key_type&& k, M&& obj);
template <class M> iterator insert_or_assign(const_iterator hint, const key_type& k, M&& obj);
template <class M> iterator insert_or_assign(const_iterator hint, key_type&& k, M&& obj);
[codeblock:end]

[enter:description]
[para:effects]
[:en] If the key [`k] does not exist in the map, inserts an element into the
map.
[:zh_CN] 如果 [`unordered_map] 中不存在键 [`k]，则向 [`unordered_map] 中插入一个
元素。

[:en] In the first and third forms, the element is constructed from the
arguments as [`value_type(k, std::forward<Args>(args)...)].
[:zh_CN] 第一种和第三种形式中，该元素是以其各个形参通过
[`value_type(k, std::forward<Args>(args)...)] 进行构造的。

[:en] In the second and fourth forms, the element is constructed from the
arguments as [`value_type(std::move(k), std::forward<Args>(args)...)].
[:zh_CN] 第二种和第四种形式中，该元素是以其各个形参通过
[`value_type(std::move(k), std::forward<Args>(args)...)] 进行构造的。

[:en] If the key already exists, [`std::forward<M>(obj)] is assigned to the
[`mapped_type] corresponding to the key.
[:zh_CN] 如果这个键已经存在，则以 [`std::forward<M>(obj)] 向对应于该键的
[`mapped_type] 进行赋值。

[:en] In the first two overloads, the [`bool] component of the returned value is
[`true] if and only if the insertion took place.
[:zh_CN] 前两个重载中，当且仅当发生了插入，其返回值的 [`bool] 成分为 [`true]。

[:en] The returned [`iterator] points to the element that was inserted or
updated.
[:zh_CN] 返回的 [`iterator] 指向被插入或者被更新的元素。

[para:complexity]
[:en] The same as [`emplace] and [`emplace_hint], respectively.
[:zh_CN] 分别与 [`emplace] 和 [`emplace_hint] 相同。
[exit:description]
