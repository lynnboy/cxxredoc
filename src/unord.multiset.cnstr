[section#unord.multiset.cnstr
    [:en] [`unordered_multiset] constructors
]

[%@library unordered_multiset[!unordered_multiset]]
[codeblock:declaration]
unordered_multiset() : unordered_multiset(size_type([=Seebelow])) { }
explicit unordered_multiset(size_type n,
                            const hasher& hf = hasher(),
                            const key_equal& eql = key_equal(),
                            const allocator_type& a = allocator_type());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an empty [`unordered_multiset] using the specified hash
function, key equality function, and allocator, and using at least [`n] buckets.

[:en] For the default constructor, the number of buckets is [%@impldef default
number of buckets in [`unordered_multiset]] implementation-defined.

[:en] [`max_load_factor()] returns 1.0.

[para:complexity]
[:en] Constant.
[exit:description]

[%@library unordered_multiset[!unordered_multiset]]
[codeblock:declaration]
template <class InputIterator>
  unordered_multiset(InputIterator f, InputIterator l,
                     size_type n = [=Seebelow],
                     const hasher& hf = hasher(),
                     const key_equal& eql = key_equal(),
                     const allocator_type& a = allocator_type());
unordered_multiset(initializer_list<value_type> il,
                   size_type n = [=Seebelow],
                   const hasher& hf = hasher(),
                   const key_equal& eql = key_equal(),
                   const allocator_type& a = allocator_type());
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an empty [`unordered_multiset] using the specified hash
function, key equality function, and allocator, and using at least [`n] buckets.

[:en] If [`n] is not provided, the number of buckets is [%@impldef default
number of buckets in [`unordered_multiset]] implementation-defined.

[:en] Then inserts elements from the range [=range[f,l)] for the first form, or
from the range [=range[il.begin(),il.end())] for the second form.

[:en] [`max_load_factor()] returns 1.0.

[para:complexity]
[:en] Average case linear, worst case quadratic.
[exit:description]
