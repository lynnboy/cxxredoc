[section#util.smartptr.shared
    [:en] Class template [`shared_ptr]
    [:zh_CN] 类模板 [`shared_ptr]
]

[para]
[%@library shared_ptr]
[:en]
The [`shared_ptr] class template stores a pointer, usually obtained via [`new].
[:zh_CN]
[`shared_ptr] 类模板存储一个通常由 [`new] 所得到的指针。

[:en]
[`shared_ptr] implements semantics of shared ownership; the last remaining owner
of the pointer is responsible for destroying the object, or otherwise releasing
the resources associated with the stored pointer.
[:zh_CN]
[`shared_ptr] 实现共享所有权语义；其指针的最后剩下来的拥有者负有销毁对象，或者
释放与存储的指针关联的资源的责任。

[:en]
A [`shared_ptr] object is [+empty] if it does not own a pointer.
[:zh_CN]
若 [`shared_ptr] 并未拥有某个指针，则其为[+空]。

[codeblock:synopsis]
namespace std {
  template<class T> class shared_ptr {
  public:
    typedef T element_type;

    // [:en] [#util.smartptr.shared.const], constructors:
    // [|:zh_CN]  [#util.smartptr.shared.const]，构造函数：
    constexpr shared_ptr() noexcept;
    template<class Y> explicit shared_ptr(Y* p);
    template<class Y, class D> shared_ptr(Y* p, D d);
    template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
    template <class D> shared_ptr(nullptr_t p, D d);
    template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
    template<class Y> shared_ptr(const shared_ptr<Y>& r, T* p) noexcept;
    shared_ptr(const shared_ptr& r) noexcept;
    template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
    shared_ptr(shared_ptr&& r) noexcept;
    template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
    template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
    template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
    constexpr shared_ptr(nullptr_t) noexcept : shared_ptr() { }

    // [:en] [#util.smartptr.shared.dest], destructor:
    // [|:zh_CN] [#util.smartptr.shared.dest]，析构函数：
    ~shared_ptr();

    // [:en] [#util.smartptr.shared.assign], assignment:
    // [|:zh_CN] [#util.smartptr.shared.assign]，赋值：
    shared_ptr& operator=(const shared_ptr& r) noexcept;
    template<class Y> shared_ptr& operator=(const shared_ptr<Y>& r) noexcept;
    shared_ptr& operator=(shared_ptr&& r) noexcept;
    template<class Y> shared_ptr& operator=(shared_ptr<Y>&& r) noexcept;
    template <class Y, class D> shared_ptr& operator=(unique_ptr<Y, D>&& r);

    // [:en] [#util.smartptr.shared.mod], modifiers:
    // [|:zh_CN] [#util.smartptr.shared.mod]，改动函数：
    void swap(shared_ptr& r) noexcept;
    void reset() noexcept;
    template<class Y> void reset(Y* p);
    template<class Y, class D> void reset(Y* p, D d);
    template<class Y, class D, class A> void reset(Y* p, D d, A a);

    // [:en] [#util.smartptr.shared.obs], observers:
    // [|:zh_CN] [#util.smartptr.shared.obs]，探察函数：
    T* get() const noexcept;
    T& operator*() const noexcept;
    T* operator->() const noexcept;
    long use_count() const noexcept;
    bool unique() const noexcept;
    explicit operator bool() const noexcept;
    template<class U> bool owner_before(shared_ptr<U> const& b) const;
    template<class U> bool owner_before(weak_ptr<U> const& b) const;
  };

  // [:en] [#util.smartptr.shared.create], shared_ptr creation
  // [|:zh_CN] [#util.smartptr.shared.create]，shared_ptr 的创建
  template<class T, class... Args> shared_ptr<T> make_shared(Args&&... args);
  template<class T, class A, class... Args>
    shared_ptr<T> allocate_shared(const A& a, Args&&... args);

  // [:en] [#util.smartptr.shared.cmp], shared_ptr comparisons:
  // [|:zh_CN] [#util.smartptr.shared.cmp]，shared_ptr 的比较：
  template<class T, class U>
    bool operator==(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator!=(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator<(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator>(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator<=(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;
  template<class T, class U>
    bool operator>=(const shared_ptr<T>& a, const shared_ptr<U>& b) noexcept;

  template <class T>
    bool operator==(const shared_ptr<T>& a, nullptr_t) noexcept;
  template <class T>
    bool operator==(nullptr_t, const shared_ptr<T>& b) noexcept;
  template <class T>
    bool operator!=(const shared_ptr<T>& a, nullptr_t) noexcept;
  template <class T>
    bool operator!=(nullptr_t, const shared_ptr<T>& b) noexcept;
  template <class T>
    bool operator<(const shared_ptr<T>& a, nullptr_t) noexcept;
  template <class T>
    bool operator<(nullptr_t, const shared_ptr<T>& b) noexcept;
  template <class T>
    bool operator<=(const shared_ptr<T>& a, nullptr_t) noexcept;
  template <class T>
    bool operator<=(nullptr_t, const shared_ptr<T>& b) noexcept;
  template <class T>
    bool operator>(const shared_ptr<T>& a, nullptr_t) noexcept;
  template <class T>
    bool operator>(nullptr_t, const shared_ptr<T>& b) noexcept;
  template <class T>
    bool operator>=(const shared_ptr<T>& a, nullptr_t) noexcept;
  template <class T>
    bool operator>=(nullptr_t, const shared_ptr<T>& b) noexcept;

  // [:en] [#util.smartptr.shared.spec], shared_ptr specialized algorithms:
  // [|:zh_CN] [#util.smartptr.shared.spec]，shared_ptr 的特化算法：
  template<class T> void swap(shared_ptr<T>& a, shared_ptr<T>& b) noexcept;

  // [:en] [#util.smartptr.shared.cast], shared_ptr casts:
  // [|:zh_CN] [#util.smartptr.shared.cast]，shared_ptr 的强制转换：
  template<class T, class U>
    shared_ptr<T> static_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
    shared_ptr<T> dynamic_pointer_cast(const shared_ptr<U>& r) noexcept;
  template<class T, class U>
    shared_ptr<T> const_pointer_cast(const shared_ptr<U>& r) noexcept;

  // [:en] [#util.smartptr.getdeleter], shared_ptr get_deleter:
  // [|:zh_CN] [#util.smartptr.getdeleter]，shared_ptr 的 get_deleter：
  template<class D, class T> D* get_deleter(const shared_ptr<T>& p) noexcept;

  // [:en] [#util.smartptr.shared.io], shared_ptr I/O:
  // [|:zh_CN] [#util.smartptr.shared.io]，shared_ptr 的 I/O：
  template<class E, class T, class Y>
    basic_ostream<E, T>& operator<< (basic_ostream<E, T>& os, const shared_ptr<Y>& p);
} // namespace std
[codeblock:end]

[para]
[:en]
Specializations of [`shared_ptr] shall be [`CopyConstructible],
[`CopyAssignable], and [`LessThanComparable], allowing their use in standard
containers.
[:zh_CN]
[`shared_ptr] 的特例应当为 [`CopyConstructible]，[`CopyAssignable]，以及
[`LessThanComparable]，允许它们被用在标准容器之中。

[:en]
Specializations of [`shared_ptr] shall be convertible to [`bool], allowing their
use in boolean expressions and declarations in conditions.
[:zh_CN]
[`shared_ptr] 的特例应当可以转换为 [`bool]，允许它们被用作条件中的表达式或声明式
。

[:en]
The template parameter [`T] of [`shared_ptr] may be an incomplete type.
[:zh_CN]
[`shared_ptr] 的模板形参 [`T] 可以是不完整类型。

[para]
[enter:example]
[codeblock]
if(shared_ptr<X> px = dynamic_pointer_cast<X>(py)) {
  // [:en] do something with [`px]
  // [|:zh_CN] 对 [`px] 进行某些操作
}
[codeblock:end]
[exit:example]

[para]
[:en]
For purposes of determining the presence of a data race, member functions shall
access and modify only the [`shared_ptr] and [`weak_ptr] objects themselves and
not objects they refer to.
[:zh_CN]
为确定数据竞争的存在性，成员函数应当仅访问并修改 [`shared_ptr] 和 [`weak_ptr]
对象自身，而不是它们所指代的对象。

[:en]
Changes in [`use_count()] do not reflect modifications that can introduce data
races.
[:zh_CN]
[`use_count()] 的改变并不会反映可能造成数据竞争的修改。

[include util.smartptr.shared.const]

[include util.smartptr.shared.dest]

[include util.smartptr.shared.assign]

[include util.smartptr.shared.mod]

[include util.smartptr.shared.obs]

[include util.smartptr.shared.create]

[include util.smartptr.shared.cmp]

[include util.smartptr.shared.spec]

[include util.smartptr.shared.cast]

[include util.smartptr.getdeleter]

[include util.smartptr.shared.io]
