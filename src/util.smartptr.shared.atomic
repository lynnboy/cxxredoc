[section#util.smartptr.shared.atomic
    [:en] [`shared_ptr] atomic access
]

[para]
[:en]
Concurrent access to a [`shared_ptr] object from multiple threads does not
introduce a data race if the access is done exclusively via the functions in
this section and the instance is passed as their first argument.

[para]
[:en]
The meaning of the arguments of type [`memory_order] is explained in
[#atomics.order].

[%@library atomic_is_lock_free[!shared_ptr]]
[%@library shared_ptr[!atomic_is_lock_free]]
[codeblock:declaration]
template<class T>
  bool atomic_is_lock_free(const shared_ptr<T>* p);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be null.

[para:returns]
[:en] [`true] if atomic access to [`*p] is lock-free, [`false] otherwise.

[para:throws]
[:en] Nothing.
[exit:description]

[%@library atomic_load[!shared_ptr]]
[%@library shared_ptr[!atomic_load]]
[codeblock:declaration]
template<class T>
  shared_ptr<T> atomic_load(const shared_ptr<T>* p);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be null.

[para:returns]
[:en] [`atomic_load_explicit(p, memory_order_seq_cst)].

[para:throws]
[:en] Nothing.
[exit:description]

[%@library atomic_load_explicit[!shared_ptr]]
[%@library shared_ptr[!atomic_load_explicit]]
[codeblock:declaration]
template<class T>
  shared_ptr<T> atomic_load_explicit(const shared_ptr<T>* p, memory_order mo);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be null.

[para:requires]
[:en] [`mo] shall not be [`memory_order_release] or [`memory_order_acq_rel].

[para:returns]
[:en] [`*p].

[para:throws]
[:en] Nothing.
[exit:description]

[%@library atomic_store[!shared_ptr]]
[%@library shared_ptr[!atomic_store]]
[codeblock:declaration]
template<class T>
  void atomic_store(shared_ptr<T>* p, shared_ptr<T> r);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be null.

[para:effects]
[:en] [`atomic_store_explicit(p, r, memory_order_seq_cst)].

[para:throws]
[:en] Nothing.
[exit:description]

[%@library atomic_store_explicit[!shared_ptr]]
[%@library shared_ptr[!atomic_store_explicit]]
[codeblock:declaration]
template<class T>
  void atomic_store_explicit(shared_ptr<T>* p, shared_ptr<T> r, memory_order mo);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be null.

[para:requires]
[:en] [`mo] shall not be [`memory_order_acquire] or [`memory_order_acq_rel].

[para:effects]
[:en] [`p->swap(r)].

[para:throws]
[:en] Nothing.
[exit:description]

[%@library atomic_exchange[!shared_ptr]]
[%@library shared_ptr[!atomic_exchange]]
[codeblock:declaration]
template<class T>
  shared_ptr<T> atomic_exchange(shared_ptr<T>* p, shared_ptr<T> r);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be null.

[para:returns]
[:en] [`atomic_exchange_explicit(p, r, memory_order_seq_cst)].

[para:throws]
[:en] Nothing.
[exit:description]

[%@library atomic_exchange_explicit[!shared_ptr]]
[%@library shared_ptr[!atomic_exchange_explicit]]
[codeblock:declaration]
template<class T>
  shared_ptr<T> atomic_exchange_explicit(shared_ptr<T>* p, shared_ptr<T> r,
                                         memory_order mo);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be null.

[para:effects]
[:en] [`p->swap(r)].

[para:returns]
[:en] The previous value of [`*p].

[para:throws]
[:en] Nothing.
[exit:description]

[%@library atomic_compare_exchange_weak[!shared_ptr]]
[%@library shared_ptr[!atomic_compare_exchange_weak]]
[codeblock:declaration]
template<class T>
  bool atomic_compare_exchange_weak(
    shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be null and [`v] shall not be null.

[para:returns]
[:en] [`atomic_compare_exchange_weak_explicit(p, v, w, memory_order_seq_cst,
memory_order_seq_cst)].

[para:throws] Nothing.
[exit:description]

[%@library atomic_compare_exchange_strong[!shared_ptr]]
[%@library shared_ptr[!atomic_compare_exchange_strong]]
[codeblock:declaration]
template<class T>
  bool atomic_compare_exchange_strong(
    shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w);
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`atomic_compare_exchange_strong_explicit(p, v, w, memory_order_seq_cst,
memory_order_seq_cst)].
[exit:description]

[%@library atomic_compare_exchange_weak_explicit[!shared_ptr]]
[%@library shared_ptr[!atomic_compare_exchange_weak_explicit]]
[%@library atomic_compare_exchange_strong_explicit[!shared_ptr]]
[%@library shared_ptr[!atomic_compare_exchange_strong_explicit]]
[codeblock:declaration]
template<class T>
  bool atomic_compare_exchange_weak_explicit(
    shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w,
    memory_order success, memory_order failure);
template<class T>
  bool atomic_compare_exchange_strong_explicit(
    shared_ptr<T>* p, shared_ptr<T>* v, shared_ptr<T> w,
    memory_order success, memory_order failure);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall not be null and [`v] shall not be null.

[para:requires]
[:en] [`failure] shall not be [`memory_order_release], [`memory_order_acq_rel],
or stronger than [`success].

[para:effects]
[:en] If [`*p] is equivalent to [`*v], assigns [`w] to
[`*p] and has synchronization semantics corresponding to the value of
[`success], otherwise assigns [`*p] to [`*v] and has
synchronization semantics corresponding to the value of [`failure].

[para:returns]
[:en] [`true] if [`*p] was equivalent to [`*v], [`false] otherwise.

[para:throws]
[:en] Nothing.

[para:remarks]
[:en] two [`shared_ptr] objects are equivalent if they store the same
pointer value and share ownership.

[para:remarks]
[:en] the weak forms may fail spuriously.

[:en] See [#atomics.types.operations].
[exit:description]
