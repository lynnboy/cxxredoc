[section#util.smartptr.shared.const
    [:en] [`shared_ptr] constructors
    [:zh_CN] [`shared_ptr] 的构造函数
]

[%@library shared_ptr[!shared_ptr]]
[codeblock:declaration]
constexpr shared_ptr() noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an [+empty] [`shared_ptr] object.
[:zh_CN] 构造一个[+空]的 [`shared_ptr] 对象。

[para:postconditions]
[:en] [`use_count() == 0 && get() == nullptr].
[:zh_CN] [`use_count() == 0 && get() == nullptr]。
[exit:description]

[%@library shared_ptr[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Y> explicit shared_ptr(Y* p);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall be convertible to [`T*].
[:zh_CN] [`p] 应当可以转换为 [`T*]。

[:en] [`Y] shall be a complete type.
[:zh_CN] [`Y] 应当为完整类型。

[:en] The expression [`delete p] shall be well formed, shall have well defined
behavior, and shall not throw exceptions.
[:zh_CN] 表达式 [`delete p] 应当是良构的，应当具有良构的行为，且不能抛出异常。

[para:effects]
[:en] Constructs a [`shared_ptr] object that [+owns] the pointer [`p].
[:zh_CN] 构造一个[+拥有]指针 [`p] 的 [`shared_ptr] 对象。

[para:postconditions]
[:en] [`use_count() == 1 && get() == p].
[:zh_CN] [`use_count() == 1 && get() == p]。

[para:throws]
[:en] [`bad_alloc], or an [%@impldef exception type when [`shared_ptr]
constructor fails] implementation-defined exception when a resource other than
memory could not be obtained.
[:zh_CN] [`bad_alloc]，或者当无法获得内存之外的资源时抛出某个 [%@impldef 当
[`shared_ptr] 的构造函数失败时抛出的异常类型] 由实现定义的异常。

[para:exceptionsafety]
[:en] If an exception is thrown, [`delete p] is called.
[:zh_CN] 当抛出异常时，将调用 [`delete p]。
[exit:description]

[%@library shared_ptr[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Y, class D> shared_ptr(Y* p, D d);
template<class Y, class D, class A> shared_ptr(Y* p, D d, A a);
template <class D> shared_ptr(nullptr_t p, D d);
template <class D, class A> shared_ptr(nullptr_t p, D d, A a);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`p] shall be convertible to [`T*].
[:zh_CN] [`p] 应当可以转换为 [`T*]。

[:en] [`D] shall be [`CopyConstructible].
[:zh_CN] [`D] 应当为 [`CopyConstructible]。

[:en] The copy constructor and destructor of [`D] shall not throw exceptions.
[:zh_CN] [`D] 的复制构造函数和析构函数不能抛出异常。

[:en] The expression [`d(p)] shall be well formed, shall have well defined
behavior, and shall not throw exceptions.
[:zh_CN] 表达式 [`d(p)] 应当是良构的，应当具有良构的行为，且不能抛出异常。

[:en] [`A] shall be an allocator ([#allocator.requirements]).
[:zh_CN] [`A] 应当为分配器（[#allocator.requirements]）。

[:en] The copy constructor and destructor of [`A] shall not throw exceptions.
[:zh_CN] [`A] 的复制构造函数和析构函数不能抛出异常。

[para:effects]
[:en] Constructs a [`shared_ptr] object that [+owns] the object [`p] and the
deleter [`d].
[:zh_CN] 构造一个[+拥有]对象 [`p] 和删除器 [`d] 的 [`shared_ptr] 对象。

[:en] The second and fourth constructors shall use a copy of [`a] to allocate
memory for internal use.
[:zh_CN] 第二个和第四个构造函数应当使用 [`a] 的副本来为其内部使用进行内存分配。

[para:postconditions]
[:en] [`use_count() == 1 && get() == p].
[:zh_CN] [`use_count() == 1 && get() == p]。

[para:throws]
[:en] [`bad_alloc], or an [%@impldef exception type when [`shared_ptr]
constructor fails] implementation-defined exception when a resource other than
memory could not be obtained.
[:zh_CN] [`bad_alloc]，或者当无法获得内存之外的资源时抛出某个 [%@impldef 当
[`shared_ptr] 的构造函数失败时抛出的异常类型] 由实现定义的异常。

[para:exceptionsafety]
[:en] If an exception is thrown, [`d(p)] is called.
[:zh_CN] 当抛出异常时，将调用 [`d(p)]。
[exit:description]

[%@library shared_ptr[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
template<class Y> shared_ptr(const shared_ptr<Y>& r, T* p) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs a [`shared_ptr] instance that stores [`p] and [+shares
ownership] with [`r].
[:zh_CN] 构造一个存储了 [`p] 并且与 [`r] [+共享所有权]的 [`shared_ptr] 的实例。

[para:postconditions]
[`get() == p && use_count() == r.use_count()]

[para]
[enter:note]
[:en] To avoid the possibility of a dangling pointer, the user of this
constructor must ensure that [`p] remains valid at least until the ownership
group of [`r] is destroyed.
[:zh_CN] 为避免可能的悬挂指针，这个构造函数的用户必须保证 [`p] 持续有效，至少
维持到 [`r] 的所有权组被销毁之时。
[exit:note]

[para]
[enter:note]
[:en] This constructor allows creation of an [+empty] [`shared_ptr] instance
with a non-null stored pointer.
[:zh_CN] 这个构造函数允许创建带有非空的存储指针的[+空] [`shared_ptr] 实例。
[exit:note]
[exit:description]

[%@library shared_ptr[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
shared_ptr(const shared_ptr& r) noexcept;
template<class Y> shared_ptr(const shared_ptr<Y>& r) noexcept;
[codeblock:end]

[enter:description]
[para:remark]
[:en] The second constructor shall not participate in overload resolution unless
[`Y*] is implicitly convertible to [`T*].
[:zh_CN] 除非 [`Y*] 可以隐式转换为 [`T*]，否则第二个构造函数不能参与重载决议。

[para:effects]
[:en] If [`r] is [+empty], constructs an [+empty] [`shared_ptr] object;
otherwise, constructs a [`shared_ptr] object that [+shares ownership] with [`r].
[:zh_CN] 若 [`r] 为[+空]，则构造一个[+空] [`shared_ptr] 对象；否则，构造一个与
[`r] [+共享所有权]的 [`shared_ptr] 对象。

[para:postconditions]
[:en] [`get() == r.get() && use_count() == r.use_count()].
[:zh_CN] [`get() == r.get() && use_count() == r.use_count()]。
[exit:description]

[%@library shared_ptr[![:en]constructor[:zh_CN]构造函数]]
[codeblock:declaration]
shared_ptr(shared_ptr&& r) noexcept;
template<class Y> shared_ptr(shared_ptr<Y>&& r) noexcept;
[codeblock:end]

[enter:description]
[para:remark]
[:en] The second constructor shall not participate in overload resolution unless
[`Y*] is convertible to [`T*].
[:zh_CN] 除非 [`Y*] 可以转换为 [`T*]，否则第二个构造函数不能参与重载决议。

[para:effects]
[:en] Move-constructs a [`shared_ptr] instance from [`r].
[:zh_CN] 以 [`r] 移动构造一个 [`shared_ptr] 实例。

[para:postconditions]
[:en] [`*this] shall contain the old value of [`r].
[:zh_CN] [`*this] 应当包含 [`r] 的原值。

[:en] [`r] shall be [+empty].
[:zh_CN] [`r] 应当为[+空]。

[:en] [`r.get() == nullptr].
[:zh_CN] [`r.get() == nullptr]。
[exit:description]

[%@library shared_ptr[![:en]constructor[:zh_CN]构造函数]]
[%@library weak_ptr]
[codeblock:declaration]
template<class Y> explicit shared_ptr(const weak_ptr<Y>& r);
[codeblock:end]

[enter:description]
[para:requires]
[:en] [`Y*] shall be convertible to [`T*].
[:zh_CN] [`Y*] 应当可以转换为 [`T*]。

[para:effects]
[:en] Constructs a [`shared_ptr] object that [+shares ownership] with [`r] and
stores a copy of the pointer stored in [`r].
[:zh_CN] 构造一个与 [`r] [+共享所有权]的 [`shared_ptr] 对象，并保存 [`r] 所保存
的指针的副本。

[para:postconditions]
[:en] [`use_count() == r.use_count()].
[:zh_CN] [`use_count() == r.use_count()]。

[para:throws]
[:en] [`bad_weak_ptr] when [`r.expired()].
[:zh_CN] 当 [`r.expired()] 时抛出 [`bad_weak_ptr]。

[para:exceptionsafety]
[:en] If an exception is thrown, the constructor has no effect.
[:zh_CN] 如果抛出了异常，则该构造函数没有效果。
[exit:description]

[%@library shared_ptr[![:en]constructor[:zh_CN]构造函数]]
[%@library unique_ptr]
[codeblock:declaration]
template <class Y, class D> shared_ptr(unique_ptr<Y, D>&& r);
[codeblock:end]

[enter:description]
[para:remark]
[:en] This constructor shall not participate in overload resolution unless
[`unique_ptr<Y, D>::pointer] is convertible to [`T*].
[:zh_CN] 除非 [`unique_ptr<Y, D>::pointer] 可以转换为 [`T*]，否则这个构造函数
不能成员重载决议。

[para:effects]
[:en] Equivalent to [`shared_ptr(r.release(), r.get_deleter())] when [`D] is not
a reference type, otherwise [`shared_ptr(r.release(), ref(r.get_deleter()))].
[:zh_CN] 当 [`D] 不是引用类型时等价于 [`shared_ptr(r.release(),
r.get_deleter())]，否则为 [`shared_ptr(r.release(), ref(r.get_deleter()))]。

[para:exceptionsafety]
[:en] If an exception is thrown, the constructor has no effect.
[:zh_CN] 如果抛出了异常，则该构造函数没有效果。
[exit:description]
