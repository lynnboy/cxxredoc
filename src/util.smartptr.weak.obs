[section#util.smartptr.weak.obs
    [:en] [`weak_ptr] observers
]

[%@library weak_ptr[!use_count]]
[%@library use_count[!weak_ptr]]
[codeblock:declaration]
long use_count() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`0] if [`*this] is [+empty]; otherwise, the number of [`shared_ptr]
instances that [+share ownership] with [`*this].

[para]
[enter:note]
[:en] [`use_count()] is not necessarily efficient.
[exit:note]
[exit:description]

[%@library weak_ptr[!expired]]
[%@library expired[!weak_ptr]]
[codeblock:declaration]
bool expired() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`use_count() == 0].

[para]
[enter:note]
[:en] [`expired()] may be faster than [`use_count()].
[exit:note]
[exit:description]

[%@library weak_ptr[!lock]]
[%@library lock[!weak_ptr]]
[codeblock:declaration]
shared_ptr<T> lock() const noexcept;
[codeblock:end]

[enter:description]
[para:returns]
[:en] [`expired() ? shared_ptr<T>() : shared_ptr<T>(*this)], executed
atomically.
[exit:description]

[%@library owner_before[!shared_ptr]]
[%@library shared_ptr[!owner_before]]
[codeblock:declaration]
template<class U> bool owner_before(shared_ptr<U> const& b) const;
template<class U> bool owner_before(weak_ptr<U> const& b) const;
[codeblock:end]

[enter:description]
[para:returns]
[:en] An unspecified value such that

[list]
[item]
[:en] [`x.owner_before(y)] defines a strict weak ordering as defined in
[#alg.sorting];

[item]
[:en] under the equivalence relation defined by [`owner_before],
[`!a.owner_before(b) && !b.owner_before(a)], two [`shared_ptr] or [`weak_ptr]
instances are equivalent if and only if they share ownership or are both empty.
[list:end]
[exit:description]
