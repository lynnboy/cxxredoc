[section#valarray.assign
    [:en] [`valarray] assignment
]

[%@library operator=[!valarray]]
[codeblock:declaration]
valarray& operator=(const valarray& v);
[codeblock:end]

[enter:description]
[para]
[:en] Each element of the [`*this] array is assigned the value of the
corresponding element of the argument array.

[:en] If the length of [`v] is not equal to the length of [`*this], resizes
[`*this] to make the two arrays the same length, as if by calling
[`resize(v.size())], before performing the assignment.

[para:postcondition]
[:en] [`size() == v.size()].
[exit:description]

[%@library operator=[!valarray]]
[codeblock:declaration]
valarray& operator=(valarray&& v) noexcept;
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`*this] obtains the value of [`v].

[:en] The value of [`v] after the assignment is not specified.

[para:complexity]
[:en] Linear.
[exit:description]

[%@library operator=[!valarray]]
[%@library valarray[!operator=]]
[codeblock:declaration]
valarray& operator=(initializer_list<T> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] [`*this = valarray(il)].

[para:returns]
[:en] [`*this].
[exit:description]

[%@library operator=[!valarray]]
[codeblock:declaration]
valarray& operator=(const T&);
[codeblock:end]

[enter:description]
[para]
[:en] The scalar assignment operator causes each element of the [`*this] array
to be assigned the value of the argument.
[exit:description]

[%@library operator=[!valarray]]
[%@library valarray[!operator=]]
[codeblock:declaration]
valarray& operator=(const slice_array<T>&);
valarray& operator=(const gslice_array<T>&);
valarray& operator=(const mask_array<T>&);
valarray& operator=(const indirect_array<T>&);
[codeblock:end]

[enter:description]
[para:requires]
[:en] The length of the array to which the argument refers equals [`size()].

[para]
[:en] These operators allow the results of a generalized subscripting operation
to be assigned directly to a [`valarray].

[para]
[:en] If the value of an element in the left-hand side of a valarray assignment
operator depends on the value of another element in that left-hand side, the
resulting behavior is undefined.
[exit:description]
