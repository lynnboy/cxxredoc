[section#valarray.comparison
    [:en] [`valarray] logical operators
]

[%@library operator==[!valarray]]
[%@library operator!=[!valarray]]
[%@library operator<[!valarray]]
[%@library operator>[!valarray]]
[%@library operator<=[!valarray]]
[%@library operator>=[!valarray]]
[%@library operator&&[!valarray]]
[%@library operator||[!valarray]]
[codeblock:declaration]
template<class T> valarray<bool> operator==
    (const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator!=
    (const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator<
    (const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator>
    (const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator<=
    (const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator>=
    (const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator&&
    (const valarray<T>&, const valarray<T>&);
template<class T> valarray<bool> operator||
    (const valarray<T>&, const valarray<T>&);
[codeblock:end]

[enter:description]
[para]
[:en] Each of these operators may only be instantiated for a type [`T] to which
the indicated operator can be applied and for which the indicated operator
returns a value which is of type [`bool] or which can be unambiguously
implicitly converted to type [`bool].

[para]
[:en] Each of these operators returns a [`bool] array whose length is equal to
the length of the array arguments.

[:en] Each element of the returned array is initialized with the result of
applying the indicated operator to the corresponding elements of the argument
arrays.

[para]
[:en] If the two array arguments do not have the same length, the behavior is
[%undefined] undefined.
[exit:description]

[%@library operator==[!valarray]]
[%@library valarray[!operator==]]
[%@library operator!=[!valarray]]
[%@library valarray[!operator!=]]
[%@library operator<[!valarray]]
[%@library valarray[!operator<]]
[%@library operator<=[!valarray]]
[%@library valarray[!operator<=]]
[%@library operator>[!valarray]]
[%@library valarray[!operator>]]
[%@library operator>=[!valarray]]
[%@library valarray[!operator>=]]
[%@library operator&&[!valarray]]
[%@library valarray[!operator&&]]
[%@library operator||[!valarray]]
[%@library valarray[!operator||]]
[codeblock:declaration]
template<class T> valarray<bool> operator==(const valarray<T>&, const T&);
template<class T> valarray<bool> operator==(const T&, const valarray<T>&);
template<class T> valarray<bool> operator!=(const valarray<T>&, const T&);
template<class T> valarray<bool> operator!=(const T&, const valarray<T>&);
template<class T> valarray<bool> operator< (const valarray<T>&, const T&);
template<class T> valarray<bool> operator< (const T&, const valarray<T>&);
template<class T> valarray<bool> operator> (const valarray<T>&, const T&);
template<class T> valarray<bool> operator> (const T&, const valarray<T>&);
template<class T> valarray<bool> operator<=(const valarray<T>&, const T&);
template<class T> valarray<bool> operator<=(const T&, const valarray<T>&);
template<class T> valarray<bool> operator>=(const valarray<T>&, const T&);
template<class T> valarray<bool> operator>=(const T&, const valarray<T>&);
template<class T> valarray<bool> operator&&(const valarray<T>&, const T&);
template<class T> valarray<bool> operator&&(const T&, const valarray<T>&);
template<class T> valarray<bool> operator||(const valarray<T>&, const T&);
template<class T> valarray<bool> operator||(const T&, const valarray<T>&);
[codeblock:end]

[enter:description]
[para]
[:en] Each of these operators may only be instantiated for a type [`T] to which
the indicated operator can be applied and for which the indicated operator
returns a value which is of type [`bool] or which can be unambiguously
implicitly converted to type [`bool].

[para]
[:en] Each of these operators returns a [`bool] array whose length is equal to
the length of the array argument.

[:en] Each element of the returned array is initialized with the result of
applying the indicated operator to the corresponding element of the array and
the non-array argument.
[exit:description]
