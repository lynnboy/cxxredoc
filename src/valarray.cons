[section#valarray.cons
    [:en] [`valarray] constructors
]

[%@library valarray[!valarray]]
[codeblock:declaration]
valarray();
[codeblock:end]

[enter:description]
[para:effects]
[:en] Constructs an object of class [`valarray<T>]

[footnote]
[:en] For convenience, such objects are referred to as ["arrays] throughout the
remainder of [#numarray].
[footnote:end]

[:en@~] which has zero length.

[footnote]
[:en] This default constructor is essential, since arrays of [`valarray] may be
useful.

[:en] After initialization, the length of an empty array can be increased with
the [`resize] member function.
[footnote:end]
[exit:description]

[%@library valarray[!constructor]]
[codeblock:declaration]
explicit valarray(size_t);
[codeblock:end]

[enter:description]
[para]
[:en] The array created by this constructor has a length equal to the value of
the argument.

[:en] The elements of the array are value-initialized ([#dcl.init]).
[exit:description]

[%@library valarray[!constructor]]
[codeblock:declaration]
valarray(const T&, size_t);
[codeblock:end]

[enter:description]
[para]
[:en] The array created by this constructor has a length equal to the second
argument.

[:en] The elements of the array are initialized with the value of the first
argument.
[exit:description]

[%@library valarray[!constructor]]
[codeblock:declaration]
valarray(const T*, size_t);
[codeblock:end]

[enter:description]
[para]
[:en] The array created by this constructor has a length equal to the second
argument [`n].

[:en] The values of the elements of the array are initialized with the first
[`n] values pointed to by the first argument.

[footnote]
[:en] This constructor is the preferred method for converting a C array to a
[`valarray] object.
[footnote:end]

[:en] If the value of the second argument is greater than the number of values
pointed to by the first argument, the behavior is [%undefined] undefined.
[exit:description]

[%@library valarray[!constructor]]
[codeblock:declaration]
valarray(const valarray&);
[codeblock:end]

[enter:description]
[para]
[:en] The array created by this constructor has the same length as the argument
array.

[:en] The elements are initialized with the values of the corresponding elements
of the argument array.

[footnote]
[:en] This copy constructor creates a distinct array rather than an alias.

[:en] Implementations in which arrays share storage are permitted, but they
shall implement a copy-on-reference mechanism to ensure that arrays are
conceptually distinct.
[footnote:end]
[exit:description]

[%@library valarray[!constructor]]
[codeblock:declaration]
valarray(valarray&& v) noexcept;
[codeblock:end]

[enter:description]
[para]
[:en] The array created by this constructor has the same length as the argument
array.

[:en] The elements are initialized with the values of the corresponding elements
of the argument array.

[para:complexity]
[:en] Constant.
[exit:description]

[%@library valarray[!constructor]]
[codeblock:declaration]
valarray(initializer_list<T> il);
[codeblock:end]

[enter:description]
[para:effects]
[:en] Same as [`valarray(il.begin(), il.size())].
[exit:description]

[%@library valarray[!constructor]]
[codeblock:declaration]
valarray(const slice_array<T>&);
valarray(const gslice_array<T>&);
valarray(const mask_array<T>&);
valarray(const indirect_array<T>&);
[codeblock:end]

[enter:description]
[para]
[:en] These conversion constructors convert one of the four reference templates
to a [`valarray].
[exit:description]

[%@library valarray[!destructor]]
[codeblock:declaration]
~valarray();
[codeblock:end]

[enter:description]
[para]
[:en] The destructor is applied to every element of [`*this]; an implementation
may return all allocated memory.
[exit:description]
