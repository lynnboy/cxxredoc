[section#valarray.transcend
    [:en] [`valarray] transcendentals
]

[%@library abs]
[%@library acos]
[%@library asin]
[%@library atan]
[%@library atan2]
[%@library cos]
[%@library cosh]
[%@library exp]
[%@library log]
[%@library log10]
[%@library pow]
[%@library sin]
[%@library sinh]
[%@library sqrt]
[%@library tan]
[%@library tanh]
[codeblock:declaration]
template<class T> valarray<T> abs  (const valarray<T>&);
template<class T> valarray<T> acos (const valarray<T>&);
template<class T> valarray<T> asin (const valarray<T>&);
template<class T> valarray<T> atan (const valarray<T>&);
template<class T> valarray<T> atan2
    (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> atan2(const valarray<T>&, const T&);
template<class T> valarray<T> atan2(const T&, const valarray<T>&);
template<class T> valarray<T> cos  (const valarray<T>&);
template<class T> valarray<T> cosh (const valarray<T>&);
template<class T> valarray<T> exp  (const valarray<T>&);
template<class T> valarray<T> log  (const valarray<T>&);
template<class T> valarray<T> log10(const valarray<T>&);
template<class T> valarray<T> pow
    (const valarray<T>&, const valarray<T>&);
template<class T> valarray<T> pow  (const valarray<T>&, const T&);
template<class T> valarray<T> pow  (const T&, const valarray<T>&);
template<class T> valarray<T> sin  (const valarray<T>&);
template<class T> valarray<T> sinh (const valarray<T>&);
template<class T> valarray<T> sqrt (const valarray<T>&);
template<class T> valarray<T> tan  (const valarray<T>&);
template<class T> valarray<T> tanh (const valarray<T>&);
[codeblock:end]

[enter:description]
[para]
[:en] Each of these functions may only be instantiated for a type [`T] to which
a unique function with the indicated name can be applied (unqualified).

[:en] This function shall return a value which is of type [`T] or which can be
unambiguously implicitly converted to type [`T].
[exit:description]
